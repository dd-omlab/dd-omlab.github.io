% linedit.m:   change/delete line properties in a figure% Written by:  Jonathan Jacobs%              March 1997 - June 2019  (last mod: 06/03/19)% 2016: big rewrite for HG2% 2019: Now resizeable and scrollable!function linedit(gf,~,~)%% can we run?if nargin==0, gf=findHotW; endif ~ishandle(gf)   disp('No valid plot window found.  Possible reasons:')   disp(' * You don''t have a figure window open.')   disp(' * You are trying to edit a Zoomtool window.')   disp(' * The Figure''s objects were set to be invisible.')   disp(' * I am having a nervous breakdown.')      yorn=input('Is there really an open figure? ','s');   if strcmpi(yorn,'y')      disp('MATLAB may have been set to have invisible components.')      yorn=input('I can try to read it anyway.  Would you like me to try? ','s');      if strcmpi(yorn,'y')         set(0,'ShowHiddenHandles','on')      else         disp('linedit canceled.')         return      end   else      return   endend %if ishandleif strcmp(gf.Tag,'EditingWindow')   disp('Bring a plot window to the front and try again.')   returnendh.gf=gf;% add editing tools to figure menum=OMmenu(gf); %#ok<NASGU>% check if the text editing window is already open% if it is, bring it to the frontwNum=findme('lineEditingWindow');if ishandle(wNum),figure(wNum);return;end%% determine figure's content% d=drawable_area;scrsize = get(0,'Screensize');mBarHgt = 22;h.maxHgt = scrsize(4)-mBarHgt;h.maxWid = scrsize(3);% not every child in the figure is an axis.ch=gf.Children;numCh=length(ch);if numCh==0   disp('Nothing to edit, slick.')   returnendcount = 0;tempga=gobjects(numCh,1);axpos=zeros(numCh,50);for ii=1:numCh   if strcmpi(ch(ii).Type,'axes')      count=count+1;      tempga(count)=ch(ii);      axpos(count,1:4)=tempga(count).Position;   endendif count==0, disp('No axes found. Quitting.'); return; end% howzabout a rudimentary sorting from top to bottom% and from left to right, in case we've got m x n axes?tempXY = axpos(:,1:2);[~,ind] = sort(tempXY(:,1));ind = flipud(ind);tempXY = tempXY(ind,:);tempga = tempga(ind);[~,ind] = sort(tempXY(:,2));ind = flipud(ind);ga = tempga(ind);numAxes = length(ga(ishandle(ga)));ga=ga(1:numAxes);% content tracking arrayslineH    = zeros(20,numAxes);patchH   = zeros(20,numAxes);barH     = zeros(20,numAxes);surfH    = zeros(20,numAxes);numLines = zeros(numAxes,1);numPatch = zeros(numAxes,1);numBar   = zeros(numAxes,1);numSurf  = zeros(numAxes,1);numObj   = zeros(numAxes,1);startObj = zeros(numAxes,1);stopObj  = zeros(numAxes,1);totalLines = zeros(numAxes,1);h.leH  = gobjects(60,numAxes); % collection of lines, patches and surfaces% how many lines/surfaces/patches are in each axisfor k = 1:numAxes   [numLines(k), lineH(1:numLines(k),k)]  = countobj('line', ga(k));   [numPatch(k), patchH(1:numPatch(k),k)] = countobj('patch', ga(k));   [numBar(k),   barH(1:numBar(k),k)]     = countobj('bar', ga(k));   [numSurf(k),  surfH(1:numSurf(k),k)]   = countobj('surface', ga(k));   numObj(k) = numLines(k) + numPatch(k) + numBar(k) + numSurf(k);      if numObj(k)>0      h.leH(1:numObj(k),k) = [lineH(1:numLines(k),k); ...         patchH(1:numPatch(k),k); barH(1:numBar(k),k); surfH(1:numSurf(k),k)];   end      totalLines(k) = numObj(k);   startObj(k) = 1;   stopObj(k)  = numObj(k);end%% initial UI setupfontsize=11;txtBG='c'; % default FG/BG for editable text fieldstxtFG='k';g=grapconsts;h.g=g;fig_width = 570;h.fig_width=fig_width;content_height = 50*sum(totalLines)+10*numAxes;leStartYHgt = 400;% 35pix top labels; 30 bottom 'Done','Update'f_climlo = 30; %pixels below p1 originf_climhi = 35; %pixels above p1 topf_rsrv= f_climlo + f_climhi;% Set the window position. Check if the window is already open.% If not, try to read its last saved position from the pref file.% If we can't, place it at its default position.% Make sure that it will be drawn completely on the screen, move if needed.dErrFlag=0; fErrFlag=0;if ~exist('leStartXPos','var'),leStartXPos=[]; endif isempty(leStartXPos)   curdir=pwd;   cd(pathsafe(matlabroot))   try    cd(findomprefs)   catch, dErrFlag=1; end   if dErrFlag      mkdir_stat=mkdir('omprefs');      if ~mkdir_stat         disp('** linedit: Unable to create ''omprefs'' dir.')         disp('** You may continue, but prefs will not be saved.')      end   else      try    load le5Prefs.mat leStartXPos leStartYPos leStartYHgt      catch, fErrFlag=1; end      if fErrFlag         leStartXPos = 50;         leStartYPos = 100;         leStartYHgt = 400;         save le5Prefs.mat leStartXPos leStartYPos leStartYHgt      end            % make sure that the window will be on the screen!      if leStartXPos<1,leStartXPos=1;end      if leStartYPos<1,leStartYPos=1;end      if (leStartYPos+leStartYHgt)>h.maxHgt         leStartYPos=h.maxHgt-leStartYHgt;      end      if (leStartXPos+fig_width)>h.maxWid         leStartXPos=h.maxWid-fig_width;      end   end   try    cd(pathsafe(curdir))   catch   endendif dErrFlag || fErrFlag   leStartYHgt = 400;   leStartXPos = 20;   leStartYPos = (h.maxHgt-leStartYHgt)/2;endfig_height=min(leStartYHgt,content_height+f_rsrv);p1_height=fig_height-f_rsrv; %35 pix top for labels; 30 bottom controls%p2_height=content_height;if ishandle(gf)   fignum=num2str(gf.Number);else   fignum=num2str(gf);end%% draw UI static content (labels,ops buttons)leFig = figure('pos',[leStartXPos, leStartYPos, fig_width, fig_height],...   'Resize','on','Name',['Line editor: editing figure ' fignum],...   'NumberTitle','off','MenuBar','none','Color',[0.94 0.94 0.94],...   'NextPlot','new','Tag','lineEditingWindow');p0=uipanel('Parent',leFig,'Tag','p0','BackgroundColor',[0.94 0.94 0.94]);set(p0,'Units','pixels','Position',[45 fig_height-32 500 30]);% fixed panel that holds the actual content panel.p1=uipanel('Parent',leFig,'Tag','p1','BackgroundColor',[1 0 0]);set(p1,'Units','pixels','Position',[5 f_climlo fig_width p1_height]);% put all scrollable content into panel2. scroll its pos within p1 using sp2=uipanel('Parent',p1,'Tag','p2','BackgroundColor',[0.94 0.94 0.94]);set(p2,'Units','pixels','Position',[5 0 fig_width-5 content_height]);s=uicontrol('Style','Slider','Parent',p1,'Units','normalized',...   'Position',[0.94 0 0.05 1],'Value',0);% set slider for initial drawings.Max=content_height;s.Min=s.Max-p1_height;s.BackgroundColor=[0.66 0.66 0.66];s.Value=s.Min;% fancy callbacks!addlistener(s,'ContinuousValueChange',...   @(hObject,event) s_live(hObject,event,p2));leFig.SizeChangedFcn      =@(hObject,event) resize(hObject,event,s);leFig.WindowScrollWheelFcn=@(hObject,event) wheel(hObject,event,s);alp = char(hex2dec('03b1'));uicontrol('Parent',p0,'Style','text',...   'Units','pixels','Position',[5 2 80 30],...   'HorizontalAlignment','Center','FontSize',11, ...   'String', ['Line Color' newline '(Face Color)']);uicontrol('Parent',p0,'Style','text',...   'Units','pixels','Position',[100 2 150 30],...   'HorizontalAlignment','Center','FontSize',11, ...   'String', ['Line Style            Width' newline ...   '(Face,Edge ' alp ')']);uicontrol('Parent',p0,'Style','text',...   'Units','pixels','Position',[230 2 95 30],...   'HorizontalAlignment','Center','FontSize',11, ...   'String', ['Symbol Type' newline 'Edge Color']);uicontrol('Parent',p0,'Style','text',...   'Units','pixels','Position',[345 2 75 30],...   'HorizontalAlignment','Center','FontSize',11, ...   'String', ['Symbol Size' newline 'Face Color']);uicontrol('Parent',p0,'Style','text',...   'Units','pixels','Position',[450 2 40 30],...   'HorizontalAlignment','Center','FontSize',11, ...   'String', ['Data' newline 'Ops.']);% Create the DONE, RELOAD & MAXIMIZE controls into the FIGURE windowy_pos=6;h.refreshH = uicontrol('Parent',leFig,'Style','push',...   'Units','pixels','Position',[15 y_pos 50 20],...   'String','Refresh','UserData',leFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) lEditAct(src,'refresh'));h.maximizeH = uicontrol('Parent',leFig,'Style','push',...   'Units','pixels','Position',[75 y_pos 50 20],...   'String','Maximize','UserData',leFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) maximize(src,eventdata));h.doneLH = uicontrol('Parent',leFig,'Style','push',...   'Units','pixels','Position',[145 y_pos 50 20],...   'String','Done','UserData',leFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) lEditAct(src,'done'));h.r_debugH = uicontrol('Parent',leFig,'Style','checkbox',...   'Units','pixels','Position',[260 y_pos 40 20],...   'String','R','UserData',leFig,'Tag','[0 0]');h.s_debugH = uicontrol('Parent',leFig,'Style','checkbox',...   'Units','pixels','Position',[302 y_pos 40 20],...   'String','S','UserData',leFig,'Tag','[0 0]');h.dumpH = uicontrol('Parent',leFig,'Style','push',...   'Units','pixels','Position',[360 y_pos 50 20],...   'String','h-dump','UserData',leFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) hdump(src,eventdata));%% draw UI dynamic content (per-axis edit controls)% Create line editing controls in the CONTENT PANEL (p2)y_pos=5; curr_cont_top=p1_height;for jj=numAxes:-1:1   numobj=stopObj(jj)-startObj(jj)+1;   % create axis frame 50pix*numobjects, plus 5 spacer pixels top and bottom   frame_height=numobj*50;   frame_top=y_pos+frame_height;   uicontrol('Parent',p2,'Style','Frame',...      'Units','pixels','Position',[3 y_pos 538 frame_height],...      'BackgroundColor',[0.7 0.7 0.7]);   y_pos=y_pos+5;   ax_top=frame_top+5;      % draw controls for axis into frame.   for ii=startObj(jj):stopObj(jj)      if strcmp(h.leH(ii,jj).Selected,'on')  % show me!         %hiliteStr = 'Hilite';         bgc='r';      else         %hiliteStr = 'Hilite';         bgc=[0.94 0.94 0.94];      end      h.edHiliteH(ii,jj) = uicontrol('Parent',p2,'Style','Push',...         'Units','Pixels','Position',[5 y_pos 41 36],...         'BackgroundColor',bgc,'String','Hilite','FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) lEditAct(src,'hilite'));            % scan each axis object, get its type, color, style, marker, etc.      % line/patch color      isLine  = strcmpi(h.leH(ii,jj).Type,'line');      isSurf  = strcmpi(h.leH(ii,jj).Type,'surface');      isPatch = strcmpi(h.leH(ii,jj).Type,'patch');      isBar   = strcmpi(h.leH(ii,jj).Type,'bar');      if isLine         lcolr = h.leH(ii,jj).Color;         color = whatcolor(lcolr);         lFGcolr = color.fg;         lBGcolr = color.bg;         lColrIndex = color.index;               elseif isPatch || isBar         peColr = h.leH(ii,jj).EdgeColor;         color  = whatcolor(peColr);         lFGcolr    = color.fg;         lBGcolr    = color.bg;         lColrIndex = color.index;                  pfColr = h.leH(ii,jj).FaceColor;         color  = whatcolor(pfColr);         pfFGcolr = color.rgb;         pfBGcolr = color.bg;         pfColrIndex = color.index;               elseif isSurf         %lcolr = [0 0 0];         %sfStrFlag=0; %seStrFlag=0;                  % surface face color         sfColr = h.leH(ii,jj).FaceColor;         if ischar(sfColr)            %sfStrFlag=1;            switch sfColr               case 'none',       sFaceIndex=1;               case 'flat',       sFaceIndex=2;               case 'interp',     sFaceIndex=3;               case 'texturemap', sFaceIndex=4;            end         else            %lcolr = sfColr;            sFaceIndex=5;         end         color = whatcolor(sfColr);         sfFGcolr = sfColr;         sfBGcolr = color.bg;         %sFaceIndex = color.index;                  % surface edge color         seColr = h.leH(ii,jj).EdgeColor;         if ischar(seColr)            %seStrFlag=1;            switch seColr               case 'none',   sEdgeIndex=1;               case 'flat',   sEdgeIndex=2;               case 'interp', sEdgeIndex=3;            end         else            %lcolr = seColr;            sEdgeIndex=4;         end         color = whatcolor(seColr);         seFGcolr = sfColr;         seBGcolr = color.bg;         %sEdgeIndex = color.index;      end %is line/patch/surf            % create and set the Line Color & Face Color popup menus      if isLine || isPatch || isBar  % create the line/patch/bar popup menus         h.edLSFaceH(ii,jj) = gobjects;         h.edLSEdgeH(ii,jj) = gobjects;         h.edLColrH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...            'Units','pixels','Position',[45 y_pos+10 112 20],...            'String',g.geColorStr,'FontSize',fontsize, ...            'Value',lColrIndex,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'BackgroundColor',lBGcolr,'ForeGroundColor',lFGcolr,...            'Callback',@(src,eventdata) lEditAct(src,'colr'));                  if isPatch || isBar            h.edLColrH(ii,jj).Position=[45 y_pos+20 112 20];            h.edLFColrH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...               'BackgroundColor',pfBGcolr,'ForeGroundColor',pfFGcolr,...               'Units','pixels','Position',[45 y_pos 112 20],...               'String',g.geColorStr,'Value',pfColrIndex,'FontSize',fontsize, ...               'UserData',ga(jj),'Tag',mat2str([ii,jj]),...               'Callback',@(src,eventdata) lEditAct(src,'fcolr'));         else            h.edLFColrH(ii,jj) = gobjects;         end                        elseif isSurf %%%|| isBar    % make the surf popup menus         h.edLColrH(ii,jj) = gobjects;         h.edLFColrH(ii,jj) = gobjects;         h.edLSFaceH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...            'BackgroundColor',sfBGcolr,'ForeGroundColor',sfFGcolr,...            'Units','pixels','Position',[45 y_pos 112 20],...            'String',g.geSurfStr,'FontSize',fontsize, ...            'Value', sFaceIndex,...            'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'surf_face'));         h.edLSEdgeH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...            'BackgroundColor',seBGcolr,'ForeGroundColor',seFGcolr,...            'Units','pixels','Position',[45 y_pos-20 112 20],...            'String',g.geEdgeStr,'FontSize',fontsize, ...            'Value', sEdgeIndex,...            'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'surf_edge'));      end            if isLine || isPatch || isBar         % modify the color popup menu         if lColrIndex == g.OTHER            newColorStr = g.geColorStr;            newColorStr{g.OTHER}=color.str;            h.edLColrH(ii,jj).String=newColorStr;         end      end      if isPatch         % modify the edge color popup menu         if pfColrIndex == g.OTHER            newColorStr = g.geColorStr;            newColorStr{g.OTHER}=color.str;            h.edLFColrH(ii,jj).String=newColorStr;         end      end            temp = h.leH(ii,jj).LineStyle;      if length(temp)==1, linStyle = [temp, ' '];      else,               linStyle = temp; end      temp = strfind(g.geStyles,linStyle(1:2));      styleIndex = (temp+1)/2;                  % Line Style & Width      h.edLStylH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...         'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...         'Units','pixels','Position',[150 y_pos+20 93 20],...         'String',g.geStyleStr,'FontSize',fontsize, ...         'Value',styleIndex,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) lEditAct(src,'style'));      if isLine,h.edLStylH(ii,jj).Position=[150 y_pos+10 93 20];end            h.edLWidH(ii,jj) = uicontrol('Style','edit','Parent',p2,...         'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...         'Units','pixels','Position',[240 y_pos+20 30 20],...         'String',num2str(h.leH(ii,jj).LineWidth'),...         'FontSize',fontsize,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) lEditAct(src,'width'));      if isLine,h.edLWidH(ii,jj).Position=[240 y_pos+10 30 20];end            % transparency (Face & Edge Alpha)      if isSurf || isPatch || isBar         h.edFaceAlphaH(ii,jj) = uicontrol('Style','edit','Parent',p2,...            'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...            'Units','pixels','Position',[155 y_pos 30 20],...            'String',num2str(h.leH(ii,jj).FaceAlpha),...            'FontSize',fontsize,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'alpha_face'));                  h.edEdgeAlphaH(ii,jj) = uicontrol('Style','edit','Parent',p2,...            'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...            'Units','pixels','Position',[190 y_pos 30 20],...            'String',num2str(h.leH(ii,jj).EdgeAlpha),...            'FontSize',fontsize,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'alpha_edge'));      else         h.edFaceAlphaH(ii,jj) = gobjects;         h.edEdgeAlphaH(ii,jj) = gobjects;      end            % marker symbol color      if ~isBar         symb = h.leH(ii,jj).Marker;         symbIndex = strfind(g.geSymbol,symb(1));         h.edLSymbH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...            'Units','pixels','Position',[278 y_pos+20 112 20],...            'String',g.geSymbStr,'FontSize',fontsize, ...            'Value',symbIndex,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'symb'));                  % set marker edge color         edgeClr = h.leH(ii,jj).MarkerEdgeColor;         color = whatcolor(edgeClr);         h.edLMkEdClrH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...            'BackgroundColor',color.bg,'ForeGroundColor',color.fg,...            'Units','pixels','Position',[278 y_pos 112 20],...            'Value',color.index,'String',g.geMkEClrStr,'FontSize',fontsize,...            'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'mkeclr'));                  % marker face color         faceClr = h.leH(ii,jj).MarkerFaceColor;         color = whatcolor(faceClr);         h.edLMkFcClrH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...            'BackgroundColor',color.bg,'ForeGroundColor',color.fg,...            'Units','pixels','Position',[388 y_pos 112 20],...            'String',g.geMkFClrStr,'FontSize',fontsize, ...            'Value',color.index,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'mkfclr'));                  % marker size         h.edLMSzH(ii,jj) = uicontrol('Style','edit','Parent',p2,...            'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...            'Units','pixels','Position',[395 y_pos+20 30 20],...            'String',num2str(h.leH(ii,jj).MarkerSize),...            'FontSize',fontsize,'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) lEditAct(src,'mrkrSz'));      else         h.edLMSzH(ii,jj)     = gobjects;         h.edLMkFcClrH(ii,jj) = gobjects;         h.edLMkEdClrH(ii,jj) = gobjects;         h.edLSymbH(ii,jj)    = gobjects;               end %if ~isbar                  h.edLDelH(ii,jj) = uicontrol('Parent',p2,'Style','push',...         'Units','pixels','Position',[445 y_pos+20 40 20],...         'String','Delete','FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) lEditAct(src,'delete'));            if isLine         h.yankH(ii,jj) = uicontrol('Parent',p2,'Style','push',...            'Units','Pixels','Position',[495 y_pos+20 40 20],...            'String','Copy','FontSize',fontsize, ...            'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Tooltip','Copy data to base workspace as "xdata","ydata"',...            'Callback',@(src,eventdata) lEditAct(src,'datacopy'));      else         h.yankH(ii,jj) = gobjects;      end            % jump to top of axis frame      y_pos=y_pos+50;      if ax_top>=curr_cont_top         curr_cont_top=min(content_height,ax_top);         curr_p2=p2.Position;         curr_p2(2)=max(curr_p2(2)-60,(p1_height-content_height));         curr_p2(4)=curr_p2(4);         p2.Position=curr_p2;      end         end %for   y_pos=y_pos+5;end %for j% place slider at 100%p2pos=p2.Position;p2pos(1)=0;p2.Position=p2pos;s.Value=s.Max;s.UserData=s.Value;h.p2=p2; h.p1=p1; h.p0=p0; h.s=s;h.f_rsrv=f_rsrv;h.prev_ht=fig_height;leFig.UserData=h;s_live(s,[],p2)% bring the graph(s) window back to the frontfigure(gf)end %function linedit%% %%%%%%%%%% live scrolling %%%%%%%%%%% %%function s_live(s,~,content_panel)%p2=findobj(src.Children,'Type','uipanel','Tag','p2');p2p=content_panel.Position;p2p_ht=fix(p2p(4));p1_panel=content_panel.Parent;p1p=p1_panel.Position;p1p_ht=fix(p1p(4));leFig = s.Parent.Parent;h=leFig.UserData;s_debug=h.s_debugH.Value;p2p1diff = p2p_ht-p1p_ht;p2p1rat  = p2p_ht/p1p_ht;s.Min=p2p_ht-p2p1diff;if p2p1diff==0   s.Visible='off';   s.Value=s.Max;   returnelseif 1/p2p1rat>0.9   s.SliderStep=[0.01 50];elseif 1/p2p1rat>0.6   s.SliderStep=[0.01 10];elseif 1/p2p1rat>0.3   s.SliderStep=[0.01 2.5];elseif 1/p2p1rat>0.05   s.SliderStep=[0.01 1];endsldr_val=s.Value;sldr_val=min(s.Max,sldr_val);sldr_val=max(s.Min,sldr_val);sldr_pct=(sldr_val/(s.Max-s.Min)) * 1/p2p1rat;s.UserData=sldr_val;s.Visible='on';% calc new p2 positioncont_top = fix(sldr_val);cont_bot = fix(sldr_val-p1p_ht);if cont_bot<0   cont_bot=0;end%cont_bot=max(cont_bot,p1p_ht-p2p_ht);p2p_top = fix(sldr_pct*cont_top);p2p_top = min(p2p_top,p2p_ht);p2p_bot = fix(cont_top-p2p_ht);p2p_bot = max(p2p_bot,p2p_ht-p1p_ht);if s_debug   fprintf('s: [lims],val,pct = [%g %g], %g, (%.2g)\r', ...      s.Max,s.Min,sldr_val,sldr_pct)   fprintf('s: Slider step    = [%g %g]\r', s.SliderStep)   fprintf('s: p2p,p1p_ht     = %g, %g\r', p2p_ht, p1p_ht)   fprintf('s: p2-p1, p2/p1   = %g, %.2g  (%.2g)\r', p2p1diff, p2p1rat, 1/p2p1rat)   fprintf('s: p2p_top,bot    = [%d  %d]\r', p2p_top,p2p_bot)   fprintf('s: cont_top,bot   = [%d  %d]\r', cont_top,cont_bot)   fprintf( '\r' )endcontent_panel.Position=[p2p(1) -cont_bot p2p(3) p2p_ht];drawnowend %function s_live%% %%%%%%%%%% scroll wheel %%%%%%%%%% %%function wheel(hObject,event,s)s1=event.VerticalScrollCount;%fprintf('Scroll: %d\r',s1);p2=hObject.UserData.p2;wheelval=s.Value-(2.5*s1); % scroll 'acceleration'. set purely by taste.if wheelval>s.Max   wheelval=s.Max;elseif wheelval<s.Min   wheelval=s.Min;ends.Value=wheelval;s_live(s,[],p2)end %function wheel%% %%%%%%%%%% live resizing %%%%%%%%%% %%function resize(src,~,s)scrsize = get(0,'Screensize');mBarHgt = 22;  % for macOS. any way to tell dock height?maxHgt = scrsize(4)-mBarHgt;% be more clever about how to resize.% check for resize direction (+ or -)% check whether fig was clicked at top or bottom% %%% does not work cleanly: ignores titlebar click pos. %%%c_loc = src.CurrentPoint;if c_loc(2)<25 && c_loc(2)>0   a='bottom'; %#ok<NASGU>else   a='top'; %#ok<NASGU> % or so we assumeend%fprintf('Clicked: %s (%d)\r',a,c_loc(2));src.CurrentPoint=[-1 -1];h=src.UserData;r_debug=h.r_debugH.Value;prev_sval=s.UserData;prev_ht=h.prev_ht;fpos=src.Position;newf_ht=fix(fpos(4));fpos(3)=h.fig_width; % do not allow width changeif newf_ht>prev_ht   growing=1; %#ok<NASGU> %disp('growing')else   growing=0; %#ok<NASGU> %disp('shrinking')endp0=findobj(src.Children,'Type','uipanel','Tag','p0');p1=findobj(src.Children,'Type','uipanel','Tag','p1');p2=findobj(src.Children,'Type','uipanel','Tag','p2');p0p=p0.Position;p1p=p1.Position;p2p=p2.Position;% redraw p0 panel (contains top labels)p0p(2)=newf_ht-p0p(4)-2;p0.Position=p0p;% window can only add content to the top, try to split diff% As we drag, we may reach either top or bottom limit. in that case,% only add to the non-limited end (until it reaches its limit)p2p_bot  = fix(p2p(2));p2p_ht   = fix(p2p(4)); % constant. is calced during GUI initp2p_top  = p2p_bot+p2p_ht;p1p_ht   = min(newf_ht-h.f_rsrv,p2p_ht);  %subtract 30pix bot,35pix topp2p1diff = p2p_ht-p1p_ht;p2p1rat  = p2p_ht/p1p_ht;if p2p1diff<0   disp('!!! p2p1diff < 0 !!!')   keyboardend% resize p1 to fit new fig heightp1p_ht=min(p2p_ht,p1p_ht);p1p_ht=max(p1p_ht,100);p1.Position=[p1p(1) p1p(2) p1p(3) p1p_ht];% keep fig window within size limitsfpos(4)=p1p_ht+h.f_rsrv;fpos(4)=min(fpos(4),maxHgt);src.Position=fpos;h.prev_ht=newf_ht;% calc content's top and bottomcont_bot = max(p2p_top-p1p_ht-p2p1diff,0);cont_top = min(cont_bot+p1p_ht,p2p_ht);% readjust p2 origin to fill p1p2p_bot = p2p_top-p1p_ht;p2.Position=[p2p(1) p2p_bot p2p(3) p2p_ht];% new values to use/store%s.Max=p1p_ht;s.UserData=s.Value; %current slider vals.Position(4)=p1p_ht;% ??? slider value will not change. use it to keep current view ???% centered if possible. See below for limitations.s.Min=s.Max-p1p_ht;sval=fix(s.Value);spct=sval/(s.Max-s.Min)*1/p2p1rat;if r_debug==1   fprintf('r: Old,new fig ht = %d, %d\r',       prev_ht,newf_ht)   fprintf('r: Prev sldr val  = %g\r',           prev_sval)   fprintf('r: New  sldr val  = %g\r',           s.Value)   fprintf('r: [lims],val,pct = [%g %g], %g, (%.2g)\r', ...      fix(s.Max),fix(s.Min),sval,spct)   fprintf('r: p2,p1 hts      = %d, %d\r',           p2p_ht,p1p_ht)   fprintf('r: p2-p1,p2/p1    = %d, %.2g  (%.2g)\r', p2p1diff,p2p1rat, 1/p2p1rat)   fprintf('r: p2p_top,bot    = [%d  %d]\r',         p2p_top,p2p_bot)   fprintf('r: cont_top,bot   = [%d  %d]\r',         cont_top,cont_bot)   fprintf( '\r' )ends_live(s,[],p2)end %function resize%% %%%%%%%%%% handle dump %%%%%%%%%% %%function hdump(src,~)h=src.Parent.UserData;assignin('base','lehands',h)disp('linedit handles saved in base as "lehands"')end %function maximize%% %%%%%%%%%% maximize control window height %%%%%%%%%% %%function maximize(src,~)f=src.Parent;h=src.Parent.UserData;p1=h.p1;p2=h.p2;s=h.s;figp=f.Position;p1p=p1.Position;p2p=p2.Position;if p1p(4)-p2p(4)==0   %disp('already maximized')   returnendf_maxht= p2p(4)+h.f_rsrv; % fig_ht MUST <= content ht + fig's rsrvr spacef_maxht = min( h.maxHgt, f_maxht );% grow upwards or downwards?%curr_fbot=figp(2);%curr_fht=figp(4);%curr_ftop=curr_fbot+curr_fht;%addpix=f_maxht-curr_fht;%extratop=h.maxHgt-curr_ftop;%extrabot=curr_fbot;%extrapix=extratop+extrabot;%addtop=addpix*(extratop/extrapix);%addbot=addpix-addtop;%new_ftop = min(curr_ftop+addtop, h.maxHgt);%new_fbot = max(curr_fbot-addbot, 0);new_ftop = h.maxHgt-(h.maxHgt-f_maxht)/2;new_fbot = new_ftop-f_maxht;figp(2)=new_fbot;figp(4)=new_ftop-new_fbot;p1p(4)=figp(4)-h.f_rsrv;p1.Position=p1p;p2p(2)=p2p(4)-p1p(4);p2.Position=p2p;f.Position=figp;s_live(s,[],p2)end %function maximize