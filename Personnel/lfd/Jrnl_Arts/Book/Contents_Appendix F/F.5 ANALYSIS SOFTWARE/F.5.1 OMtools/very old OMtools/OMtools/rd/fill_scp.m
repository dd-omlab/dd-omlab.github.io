% fill_scp:  called by 'load_scp.m'% once the appropriate set of SCPs has been selected, load_scp will% place the SCPs (saccade onsets, offsets, etc) into appropriate L/R arrays% written by:  Jonathan Jacobs%              September 1995 - May 1997  (last mod: 05/20/97)maxNumSacs = 100;  %% max possible # of saccades assoc with a given file.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% The eye data that was read in was added to the appropriate arrays in RD.% The saccade control points were just loaded in LOAD_SCP.% Now we need to assign these points to their appropriate arrays.  % initialize each included eye/pos column's entries% hasSacPts(total_files,:) = [0 0 0 0 0 0];[lh_rows, lh_col] = size(lh);  [rh_rows, rh_col] = size(rh);[lv_rows, lv_col] = size(lv);  [rv_rows, rv_col] = size(rv);[lt_rows, lt_col] = size(lt);  [rt_rows, rt_col] = size(rt);% Check to see if eye movement data was loaded for this eye/dir.% If so, initialize the SCP array for the column.if has_LH(total_files) == 1   sacv_on_lh(:,lh_col)   = NaN*ones(maxNumSacs,1);   sacp_on_lh(:,lh_col)   = NaN*ones(maxNumSacs,1);   sacp_off_lh(:,lh_col)  = NaN*ones(maxNumSacs,1);   sacv_off_lh(:,lh_col)  = NaN*ones(maxNumSacs,1);   slow_peak_lh(:,lh_col) = NaN*ones(maxNumSacs,1);   max_v_pt_lh(:,lh_col)  = NaN*ones(maxNumSacs,1);   cycle_beg_lh(:,lh_col) = NaN*ones(maxNumSacs,1);   cycle_end_lh(:,lh_col) = NaN*ones(maxNumSacs,1);   prev_fov_lh(:,lh_col)  = NaN*ones(maxNumSacs,1);   stype_lh(lh_col,:)     = 'none         ';   wform_lh(lh_col,:)     = 'none ';   hasSacPts(total_files, 1) = 0;endif has_RH(total_files) == 1   sacv_on_rh(:,rh_col)   = NaN*ones(maxNumSacs,1);   sacp_on_rh(:,rh_col)   = NaN*ones(maxNumSacs,1);   sacp_off_rh(:,rh_col)  = NaN*ones(maxNumSacs,1);   sacv_off_rh(:,rh_col)  = NaN*ones(maxNumSacs,1);   slow_peak_rh(:,rh_col) = NaN*ones(maxNumSacs,1);   max_v_pt_rh(:,rh_col)  = NaN*ones(maxNumSacs,1);   cycle_beg_rh(:,rh_col) = NaN*ones(maxNumSacs,1);   cycle_end_rh(:,rh_col) = NaN*ones(maxNumSacs,1);   prev_fov_rh(:,rh_col)  = NaN*ones(maxNumSacs,1);   stype_rh(rh_col,:)     = 'none         ';   wform_rh(rh_col,:)     = 'none ';   hasSacPts(total_files, 2) = 0;endif has_LV(total_files) == 1   sacv_on_lv(:,lv_col)   = NaN*ones(maxNumSacs,1);   sacp_on_lv(:,lv_col)   = NaN*ones(maxNumSacs,1);   sacp_off_lv(:,lv_col)  = NaN*ones(maxNumSacs,1);   sacv_off_lv(:,lv_col)  = NaN*ones(maxNumSacs,1);   slow_peak_lv(:,lv_col) = NaN*ones(maxNumSacs,1);   max_v_pt_lv(:,lv_col)  = NaN*ones(maxNumSacs,1);   cycle_beg_lv(:,lv_col) = NaN*ones(maxNumSacs,1);   cycle_end_lv(:,lv_col) = NaN*ones(maxNumSacs,1);   prev_fov_lv(:,lv_col)  = NaN*ones(maxNumSacs,1);   stype_lv(lv_col,:)     = 'none         ';   wform_lv(lv_col,:)     = 'none ';   hasSacPts(total_files, 3) = 0;endif has_RV(total_files) == 1   sacv_on_rv(:,rv_col)   = NaN*ones(maxNumSacs,1);   sacp_on_rv(:,rv_col)   = NaN*ones(maxNumSacs,1);   sacp_off_rv(:,rv_col)  = NaN*ones(maxNumSacs,1);   sacv_off_rv(:,rv_col)  = NaN*ones(maxNumSacs,1);   slow_peak_rv(:,rv_col) = NaN*ones(maxNumSacs,1);   max_v_pt_rv(:,rv_col)  = NaN*ones(maxNumSacs,1);   cycle_beg_rv(:,rv_col) = NaN*ones(maxNumSacs,1);   cycle_end_rv(:,rv_col) = NaN*ones(maxNumSacs,1);   prev_fov_rv(:,rv_col)  = NaN*ones(maxNumSacs,1);   stype_rv(rv_col,:)     = 'none         ';   wform_rv(rv_col,:)     = 'none ';   hasSacPts(total_files, 4) = 0;endif has_LT(total_files) == 1   sacv_on_lt(:,lt_col)   = NaN*ones(maxNumSacs,1);   sacp_on_lt(:,lt_col)   = NaN*ones(maxNumSacs,1);   sacp_off_lt(:,lt_col)  = NaN*ones(maxNumSacs,1);   sacv_off_lt(:,lt_col)  = NaN*ones(maxNumSacs,1);   slow_peak_lt(:,lt_col) = NaN*ones(maxNumSacs,1);   max_v_pt_lt(:,lt_col)  = NaN*ones(maxNumSacs,1);   cycle_beg_lt(:,lt_col) = NaN*ones(maxNumSacs,1);   cycle_end_lt(:,lt_col) = NaN*ones(maxNumSacs,1);   prev_fov_lt(:,lt_col)  = NaN*ones(maxNumSacs,1);   stype_lt(lt_col,:)     = 'none         ';   wform_lt(lt_col,:)     = 'none ';   hasSacPts(total_files, 5) = 0;endif has_RT(total_files) == 1   sacv_on_rt(:,rt_col)   = NaN*ones(maxNumSacs,1);   sacp_on_rt(:,rt_col)   = NaN*ones(maxNumSacs,1);   sacp_off_rt(:,rt_col)  = NaN*ones(maxNumSacs,1);   sacv_off_rt(:,rt_col)  = NaN*ones(maxNumSacs,1);   slow_peak_rt(:,rt_col) = NaN*ones(maxNumSacs,1);   max_v_pt_rt(:,rt_col)  = NaN*ones(maxNumSacs,1);   cycle_beg_rt(:,rt_col) = NaN*ones(maxNumSacs,1);   cycle_end_rt(:,rt_col) = NaN*ones(maxNumSacs,1);   prev_fov_rt(:,rt_col)  = NaN*ones(maxNumSacs,1);   stype_rt(rt_col,:)     = 'none         ';   wform_rt(rt_col,:)     = 'none ';   hasSacPts(total_files, 6) = 0;end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% if there isn't an appropriate file then the control points are 'NaN'isFile = eval( ['exist(''' sacpt_file ''')'] );if (~isFile)   disp( ['  <<I can not find the saccade points file: ' sacpt_file '>>'] )   disp( ['  <<It must be in the same directory as ' filename '>>'] )   disp(  '  <<I will fill the control points with NaNs>>' )   sac_loaded = 0;   whichWFST(total_files,:) = '?????   ?????????????'; %5,3,13   returnend %(~isFile)% if we did load a file, and we selected a wf/st SCP set we now%whichSet  = find(state == 1);datsetlist = matchArray(whichSet,:);whichWFST(total_files,:) = target(whichSet,:);if ~all(datsetlist);   disp( 'Holy shit!!! Internal error: can''t find datset = (wf & st)' )   sac_loaded = 0;   return else   sac_loaded = 1;end   % pull the zeros from the dataset listgoodpts = find(datsetlist ~= 0);datsetlist = datsetlist(goodpts);% We've got the proper data set index.  % It can have any or all of: lh rh lv rh lt rt.% let's actually do the work and load the points into the  matrices%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% check for each channel.  If there is scp data for that channel% then we will put it into the scp array for that eye/directionfor x = 1:length(datsetlist)   datset = datsetlist(x);   % check for L and/or R eye data & L and/or  R SCPs   hasLHscp = 0; hasRHscp = 0;   hasLVscp = 0; hasRVscp = 0;   hasLTscp = 0; hasRTscp = 0;   if strcmpi( deblank(eye(datset,:)), 'lh' ), hasLHscp = 1; end   if strcmpi( deblank(eye(datset,:)), 'rh' ), hasRHscp = 1; end   if strcmpi( deblank(eye(datset,:)), 'lv' ), hasLVscp = 1; end   if strcmpi( deblank(eye(datset,:)), 'rv' ), hasRVscp = 1; end   if strcmpi( deblank(eye(datset,:)), 'lt' ), hasLTscp = 1; end   if strcmpi( deblank(eye(datset,:)), 'rt' ), hasRTscp = 1; end   if hasLHscp == 1     sacv_on_lh(:,lh_col)   = sacv_on(:,datset);     sacp_on_lh(:,lh_col)   = sacp_on(:,datset);     sacp_off_lh(:,lh_col)  = sacp_off(:,datset);     sacv_off_lh(:,lh_col)  = sacv_off(:,datset);     slow_peak_lh(:,lh_col) = slow_peak(:,datset);     max_v_pt_lh(:,lh_col)  = max_v_pt(:,datset);     cycle_beg_lh(:,lh_col) = cycle_beg(:,datset);     cycle_end_lh(:,lh_col) = cycle_end(:,datset);     prev_fov_lh(:,lh_col)  = prev_fov_pt(:,datset);     stype_lh(lh_col,:)     = s_type(datset,:);     wform_lh(lh_col,:)     = w_form(datset,:);     hasSacPts(total_files, 1) = 1;     which_lh_col(total_files) = lh_col;   elseif hasRHscp == 1     sacv_on_rh(:,rh_col)   = sacv_on(:,datset);     sacp_on_rh(:,rh_col)   = sacp_on(:,datset);     sacp_off_rh(:,rh_col)  = sacp_off(:,datset);     sacv_off_rh(:,rh_col)  = sacv_off(:,datset);     slow_peak_rh(:,rh_col) = slow_peak(:,datset);     max_v_pt_rh(:,rh_col)  = max_v_pt(:,datset);     cycle_beg_rh(:,rh_col) = cycle_beg(:,datset);     cycle_end_rh(:,rh_col) = cycle_end(:,datset);     prev_fov_rh(:,rh_col)  = prev_fov_pt(:,datset);     stype_rh(rh_col,:)     = s_type(datset,:);     wform_rh(rh_col,:)     = w_form(datset,:);     hasSacPts(total_files, 2) = 1;     which_rh_col(total_files) = rh_col;   elseif hasLVscp == 1     sacv_on_lv(:,lv_col)   = sacv_on(:,datset);     sacp_on_lv(:,lv_col)   = sacp_on(:,datset);     sacp_off_lv(:,lv_col)  = sacp_off(:,datset);     sacv_off_lv(:,lv_col)  = sacv_off(:,datset);     slow_peak_lv(:,lv_col) = slow_peak(:,datset);     max_v_pt_lv(:,lv_col)  = max_v_pt(:,datset);     cycle_beg_lv(:,lv_col) = cycle_beg(:,datset);     cycle_end_lv(:,lv_col) = cycle_end(:,datset);     stype_lv(lv_col,:)     = s_type(datset,:);     wform_lv(lv_col,:)     = w_form(datset,:);     prev_fov_lv(:,lh_col)  = prev_fov_pt(:,datset);     hasSacPts(total_files, 3) = 1;     which_lv_col(total_files) = lv_col;   elseif hasRVscp == 1     sacv_on_rv(:,rv_col)   = sacv_on(:,datset);     sacp_on_rv(:,rv_col)   = sacp_on(:,datset);     sacp_off_rv(:,rv_col)  = sacp_off(:,datset);     sacv_off_rv(:,rv_col)  = sacv_off(:,datset);     slow_peak_rv(:,rv_col) = slow_peak(:,datset);     max_v_pt_rv(:,rv_col)  = max_v_pt(:,datset);     cycle_beg_rv(:,rv_col) = cycle_beg(:,datset);     cycle_end_rv(:,rv_col) = cycle_end(:,datset);     prev_fov_rv(:,rv_col)  = prev_fov_pt(:,datset);     stype_rv(rv_col,:)     = s_type(datset,:);     wform_rv(rv_col,:)     = w_form(datset,:);     hasSacPts(total_files, 4) = 1;     which_rv_col(total_files) = rv_col;   elseif hasLTscp == 1     sacv_on_lt(:,lt_col)   = sacv_on(:,datset);     sacp_on_lt(:,lt_col)   = sacp_on(:,datset);     sacp_off_lt(:,lt_col)  = sacp_off(:,datset);     sacv_off_lt(:,lt_col)  = sacv_off(:,datset);     slow_peak_lt(:,lt_col) = slow_peak(:,datset);     max_v_pt_lt(:,lt_col)  = max_v_pt(:,datset);     cycle_beg_lt(:,lt_col) = cycle_beg(:,datset);     cycle_end_lt(:,lt_col) = cycle_end(:,datset);     prev_fov_lt(:,lt_col)  = prev_fov_pt(:,datset);     stype_lt(lt_col,:)     = s_type(datset,:);     wform_lt(lt_col,:)     = w_form(datset,:);     hasSacPts(total_files, 5) = 1;     which_lt_col(total_files) = lt_col;   elseif hasRTscp == 1     sacv_on_rt(:,rt_col)   = sacv_on(:,datset);     sacp_on_rt(:,rt_col)   = sacp_on(:,datset);     sacp_off_rt(:,rt_col)  = sacp_off(:,datset);     sacv_off_rt(:,rt_col)  = sacv_off(:,datset);     slow_peak_rt(:,rt_col) = slow_peak(:,datset);     max_v_pt_rt(:,rt_col)  = max_v_pt(:,datset);     cycle_beg_rt(:,rt_col) = cycle_beg(:,datset);     cycle_end_rt(:,rt_col) = cycle_end(:,datset);     prev_fov_rt(:,rt_col)  = prev_fov_pt(:,datset);     stype_rt(rt_col,:)     = s_type(datset,:);     wform_rt(rt_col,:)     = w_form(datset,:);     hasSacPts(total_files, 6) = 1;     which_rt_col(total_files) = rt_col;   end %if hasLH/RHscp   nsacs(x) = length(find(~isnan(sacp_on(:,datset))));end %for xdisp(['   Loaded ' num2str(sum(nsacs)) ' saccades.'])