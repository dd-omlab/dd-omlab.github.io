function zoomtggl(ga, howCalled);% ZOOMTGGL Used by ZOOMTOOL to move toggle attachment of%           cursors to line objects.%       ZOOMTGGLT(H,howCalled) where H is the axis ZOOMTOOL is active in%           and howCalled is either 1) 'line click'%                                   2) 'toggle button'%                                   3) 'key press'%%       See also ZOOMCLR ZOOMDOWN ZOOMLEFT ZOOMMENU ZOOMMOVE%           ZOOMPKLF ZOOMPKRT ZOOMRGHT ZOOMSET ZOOMTGGL ZOOMTOOL%           ZOOMUP ZOOMXFUL ZOOMXIN ZOOMXOUT ZOOMYFUL ZOOMYIN%           ZOOMYOUT%       Dennis W. Brown 1-10-94%       Copyright (c) 1994 by Dennis W. Brown%       May be freely distributed.%       Not for use in commercial products.%   -Modified by Jonathan Jacobs, February 1997, to allow toggling%   directly to a clicked line, rather than by cycling through all%   existing lines.  This requires a parameter 'howCalled'%   to insure proper behavior of 1) line-click toggling%                                2) toggle button toggling%                                3) key-press ('T') toggling%%      Clicking on a line makes it the current line.  Its ButtonDownFcn is %      now "zoomdown".  The previous current line's ButtonDownFcn is reset to %      "ZOOMTGGL" (with an parameter of 'line click').%%   -Fixed so that it is now possible to plot lines with different x-limits%   yet still jump between them with out causing an error.  (jj - 9/97)% Modifications by Jonathan Jacobs%                  September 1997 - December 2000 (last mod: 12/17/00)%disp( 'zoomtggl')%disp( ['how called: ' howCalled] )kprss = strcmp(howCalled, 'key press');gf = get(ga,'Parent');% get handles to all the linesh = get(findpush(gf,'T'),'UserData');% get present linehcur = findline(ga,'zoomed');% Obtain coordinates of mouse click location in axes unitspt = get(ga,'Currentpoint');t = pt(1,1);              % added by Jonathan Jacobs so that a  if (t < 1) | kprss        % toggle before clicking in axis doesn't   t = crsrloc(ga,1001);  % make the cursor jump to beginningend%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% added by Jonathan Jacobs to fix toggling behaviorgcoStr = mat2str(gco);if length(gcoStr) < 4   gcoStr = '000000';   % since a short handle could pattern-matchend                     % into the line handle strings%%% diagnostics %%%%hStr = mat2str(h);%curLineStr = mat2str(hcur);%gco_is_a_line  = findstr( gcoStr, hStr ) ~= [];%gco_is_curline = strcmp(gcoStr,curLineStr);%disp( '  ' )%disp( ['hStr = ' hStr] )%disp( ['gcoStr = ' gcoStr] )%disp( ['curLineStr = ' curLineStr] )%disp( ['gco is a line = ' num2str(gco_is_a_line)] )%disp( ['gco is current line = ' num2str(gco_is_curline)] )%%%if strcmp(howCalled, 'line click')   for i = 1:length(h)      hiStr = mat2str(h(i));      if all(strcmp(hiStr, gcoStr))         %curLineStr = mat2str(h(i));         break      end   end  else     i = find(h == hcur);     % find current line's index                              % only toggle between VISIBLE lines     isVis = 0;     while ~isVis	     i = i + 1;            % increase its index	     if i > length(h),     % wrap if necessary	        i = 1;	     end;	     isVis = strcmp(get(h(i),'Vis'),'on');     end     %curLineStr = mat2str(h(i));end%disp( ['NEW curLineStr = ' curLineStr] )%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% re-identify the linesset(hcur,'UserData',[]);           % no longer the current lineset(h(i),'UserData','zoomed');     % this is now the current line% change the string for the line toggle checkbox to indicate current line% find the checkbox with the OLD line's color% added by Jonathan Jacobs, February 1997% modfied 02/10/99oldTag = get(hcur, 'Tag');oldBoxH = findobj(gcf, 'Style', 'checkbox', 'Tag', oldTag);if ~isempty(oldBoxH)	oldStr  = get(oldBoxH, 'String');	oldPos  = get(oldBoxH, 'Position');	oldPos(3)  = 65;	set(oldBoxH,'Position',oldPos);	oldStr(3)  = ' '; oldStr(4) = ' ';	set(oldBoxH,'String', oldStr);   set(oldBoxH,'Fontweight', 'Normal');   set(oldBoxH,'Fontsize', 10);   set(oldBoxH,'FontAngle', 'Normal');		newTag = get(h(i), 'Tag');	newBoxH = findobj(gcf, 'Style', 'checkbox', 'Tag', newTag);	newStr  = get(newBoxH, 'String');	newPos  = get(newBoxH, 'Position');	newPos(3)  = 65;	set(newBoxH,'Position',newPos);	newStr(3)  = '<'; newStr(4) = '-';	set(newBoxH,'String', newStr);   set(newBoxH,'Fontweight', 'Bold');   set(newBoxH,'Fontsize', 14);   set(newBoxH,'FontAngle', 'ital');end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% setup for mouse movement or releaseset(hcur,'ButtonDownFcn',...         'zoomtggl(get(gcf,''CurrentAxes''), ''line click'');');set(h(i),'ButtonDownFcn','zoomdown');% set horizontal factorx = get(h(i),'XData');y = get(h(i),'YData');xmin = min(x(find(~isnan(x))));xmax = max(x(find(~isnan(x))));xlen = length(x);xfactor = (xmax - xmin) / (xlen - 1);      % x spacingset(get(ga,'xlabel'),'UserData',xfactor);% set axes on line pointsp = get(ga,'xlim');v1 = p(1);v2 = p(2);% calculate current indicesk1 = round((v1 - xmin) / xfactor) + 1;  if k1<=0,k1=1;end  if k1>=xlen,k1=xlen;endk2 = round((v2 - xmin) / xfactor) + 1;  if k2<=0,k2=1;end  if k2>=xlen,k2=xlen;end% current point locationsc1v = (k1-1) * xfactor + xmin;c2v = (k2-1) * xfactor + xmin;% reset xlimits%set(ga,'xlim',[c1v c2v]);% update cursor positons% check to see if click is now past axis new axis limits%   adjust if it isif t <= c1v+100*eps, t = c1v; end;if t >= c2v-100*eps, t = c2v; end;% get vertical cursor positionsv1 = crsrloc(ga,1001);v2 = crsrloc(ga,2001);% go ahead and move closest cursor to mouse clickif abs(t - v1) < abs(t - v2)    v1 = t;else    v2 = t;end;% calculate current indices% (limits on k1,k2 are kept from going out of bounds% this lets us plot lines with dissimilar x limits% added by jj, 9/97)k1 = round((v1 - xmin) / xfactor) + 1;  if k1<=0,k1=1;end  if k1>=xlen,k1=xlen;endk2 = round((v2 - xmin) / xfactor) + 1;  if k2<=0,k2=1;end  if k2>=xlen,k2=xlen;end% current point locationsc1v = (k1-1) * xfactor + xmin;c1h = y(k1);c2v = (k2-1) * xfactor + xmin;c2h = y(k2);% handles to readoutstemp = get(ga,'UserData');h = temp{1};crsrmove(ga,1001,c1v);crsrmove(ga,1002,c1h);crsrmove(ga,2001,c2v);crsrmove(ga,2002,c2h);set(h(9),'String',num2str(c1v));set(h(10),'String',num2str(c1h));set(h(11),'String',num2str(abs(c2v-c1v)));set(h(12),'String',num2str(abs(c2h-c1h)));set(h(13),'String',num2str(c2v));set(h(14),'String',num2str(c2h));