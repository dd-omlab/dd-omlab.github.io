% readtext.m:  read in a text file% This demo shows how to do a few inportant things%   1) how to handle end of file (isEOF)%   2) how to handle comment lines (emptyLine)%   3) get the contents of the line (getnextl + procline)%% This basic form can be modified and used to rewrite load_sac.m% and refix.m% Written by:  Jonathan Jacobs%              July 1997  (last mod:  07/12/97)function  readtext(nil)% only open this specific test file.setrootdatadircd ntrfid = fopen('exper.x');in_text = fread(fid);in_text = setstr(in_text)';fclose(fid);% the general idea is this: read in a line, process it.  you can then % execute different actions depending on the contents of that line.% so simple, it hardly needs to even be pointed out, right?count = 0;isEOF = 0;while( ~isEOF )   % these five lines will read in the next non-empty line.   % if we are at the end of the file we return.  (Could put   % an error message in the 'if isEOF' structure, if we wanted.   emptyLine = 1;   while( emptyLine )       [topline, in_text, emptyLine, isEOF] = getnextl(in_text);      if isEOF,return,end    %disp('EOF reached')   end   % we could use this (or similar) code to walk through the    % 'refix' file ('xxxx.z').  This example, the 'if( flag1 )...   % structure, will show each entry in the file.  You could use   % different condition(s) to find only a specific entry, if you wanted.   [words, numWords] = procline(topline);   [flag1, sacType]  = is_sactyp(words(1,:));   [flag2, waveForm] = is_wform(words(2,:));   if( flag1 )      if( flag2 )         count = count+1;         numChans = str2num(words(3,:));         disp(' ')         disp(['new WF/ST entry!  #' num2str(count)])         disp(['   Waveform: ' waveForm])         disp(['   Saccade type: ' sacType])         disp(['   # channels: ' words(3,:)])         % this for loop reads in all the channels of one WF/ST entry.         for j=1:numChans            % since we have a good entry, let's get the rest of its header            % channel name, # of refix entries            emptyLine = 1;			   while( emptyLine ) 			      [topline, in_text, emptyLine, isEOF] = getnextl(in_text);			      if isEOF,return,end     %disp('EOF reached')			   end   	      [words, numWords] = procline(topline);            chanName = deblank(lower(words(1,:)));            numRefixes = str2num(words(2,:));            disp(['     Channel ' num2str(j) ': ' chanName])            disp(['       # refixes: ' num2str(numRefixes)])            % this loop reads all the refixes associated with one channel.            for i = 1:numRefixes	            emptyLine = 1;				   while( emptyLine ) 				      [topline, in_text, emptyLine, isEOF] = getnextl(in_text);				      if isEOF,return,end     %disp('EOF reached')				   end      	      [words, numWords] = procline(topline);               startPt(i) = str2num(words(1,:));               stopPt(i)  = str2num(words(2,:));               reShift(i) = str2num(words(3,:));               disp(['        Start:' deblank(words(1,:))...                           '  Stop: ' deblank(words(2,:))...                           '  refShift: '  deblank(words(3,:))])            end         end      end   end % if flag1end