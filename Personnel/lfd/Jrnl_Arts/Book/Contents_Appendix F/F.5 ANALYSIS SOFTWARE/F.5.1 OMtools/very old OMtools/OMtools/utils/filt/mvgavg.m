% mvgavg.m: simple moving averager% Perform a 3-, 5-, 7-, 9- or 11-point moving average on a matrix.% Optionally, you can specify a windowing function: 'h' = Hamming.% Example: rhf = mvgavg(rh, 5, 'h');% Written by:  Jonathan Jacobs%              October 1995 - February 1997  (last mod: 02/28/97)function [ outp ] = mvgavg( inp, n, window )global sac_on samp_freq filename namelistif nargin < 2   help mvgavg   returnendif nargin < 3   window = '-';end[nRows, nCols] = size(inp);if nRows < nCols   inp = inp';   [nRows, nCols] = size(inp);end% 3ptmaif n == 3  if window(1) == 'h'     w = [0.08 1 0.08];   else     w = [1 1 1];  end  outp(2:nRows-1,:) = w(1)*inp(1:nRows-2,:) + w(2)*inp(2:nRows-1,:)...                    + w(3)*inp(3:nRows,:);  outp = outp / 3;  outp = outp * 2.5862;  outp(1,:) = outp(2,:);  outp(nRows,:) = outp(nRows-1,:);  returnend% 5ptmaif n == 5  if window(1) == 'h'     w = [0.08 0.54 1 0.54 0.08];   else     w = [1 1 1 1 1];  end  outp(3:nRows-2,:) = w(1)*inp(1:nRows-4,:) + w(2)*inp(2:nRows-3,:)...                    + w(3)*inp(3:nRows-2,:) + w(4)*inp(4:nRows-1,:)...                    + w(5)*inp(5:nRows,:);  outp = outp / 5;  outp = outp * 2.2321;  outp(1,:) = outp(3,:);  outp(2,:) = outp(3,:);  outp(nRows,:)   = outp(nRows-2,:);  outp(nRows-1,:) = outp(nRows-2,:);  returnend% 7ptmaif n == 7  if window(1) == 'h'     w = [0.08 0.31 0.77 1 0.77 0.31 0.08];   else     w = [1 1 1 1 1 1 1];  end  outp(4:nRows-3,:) = w(1)*inp(1:nRows-6,:) + w(2)*inp(2:nRows-5,:)...                    + w(3)*inp(3:nRows-4,:) + w(4)*inp(4:nRows-3,:)...                    + w(5)*inp(5:nRows-2,:) + w(6)*inp(6:nRows-1,:)...                    + w(7)*inp(7:nRows,:);  outp = outp / 7;  outp = outp * 2.1084;  outp(1,:) = outp(4,:);  outp(2,:) = outp(4,:);  outp(3,:) = outp(4,:);  outp(nRows,:)   = outp(nRows-3,:);  outp(nRows-1,:) = outp(nRows-3,:);  outp(nRows-2,:) = outp(nRows-3,:);  returnend% 9ptmaif n == 9  if window(1) == 'h'     w = [0.08 0.2147 0.54 0.8653 1 0.8653 0.54 0.2147 0.08];   else     w = [1 1 1 1 1 1 1 1 1];  end  outp(5:nRows-4,:) = w(1)*inp(1:nRows-8,:) + w(2)*inp(2:nRows-7,:)...                    + w(3)*inp(3:nRows-6,:) + w(4)*inp(4:nRows-5,:)...                    + w(5)*inp(5:nRows-4,:) + w(6)*inp(6:nRows-3,:)...                    + w(7)*inp(7:nRows-2,:) + w(8)*inp(8:nRows-1,:)...                    + w(9)*inp(9:nRows,:);  outp = outp / 9;  outp = outp * 2.0455;  outp(1,:) = outp(5,:);  outp(2,:) = outp(5,:);  outp(3,:) = outp(5,:);  outp(4,:) = outp(5,:);  outp(nRows,:)   = outp(nRows-4,:);  outp(nRows-1,:) = outp(nRows-4,:);  outp(nRows-2,:) = outp(nRows-4,:);  outp(nRows-3,:) = outp(nRows-4,:);  returnend% 11ptmaif n == 11  if window(1) == 'h'     w = [0.08 0.1679 0.3979 0.6821 0.9121 1 0.9121 0.6821 0.3979 0.1679 0.08];   else     w = [1 1 1 1 1 1 1 1 1 1 1];  end  outp(6:nRows-5,:) =  w(1)*inp(1:nRows-10,:) + w(2)*inp(2:nRows-9,:)...                    +  w(3)*inp(3:nRows-8,:)  + w(4)*inp(4:nRows-7,:)...                    +  w(5)*inp(5:nRows-6,:)  + w(6)*inp(6:nRows-5,:)...                    +  w(7)*inp(7:nRows-4,:)  + w(8)*inp(8:nRows-3,:)...                    +  w(9)*inp(9:nRows-2,:)  + w(8)*inp(10:nRows-1,:)...                    + w(11)*inp(11:nRows,:);  outp = outp / 11;  outp = outp * 2.0073;  outp(1,:) = outp(6,:);  outp(2,:) = outp(6,:);  outp(3,:) = outp(6,:);  outp(4,:) = outp(6,:);  outp(5,:) = outp(6,:);  outp(nRows,:)   = outp(nRows-5,:);  outp(nRows-1,:) = outp(nRows-5,:);  outp(nRows-2,:) = outp(nRows-5,:);  outp(nRows-3,:) = outp(nRows-5,:);  outp(nRows-4,:) = outp(nRows-5,:);  returnend