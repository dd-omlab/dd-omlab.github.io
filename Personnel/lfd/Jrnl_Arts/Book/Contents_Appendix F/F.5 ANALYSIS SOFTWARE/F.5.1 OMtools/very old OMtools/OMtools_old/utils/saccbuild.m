% saccbuild.m: build a set of saccades to establish a baseline for% subsequent ramp-step-ramp experiments% Written by:  Jonathan Jacobs%              June 1999  (last mod: 06/14/99)function [out,count,details] = saccbuild( numreps )if nargin == 0  numreps = 1;endsacclist    = [-10 -5 5 10];saccdur = 1.5;    % duration of each fixationmaxdur = 125;numtypes = length(sacclist);sampAO = 100;     % 100 Hz analog out sample rate (LabVIEW VI default)interfix = 2.0;   % fixation between trialsinitfix = 1.0;    % initial fixation at zerodur = zeros(1,numreps*numtypes);num = zeros(1,numreps*numtypes);params = [];for i = 1:numreps   params = [params, (1:numtypes)];endparams = shuffle2(params);initseg = zeros(initfix * sampAO,1);interseg = zeros(interfix * sampAO,1);stimlist = zeros(maxdur*sampAO,1);count = 1;temp = [initseg];tempdur = length(temp)/sampAO;for i = 1:numtypes*numreps   % choose saccade parameters from randomly shuffled list:   sacc(i)  = sacclist(params(i));   newseg = [sacc(i)*ones(saccdur*sampAO,1); interseg];   newsegdur(i) = length(newseg)/sampAO;      % concatentate saccades until we reach the maximum duration   if tempdur+newsegdur(i)<=maxdur      %disp('building...')      dur(count) = ceil(tempdur+newsegdur(i));      temp = [temp; newseg];      num(count) = num(count)+1;    else      %disp('new vector.')      dur(count) = ceil(tempdur);      stimlist(1:length(temp),count) = temp;      count = count+1;      num(count) = 1;      temp = [initseg; newseg];   end   tempdur = length(temp)/sampAO;end% don't forget the last entry!stimlist(1:length(temp),count) = temp;out = stimlist(:,1:count);% details of the stimuli to be written to file laterdetailsp = num2str( sacc');detailsn = prepad(num2str(-sacc'),10);details = [detailsp, detailsn];details = pad(details,50);[rows,cols]=size(details);dt = time('b',0,24,0);dt = pad(dt,cols);% separate each file's entries from the nexttemp = [];lastnum = max(find(num~=0)); a(1) = 0;for i = 1:lastnum   a(i+1) = sum(num(1:i));   filestr = ['saccbase' num2str(i) '.stm  '...               num2str(dur(i)) ' sec ' num2str(num(i)) ' saccades'];   filestr = pad(filestr,cols);   temp = [temp; filestr; details(a(i)+1:a(i+1),:); blanks(cols)];enddetails = [dt; temp];              % add a date and time[rows,cols]=size(details);crstring = char(13*ones(rows,1));  % and append a CRdetails = [details, crstring];     % to each line% plot the outputt = (1:maxdur*sampAO)/sampAO;for i=1:count   figure   plot(t,out(:,i))   xlabel(['Time (sec)'])   ylabel('Stimulus Amplitude (deg)')   title(['Saccadic Baseline stimulus #' num2str(i)])enddisp(' ')disp('If you are happy with this result, you can save it as an ASCII file')disp('Otherwise, run "SACCBUILD" again.')yorn=lower(input('Write this to file (y/n)? ','s'));file = 0;initialpath = pwd;if yorn=='y'   [file, path] = uiputfile('*.stm', 'Save to selected directory');endif file == 0   %disp('No file written.')   eval(['cd ' '''' initialpath ''''])   return else   eval(['cd ' '''' path ''''])	for i = 1:count	   a = out(:,i);	   eval(['save saccbase' num2str(i) '.stm a -ascii'])	end	fid = fopen('saccbasematrix.txt','w');   fwrite(fid,details','char');   fclose(fid);end