% readBox.m: called by pickdata to read the state of the check % boxes and create the arrays that are used by the analysis progs% pos, vel, acc, sacv/p_on_mat, sacv/p_off_mat, slow_peak_mat, max_v_pt_mat% written by:  Jonathan Jacobs%              October 1995 - May 1998  (last mod: 05/01/98)[comp, maxsize] = computer;if strcmp(comp(1), 'M')   BS = setstr(8);   CR = setstr(13); else   BS = '';   CR = '';endmakeAcc = 0; makeVel = 0;samp_f_mat = [];pos = []; vel = []; acc = [];sacv_on_mat  = []; sacv_off_mat = []; slow_peak_mat = [];sacp_on_mat  = []; sacp_off_mat = []; max_v_pt_mat  = [];cycle_beg_mat = []; cycle_end_mat = []; prev_fov_mat = [];count = 0;what_files = []; what_f_names = []; what_f_array = [];%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% build the saccade matricesfor outer = 1:total_files   if outer < 10            outer_numstr = ['0' num2str(outer)];    else      outer_numstr = num2str(outer);   end   % prepare the next file name (to be included if box is checked)   fileStr = namearray(outer,:);   fileStr = fileStr( find(fileStr ~= ' ') );  % strip blanks   if hBox(outer,1) ~= 0      if get(hBox(outer,1),'Value') == 1         count = count + 1;         pos(:,count) = lh( :,which_lh_col(outer) );         samp_f_mat(count) = sampFreq(outer);         if ( hasSacPts(outer,1) == 1 )            sacv_on_mat(:,count)   = sacv_on_lh(:,which_lh_col(outer));            sacp_on_mat(:,count)   = sacp_on_lh(:,which_lh_col(outer));            sacv_off_mat(:,count)  = sacv_off_lh(:,which_lh_col(outer));            sacp_off_mat(:,count)  = sacp_off_lh(:,which_lh_col(outer));            slow_peak_mat(:,count) = slow_peak_lh(:,which_lh_col(outer));            prev_fov_mat(:,count)  = prev_fov_lh(:,which_lh_col(outer));            max_v_pt_mat(:,count)  = max_v_pt_lh(:,which_lh_col(outer));            cycle_beg_mat(:,count) = cycle_beg_lh(:,which_lh_col(outer));            cycle_end_mat(:,count) = cycle_end_lh(:,which_lh_col(outer));         end         what_files   = [what_files; outer_numstr 'lh'];         what_f_names = [what_f_names fileStr '(lh) '];         what_f_array = [what_f_array; fileStr '(lh) '...                          blanks(13-length(fileStr))];         end   end %if hBox1...       if hBox(outer,2) ~= 0      if get(hBox(outer,2),'Value') == 1         count = count + 1;         pos(:,count) = rh( :,which_rh_col(outer) );         samp_f_mat(count) = sampFreq(outer);         if ( hasSacPts(outer,2) == 1 )            sacv_on_mat(:,count)   = sacv_on_rh(:,which_rh_col(outer));            sacp_on_mat(:,count)   = sacp_on_rh(:,which_rh_col(outer));            sacv_off_mat(:,count)  = sacv_off_rh(:,which_rh_col(outer));            sacp_off_mat(:,count)  = sacp_off_rh(:,which_rh_col(outer));            slow_peak_mat(:,count) = slow_peak_rh(:,which_rh_col(outer));            prev_fov_mat(:,count)  = prev_fov_rh(:,which_rh_col(outer));            max_v_pt_mat(:,count)  = max_v_pt_rh(:,which_rh_col(outer));            cycle_beg_mat(:,count) = cycle_beg_rh(:,which_rh_col(outer));            cycle_end_mat(:,count) = cycle_end_rh(:,which_rh_col(outer));         end          what_files   = [what_files; outer_numstr 'rh'];         what_f_names = [what_f_names fileStr '(rh) '];         what_f_array = [what_f_array; fileStr '(rh) '...                          blanks(13-length(fileStr))];      end      end %if hBox2...   if hBox(outer,3) ~= 0      if get(hBox(outer,3),'Value') == 1   % include lv         count = count + 1;         pos(:,count) = lv( :,which_lv_col(outer) );         samp_f_mat(count) = sampFreq(outer);         if ( hasSacPts(outer,3) == 1 )            sacv_on_mat(:,count)   = sacv_on_lv(:,which_lv_col(outer));            sacp_on_mat(:,count)   = sacp_on_lv(:,which_lv_col(outer));            sacv_off_mat(:,count)  = sacv_off_lv(:,which_lv_col(outer));            sacp_off_mat(:,count)  = sacp_off_lv(:,which_lv_col(outer));            slow_peak_mat(:,count) = slow_peak_lv(:,which_lv_col(outer));            prev_fov_mat(:,count)  = prev_fov_lv(:,which_lv_col(outer));            max_v_pt_mat(:,count)  = max_v_pt_lv(:,which_lv_col(outer));            cycle_beg_mat(:,count) = cycle_beg_lv(:,which_lv_col(outer));            cycle_end_mat(:,count) = cycle_end_lv(:,which_lv_col(outer));         end         what_files   = [what_files; outer_numstr 'lv'];         what_f_names = [what_f_names fileStr '(lv) '];         what_f_array = [what_f_array; fileStr '(lv) '...                          blanks(13-length(fileStr))];         end   end %if hBox3...       if hBox(outer,4) ~= 0      if get(hBox(outer,4),'Value') == 1   % include rv         count = count + 1;         pos(:,count) = rv( :,which_rv_col(outer) );         samp_f_mat(count) = sampFreq(outer);         if ( hasSacPts(outer,4) == 1 )            sacv_on_mat(:,count)   = sacv_on_rv(:,which_rv_col(outer));            sacp_on_mat(:,count)   = sacp_on_rv(:,which_rv_col(outer));            sacv_off_mat(:,count)  = sacv_off_rv(:,which_rv_col(outer));            sacp_off_mat(:,count)  = sacp_off_rv(:,which_rv_col(outer));            slow_peak_mat(:,count) = slow_peak_rv(:,which_rv_col(outer));            prev_fov_mat(:,count)  = prev_fov_rv(:,which_rv_col(outer));            max_v_pt_mat(:,count)  = max_v_pt_rv(:,which_rv_col(outer));            cycle_beg_mat(:,count) = cycle_beg_rv(:,which_rv_col(outer));            cycle_end_mat(:,count) = cycle_end_rv(:,which_rv_col(outer));         end         what_files   = [what_files; outer_numstr 'rv'];         what_f_names = [what_f_names fileStr '(rv) '];         what_f_array = [what_f_array; fileStr '(rv) '...                          blanks(13-length(fileStr))];         end   end %if hBox4...   if hBox(outer,5) ~= 0      if get(hBox(outer,5),'Value') == 1   % include lt         count = count + 1;         pos(:,count) = lt( :,which_lt_col(outer) );         samp_f_mat(count) = sampFreq(outer);         if ( hasSacPts(outer,5) == 1 )            sacv_on_mat(:,count)   = sacv_on_lt(:,which_lt_col(outer));            sacp_on_mat(:,count)   = sacp_on_lt(:,which_lt_col(outer));            sacv_off_mat(:,count)  = sacv_off_lt(:,which_lt_col(outer));            sacp_off_mat(:,count)  = sacp_off_lt(:,which_lt_col(outer));            slow_peak_mat(:,count) = slow_peak_lt(:,which_lt_col(outer));            prev_fov_mat(:,count)  = prev_fov_lt(:,which_lt_col(outer));            max_v_pt_mat(:,count)  = max_v_pt_lt(:,which_lt_col(outer));            cycle_beg_mat(:,count) = cycle_beg_lt(:,which_lt_col(outer));            cycle_end_mat(:,count) = cycle_end_lt(:,which_lt_col(outer));         end         what_files   = [what_files; outer_numstr 'lt'];         what_f_names = [what_f_names fileStr '(lt) '];         what_f_array = [what_f_array; fileStr '(lt) '...                          blanks(13-length(fileStr))];         end   end %if hBox5...       if hBox(outer,6) ~= 0      if get(hBox(outer,6),'Value') == 1   % include rt         count = count + 1;         pos(:,count) = rt( :,which_rt_col(outer) );         samp_f_mat(count) = sampFreq(outer);         if ( hasSacPts(outer,6) == 1 )            sacv_on_mat(:,count)   = sacv_on_rt(:,which_rt_col(outer));            sacp_on_mat(:,count)   = sacp_on_rt(:,which_rt_col(outer));            sacv_off_mat(:,count)  = sacv_off_rt(:,which_rt_col(outer));            sacp_off_mat(:,count)  = sacp_off_rt(:,which_rt_col(outer));            slow_peak_mat(:,count) = slow_peak_rt(:,which_rt_col(outer));            prev_fov_mat(:,count)  = prev_fov_rt(:,which_rt_col(outer));            max_v_pt_mat(:,count)  = max_v_pt_rt(:,which_rt_col(outer));            cycle_beg_mat(:,count) = cycle_beg_rt(:,which_rt_col(outer));            cycle_end_mat(:,count) = cycle_end_rt(:,which_rt_col(outer));         end         what_files   = [what_files; outer_numstr 'rt'];         what_f_names = [what_f_names fileStr '(rt) '];         what_f_array = [what_f_array; fileStr '(rt) '...                          blanks(13-length(fileStr))];         end     end %if hBox6...  end %forif count == 0    disp( 'No data selected!' )   returnend[r,c]=size(pos);if c==1   pos=stripnan(pos);endmakeAcc  = get(hMakeAcc, 'Value');makeVel  = get(hMakeVel, 'Value');maketime = get(hMakeTime, 'Value');close(prepfig)diff_factor = 0.44294647;  % value from "2ptdiff.ast". has to do with                           % z_transform mapping stuff.cutoff = -1;if makeVel | makeAcc   % create velocity and acceleration arrays   disp(' ')   disp('<Select your filter.> ')   disp([ '  -1) Cancel.  (No differentiation.)' ]);   disp([ '   0) Differentiate with no filtering.' ]);   disp([ '   1) ' mat2str(samp_freq(1)/2 * diff_factor) 'Hz.' ]);   disp([ '   2) ' mat2str(samp_freq(1)/4 * diff_factor) 'Hz.' ]);   disp([ '   3) ' mat2str(samp_freq(1)/8 * diff_factor) 'Hz.' ]);   disp([ '   4) ' mat2str(samp_freq(1)/16 * diff_factor) 'Hz.' ]);   disp([ '   5) ' mat2str(samp_freq(1)/32 * diff_factor) 'Hz.' ]);   cutoff = -100;   while( (cutoff<-1) | (cutoff>7) )      cutoff = input([CR BS '--> ']);      if isempty(cutoff), cutoff = -100; end   endendif cutoff == -1   disp('No differentiation performed.')endif makeVel & cutoff > -1   disp( 'Calculating velocities...' )   vel = d2pt(pos, cutoff, samp_f_mat);end if makeAcc & cutoff > -1   disp( 'Calculating accelerations...' )   if makeVel      acc = d2pt(vel, cutoff, samp_f_mat);    else      acc = d2pt( d2pt(pos,cutoff,samp_f_mat), cutoff, samp_f_mat );   endend% create time vector.  Will eventually need to expand this to handle % mixed sampling frequencies.  But not for a while yet.maxRows = max( [longestL longestR]);%t = (1/samp_freq(1): 1/samp_freq(1): maxRows/samp_freq(1));if maketime   t=maket(pos);endif ~exist('debugme') debugme = 0; endif ~debugme  %clear count outer l_cols l_rows r_cols r_rows   clear fileStr outer_numstr maxRows cutoffendreturn%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% all this has been cut out of the main loop because it really seems% to slow things down quite a bit.  Paste it back in when dealing with% more than just lh/rh data.if(0)end %if(0)