% deblink_gui.m: Interactive GUI that calls 'findblinks' and displays its% output in a dynamically updated window.%% Each time the display updates, the following variables containing % the results are written to the base workspace:%    pos_deblink -- the position, blinks removed%    vel_deblink -- the velocity, blinks removed%% 'findblinks' saves these variables into the base workspace:%    ptlist     -- the vector of 'yes'/'no' points (good data = 1, blink = 0 or NaN)%    pvlist     -- the samp # where each PV occurred in the fast phases%    blinkstart  -- start point of each blink%    blinkstop   -- end point of each blink%    pvel       -- the values of the peak velocities of the fast phases%    extend     -- the value of the 'extend' setting%    dataName   -- the string containing the name of the data being analyzed%    thresh_v   -- the threshold (vel) above which blinks is considered "ON"%    vel_stop   -- the threshold (vel) below which blinks is considered "OFF"%    acc_stop   -- the threshold (acc) below which blinks is considered "OFF"%% Requires: 'findblinks.m', 'd2pt.m', 'maket.m', 'stripnan.m' and 'zoomtool'% The sampling frequency must be stored in a global variable named 'samp_freq'% written by:  Jonathan Jacobs%              November 2006 - December 2006 (last mod: 12/05/06)function null = deblink_gui(action)global what_f_arrayCRET = char(10);   %% for OS X% look for the open windowsblink_cont = -1;wl = get(0,'Children');for i = 1:length(wl)   if strcmp(get(wl(i),'Name'),'Deblink Control'), blink_cont=wl(i);  endendif nargin == 0 && blink_cont>0   figure(blink_cont)   returnendif blink_cont<0   action= 'initialize'; else   % retrieve the control handles   contH = get(blink_cont,'UserData');	knockoutH = contH{1};		dataNameH = contH{2};	use_posH = contH{3};			use_velH = contH{4};	use_accH = contH{5};			thresh_p_onH = contH{6};	thresh_p_offH = contH{7};	thresh_v_onH = contH{8};	thresh_v_offH = contH{9};	thresh_a_onH = contH{10};	thresh_a_offH = contH{11};	extendH = contH{12};	plot_velH = contH{13};		plot_accH = contH{14};	plot_acc_KO_H = contH{15};	plot_vel_KO_H = contH{16};		plot_pos_KO_H = contH{17}; plot_PV_H = contH{18};	helpH = contH{19};			aboutH = contH{20};	doneH = contH{21};			blink_result = contH{22};   saveH = contH{23};         restoreH = contH{24};end%%%%%%%%%%%%%%%%%%%%%%  initialization  %%%%%%%%%%%%%%%%%%%%%%if strcmp(action,'initialize')   fig_ht = 265+30;   fig_wid = 280;      % read the last controls settings from the pref file.  if not present   % or if nonsensical, set controls to default settings.	% if there is no 'omprefs' folder in the MATLAB root, we will	% create one and also create a prefs file.	cur_dir = pwd;	cd(matlabroot)	gp_err=0;	eval('cd(findomprefs)','gp_err=1;')	if gp_err % must make a omprefs directory		mkdir('omprefs')		cd('omprefs')	end		% default pref values	knockout      = 2;	use_pos       = 1;	use_vel       = 1;	use_acc       = 1;	thresh_p      = '60';	pos_stop      = '50';	thresh_v      = '1000';	vel_stop      = '500';	thresh_a      = '80000';	acc_stop      = '15000';	extend        = '25';	plot_vel      = 1;	plot_acc      = 1;	plot_acc_KO   = 1;	plot_vel_KO   = 1;	plot_pos_KO   = 1;	plot_PV		  = 1;	cwind_pos     = [100 100 fig_wid fig_ht];		% if there is not a good pref file, create one w/the default values	pref_err=0;	eval('load(''deblinkPrefs.mat'')','pref_err=1;')   	if pref_err		disp('pref_err!')		save deblinkPrefs.mat knockout use_vel thresh_p thresh_v thresh_a ...		      pos_stop vel_stop acc_stop extend plot_vel plot_acc plot_vel_KO ...            plot_acc_KO plot_pos_KO plot_PV cwind_pos	end	if exist(cur_dir,'dir'), cd(cur_dir); end	blink_cont = figure('Position',[cwind_pos(1) cwind_pos(2) fig_wid fig_ht], ...		 'Name','Deblink Control','NumberTitle','off', 'Resize', 'off', ...		 'Menubar','none','Tag','deblink_control: uneditable');		uicontrol(blink_cont, 'Style','Frame','Units','Pixels',...		'BackgroundColor',[0.25 0.25 0.25],'Position',[2 2 fig_wid-4 fig_ht-4])		x_origin = 0;  y_origin = fig_ht;	xpos = 5;      ypos = y_origin - 30;		uicontrol(blink_cont, 'Style', 'text',...		'Position', [xpos ypos 120 20], 'String', 'Change blinks to:');	knockoutH = uicontrol(blink_cont, 'Style', 'popup', 'Units', 'pixels',...		 'Position',[xpos+120 ypos 150 20],...		 'String','zeros|NaNs|delete|untouched',...		 'Tooltip','Mark blinks as zeros or NaNs',...		 'HorizontalAlignment', 'center', 'Value', knockout,... 		 'Callback',['deblink_gui(''calculate'');']);	ypos=ypos-25;	uicontrol(blink_cont, 'Style', 'text',...		 'Position', [xpos ypos 120 20], 'String', 'Channel name:');	dataNameH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+125 ypos 140 20],'String', '',...		 'Tooltip',['Enter the name of the workspace' CRET ...		            'variable containing the data'],...		 'Callback',['deblink_gui(''calculate'');']);	   ypos=ypos-25;  	saveH = uicontrol(blink_cont, 'Style', 'Pushbutton',...	 'Position', [xpos+120 ypos 70 20],'UserData',0,...	 'Tooltip','', 'String', 'Save',...    'Callback', 'deblink_gui(''save'');' );  	restoreH = uicontrol(blink_cont, 'Style', 'Pushbutton',...	 'Position', [xpos+195 ypos 70 20],'UserData',0,...	 'Tooltip','', 'String', 'Restore',...    'Callback', 'deblink_gui(''restore'');' );         ypos=ypos-28;	uicontrol(blink_cont, 'Style', 'text',...		'Position', [xpos ypos 120 20], 'String', 'Select using:');	uicontrol(blink_cont, 'Style', 'text',...		'Position', [xpos+125 ypos 140 20], 'String', 'On  Thresh.  Off');	ypos=ypos-25;	use_posH = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos ypos 120 25],...		 'String','Position',...		 'Tooltip',['Detect blinks using position'],...		 'HorizontalAlignment', 'center', 'Value', use_pos,... 		 'Callback',['']);	thresh_p_onH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+125 ypos 65 20],'String', thresh_p,...		 'Tag','pos_start', ...		 'Tooltip',['Pos value above which the' CRET ...		            'blink is considered' CRET ...		            'to have turned "ON"'],...		 'Callback',['deblink_gui(''calculate'');']);		thresh_p_offH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+200 ypos 65 20],'String', pos_stop,...		 'Tag','pos_stop', ...		 'Tooltip',['Pos value below which the' CRET ...		            'blink is considered' CRET ...		            'to have turned "OFF"'],...		 'Callback',['deblink_gui(''calculate'');']);	ypos=ypos-25;	use_velH = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos ypos 120 25],...		 'String','Velocity',...       'Visible','on',...		 'Tooltip',['Detect blinks using velocity'],...		 'HorizontalAlignment', 'center', 'Value', use_vel,... 		 'Callback',['']);	thresh_v_onH = uicontrol(blink_cont, 'Style', 'edit', 'Units', 'pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+125 ypos 65 20],'String',thresh_v,...		 'Tooltip',['Vel value above which the' CRET ...		            'blink is considered' CRET ...		            'to have turned "ON".'  CRET ...		            '(Always used, even when' CRET ...		            '"Detect" is accel only.)'],...		 'HorizontalAlignment', 'center',... 		 'Callback',['deblink_gui(''calculate'');']);		thresh_v_offH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+200 ypos 65 20],'String', vel_stop,...		 'Tag','acc_stop', ...		 'Tooltip',['Vel value below which the' CRET ...		            'blink is considered' CRET ...		            'to have turned "OFF"'],...		 'Callback',['deblink_gui(''calculate'');']);	ypos=ypos-25;	use_accH = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos ypos 120 25],...		 'String','Acceleration',...       'Visible','on',...		 'Tooltip',['Detect blinks using acceleration'],...		 'HorizontalAlignment', 'center', 'Value', use_acc,... 		 'Callback',['']);	thresh_a_onH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+125 ypos 65 20],'String', thresh_a,...		 'Tag','thresh_text', ...		 'Tooltip',['Acc value above which the' CRET ...		            'blink is considered' CRET ...		            'to have turned "ON"'],...		 'Callback',['deblink_gui(''calculate'');']);	thresh_a_offH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+200 ypos 65 20],'String', acc_stop,...		 'Tag','acc_stop', ...		 'Tooltip',['Acc value below which the' CRET ...		            'blink is considered' CRET ...		            'to have turned "OFF"'],...		 'Callback',['deblink_gui(''calculate'');']);		ypos=ypos-30;	uicontrol(blink_cont, 'Style', 'text',...		'Position', [xpos ypos 150 20], 'String', 'Extend delanking by');	extendH = uicontrol(blink_cont, 'Style','edit','Units','pixels',...		 'BackgroundColor','magenta','ForeGroundColor','white',...		 'Position',[xpos+155 ypos 40 20],'String', extend,...		 'Tooltip',['Extend the deletion before' CRET ...		            'and after the blink by' CRET ...		            'this many samples'],...		 'Callback',['deblink_gui(''calculate'');']);	uicontrol(blink_cont, 'Style', 'text',...		'Position', [xpos+200 ypos 60 20], 'String', 'samples');	ypos=ypos-25;	uicontrol(blink_cont, 'Style', 'text',...		'Position', [xpos ypos 42 20], 'String', 'Plot:');	plot_velH = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos+45 ypos 55 20],...		 'String','Vel',...       'Visible','on',...		 'Tooltip',['Display vel in deblink monitor'],...		 'HorizontalAlignment', 'center', 'Value', plot_vel,... 		 'Callback',['']);	plot_vel_KO_H = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos+105 ypos 75 20],...		 'String','Vel pts.',...       'Visible','on',...		 'Tooltip',['Display vel knockouts in deblink monitor'],...		 'HorizontalAlignment', 'center', 'Value', plot_vel_KO,... 		 'Callback',['']);	plot_PV_H = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos+185 ypos 85 20],...		 'String','Peak Vel',...       'Visible','on',...		 'Tooltip',['Display peak vel in deblink monitor'],...		 'HorizontalAlignment', 'center', 'Value', plot_PV,... 		 'Callback',['']);	ypos=ypos-25;	plot_accH = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos+45 ypos 55 20],...		 'String','Acc',...       'Visible','on',...		 'Tooltip',['Display acc in deblink monitor'],...		 'HorizontalAlignment', 'center', 'Value', plot_acc,... 		 'Callback',['']);		plot_acc_KO_H = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos+105 ypos 75 20],...		 'String','Acc pts.',...       'Visible','on',...		 'Tooltip',['Display acc knockouts in deblink monitor'],...		 'HorizontalAlignment', 'center', 'Value', plot_acc_KO,... 		 'Callback',['']);	plot_pos_KO_H = uicontrol(blink_cont, 'Style', 'checkbox', 'Units', 'pixels',...		 'Position',[xpos+185 ypos 85 20],...		 'String','Pos pts.',...       'Visible','on',...		 'Tooltip',['Display pos knockouts in deblink monitor'],...		 'HorizontalAlignment', 'center', 'Value', plot_pos_KO,... 		 'Callback',['']);	ypos=ypos-25;	helpH = uicontrol(blink_cont, 'Style', 'Pushbutton',...		 'Position', [xpos ypos 55 20],'UserData',0,...		 'Tooltip','Help me, Spock!',...		 'String', 'Help',...		 'Callback', 'help deblink_gui' );	   aboutStr = {' ';   				'deblink -- Version 1.0,  May 2004';               ' ';               'Written by Jonathan Jacobs, Ph.D. (jxj24@cwru.edu)';               ' ';               'Ocular Motor Neurophysiology Lab (www.OMLAB.org)';               'VA Medical Center, Cleveland, OH';               ' ';               'Dept. of Neurology, School of Medicine';               'Case Western Reserve University';               ' ';               'All rights reserved.  All wrongs reversed.';               '(copyleft) 2002 - 2006';               ' '};	aboutH = uicontrol(blink_cont, 'Style', 'Pushbutton',...		 'Position', [xpos+60 ypos 55 20],'UserData',0,...		 'Tooltip','Whodunnit?',...		 'String', 'About...', 'UserData', aboutStr, ...		 'Callback', ['msgbox(get(gco,''UserData''),''About "deblink"'')'] );	defaultH = uicontrol(blink_cont, 'Style', 'Pushbutton',...		 'Position', [xpos+120 ypos 60 20],'UserData',0,...		 'Tooltip','Restore default parameters',...		 'String', 'Defaults', 'UserData', aboutStr, ...		 'Callback', ['deblink_gui(''defaults'');'] );	doneH = uicontrol(blink_cont, 'Style', 'Pushbutton',...		 'Position', [xpos+210 ypos 60 20],'UserData',0,...		 'Tooltip','Done',...		 'String', 'Done',...		 'Callback', ['deblink_gui(''done'');'] );	%%%%%%%% results window %%%%%%%	blink_result = figure('Position',[340   171   704   524], ...		 'Name',['Deblinking Monitor'],'NumberTitle','off', ...		 'Tag','deblink_monitor');    %%'Menubar','none',		figure(blink_result)	line([0 10 100 1000 10000 1000000],[0 0 0 0 0 0])	set(doneH,'UserData', gca)	box	zoomtool   % store all the handles in the userdata of the figure window   % so we can access them when we calculate (or perform other    % non-init actions).	contH = {knockoutH		dataNameH		use_posH			use_velH     	...				use_accH			thresh_p_onH	thresh_p_offH	thresh_v_onH 	...				thresh_v_offH	thresh_a_onH	thresh_a_offH	extendH			...				plot_velH		plot_accH		plot_acc_KO_H	plot_vel_KO_H		...				plot_pos_KO_H	plot_PV_H		helpH				aboutH			...				doneH				blink_result	saveH          restoreH};               set(blink_cont,'Userdata', contH)	figure(blink_cont) %%%%%%%%%%%%%%%%%%%%%%  calculation  %%%%%%%%%%%%%%%%%%%%%% elseif strcmp(action,'calculate')   thresh_p     = str2num(get(thresh_p_onH,'string'));   thresh_v     = str2num(get(thresh_v_onH,'string'));   thresh_a     = str2num(get(thresh_a_onH,'string'));   pos_stop     = str2num(get(thresh_p_offH,'string'));   vel_stop     = str2num(get(thresh_v_offH,'string'));   acc_stop     = str2num(get(thresh_a_offH,'string'));   extend       = str2num(get(extendH,'string'));   use_vel      = get(use_velH,'value');   use_acc      = get(use_accH,'value');   ko_val       = get(knockoutH,'value');   dataName     = get(dataNameH,'String');   plot_vel     = get(plot_velH,'value');   plot_acc     = get(plot_accH,'value');   plot_acc_KO  = get(plot_acc_KO_H,'value');   plot_vel_KO  = get(plot_vel_KO_H,'value');   plot_pos_KO  = get(plot_pos_KO_H,'value');   plot_PV      = get(plot_PV_H,'value');   diff_level = 5; % for calculating v,a copies used to detect blinks      if isempty(dataName), return; end   switch ko_val      case 1, knockout = 'zeros';      case 2, knockout = 'NaNs';      case 3, knockout = 'delete';      case 4, knockout = 'untouched';      otherwise disp('knockout is unknown')   end      % turn 'dataName' into actual data by evaluating in base workspace   % we create a temporary global variable that can be accessed in both   % base and function workspaces.   	global tempresult	evalin('base','global tempresult')   	tempresult = 0;	% Make sure that the data we want to use really exists	evalin('base',['tempresult = exist(' '''' dataName '''' ',''var'');'],...					  ['disp(''error'')'])	% copy 'tempresult' into 'in' which will be passed to 'findblinks'	eval_err = 0;	evalin('base',['tempresult = ' dataName ';'],['eval_err = 1;'])   if eval_err      disp(['There is no variable named ' dataName ' in the workspace.']);      set(dataNameH,'String','')      return;   end	pos = tempresult;		t=maket(pos);	clear global tempresult     % call 'findblinks' and update the results window   % NOTE: 'in' will be converted to vel or acc in 'findblinks'   [ptlist, pvlist] = findblinks( pos, thresh_p, pos_stop, thresh_v, vel_stop, ...									       thresh_a, acc_stop, extend  );    	% ptlist comes out of 'findblinks' with bad pts as '0', but we might want 'NaNs'   if strcmp(knockout(1),'z')      ;    elseif strcmp(knockout(1),'u')     ptlist = ones(length(ptlist),1);    else     % done for 'NaN' and 'delete' popup choices     tempnan = NaN*ones(length(ptlist),1);     nan_pts = find(ptlist == 0);     ptlist(nan_pts) = tempnan(nan_pts);	end	   % for fun, let's have a complement to the list of good points (ptlist)   badpts = NaN*zeros(size(ptlist));   temp   = find(isnan(ptlist));   badpts(temp) = 1; 	% convert input array from position to either vel or accel.	vel = d2pt(pos,diff_level);	acc = d2pt(vel,diff_level);	pos_d = pos .* ptlist;	vel_d = vel .* ptlist;	acc_d = acc .* ptlist; 	posbad_d = pos .* badpts;	velbad_d = vel .* badpts;	accbad_d = acc .* badpts;	% prep 'vel', 'pos' arrays for display with the accel array (if necessary)   ascale = mean(abs(stripnan(pos)))/(mean(abs(stripnan(acc)))*1);   %ascale = fix(ascale);   vscale = mean(abs(stripnan(pos)))/mean(abs(stripnan(vel)));   %vscale = fix(vscale);   pscale = 1;   %pscale = mean(abs(stripnan(acc)))/mean(abs(stripnan(pos)))*3;	% if knockout mode is 'delete' use stripnan on ptlist   if strcmp(knockout(1),'d')      pos_d    = stripnan(pos_d);      vel_d    = stripnan(vel_d);      acc_d    = stripnan(acc_d);      t        = stripnan(t .* ptlist);      ptlist   = stripnan(ptlist);      posbad_d = stripnan(posbad_d);      velbad_d = stripnan(velbad_d);   end	   % display   figure(blink_result)   set(blink_result,'Name','Deblinking Monitor','NumberTitle','Off')   zoomclr( get(blink_result,'CurrentAxes'), 0 )   % would like to keep axis limits same   % read them and then set them   currAxes=get(blink_result,'CurrentAxes');   xlims = get(currAxes,'Xlim');   clf   hold on   pos_lineH = plot(t,pscale*pos_d,'g');   if ~strcmp(knockout(1),'u')      posbad_lineH = plot(t,pscale*posbad_d,'color',[0.5 0.5 0], ...                          'vis',boolstr(plot_pos_KO)); %dark yellow   end   pv_tstr = '';   if ~isempty(pvlist)      pvpt_line = plot(t(pvlist),vscale*vel(pvlist),'mo','vis',boolstr(plot_PV));       %if plot_PV, pv_tstr = [CRET 'm: peak vel']; end   end      vel_ystr = ''; vs_str = '';   vel_lineH = plot(t,vscale*vel_d,'y', 'vis', boolstr(plot_vel));   if ~strcmp(knockout(1),'u')      velbad_lineH = plot(t,vscale*velbad_d,'color',[0 0.4 0], ...                          'vis',boolstr(plot_vel_KO));   %dark green      if plot_vel         vel_ystr = 'g: scaled vel (\circ/s), ';         vs_str = ['vel scale: ' num2str(vscale,3) ',    '];      end   end      acc_ystr = ''; as_str = '';   acc_lineH = plot(t,ascale*acc_d, 'r', 'vis', boolstr(plot_acc));   if ~strcmp(knockout(1),'u')      accbad_lineH = plot(t,ascale*accbad_d,'color',[1 0.5 0], ...                          'vis',boolstr(plot_acc_KO)); %orange      if plot_acc         acc_ystr = 'r: scaled acc (\circ/s^2), ';          as_str = ['acc scale: ' num2str(ascale,3) ' '];      end   end      velthresh_lineH = plot([t' NaN t'],...                    [ptlist'*thresh_v*vscale NaN -ptlist'*thresh_v*vscale], ...                    'c', 'vis', boolstr(plot_vel));   vel_t_str = '';   if use_vel, vel_t_str = ['vel thresh = ' num2str(thresh_v) ',    ']; end   accthresh_lineH = plot([t' NaN t'],...                    [ptlist'*thresh_a*ascale NaN -ptlist'*thresh_a*ascale], ...                    'b', 'vis', boolstr(plot_acc));   acc_t_str = '';   if use_acc, acc_t_str = ['acc thresh = ' num2str(thresh_a) '    ']; end      xlabel('Time (sec)')   ylabel([ acc_ystr vel_ystr 'y: pos (\circ)'])   box   set(gca,'Xlim',xlims);   set(doneH,'UserData',gca)   namestr='';	if ~isempty(what_f_array)	   namestr = nameclean([what_f_array ' - ' dataName CRET]);	end      title([namestr vs_str as_str CRET vel_t_str acc_t_str pv_tstr ])   zoomtool       % the following variables were assigned to the base workspace in 'findblinks':   %   blinkstart,  blinkstop   %   ptlist,      pvlist,      pv,         extend.   % Use them in good health.   assignin('base','pos_deblink', pos_d);     assignin('base','vel_deblink', vel_d);   elseif strcmp(action,'save')   dataName = get(dataNameH,'String');   assignin('base',dataName, pos_d);   elseif strcmp(action,'restore')   dataName = get(dataNameH,'String');       %%%%%%%%%%%%%%%%%%%%%%  reset to default parameters %%%%%%%%%%%%%%%%%%%%%% elseif strcmp(action,'defaults')	set(thresh_p_onH, 'string','40')	set(thresh_p_offH,'string','40')	set(thresh_v_onH, 'string','200')	set(thresh_v_offH,'string','80')	set(thresh_a_onH, 'string','15000')	set(thresh_a_offH,'string','5000')	 %%%%%%%%%%%%%%%%%%%%%%  clean up  %%%%%%%%%%%%%%%%%%%%%% elseif strcmp(action,'done')   cwind = get(gco,'Parent');      % read the controls values and save to an pref file   knockout     = get(knockoutH, 'Value');   use_pos      = get(use_posH, 'Value');   use_vel      = get(use_velH, 'Value');   use_acc      = get(use_accH, 'Value');   thresh_p     = get(thresh_p_onH, 'String');   thresh_v     = get(thresh_v_onH, 'String');   thresh_a     = get(thresh_a_onH, 'String');   pos_stop     = get(thresh_p_offH, 'String');   vel_stop     = get(thresh_v_offH, 'String');   acc_stop     = get(thresh_a_offH, 'String');   extend       = get(extendH, 'String');	plot_vel		 = get(plot_velH, 'Value');	plot_acc		 = get(plot_accH, 'Value');	plot_acc_KO  = get(plot_acc_KO_H, 'Value');	plot_vel_KO  = get(plot_vel_KO_H, 'Value');	plot_pos_KO  = get(plot_pos_KO_H, 'Value');	plot_PV  	 = get(plot_PV_H, 'Value');	cwind_pos    = get(cwind, 'Position');     temp=findwind('Deblinking Monitor');   if temp > 0      figure(temp)      set(temp,'Name', 'Deblink result')      set(temp,'Tag', '')      zoomclr   end   close(cwind)   cur_dir=pwd;   %cd(matlabroot)   cd(findomprefs)	save deblinkPrefs.mat knockout use_vel thresh_p thresh_v thresh_a ...            pos_stop vel_stop acc_stop extend plot_vel plot_acc plot_vel_KO ...            plot_acc_KO plot_pos_KO plot_PV cwind_pos   eval('cd(cur_dir)','')   else   disp(['deblink: unknown action -- ' action])   end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% boolstr.m: Convert a numerical zero or one%  into an 'off' or 'on' string%% Usage:  out=boolstr(in)% Written by:  Jonathan Jacobs%              November 2006 (last mod:  11/29/06)function out = boolstr(in)if in == 0   out = 'off'; else   out = 'on';end   