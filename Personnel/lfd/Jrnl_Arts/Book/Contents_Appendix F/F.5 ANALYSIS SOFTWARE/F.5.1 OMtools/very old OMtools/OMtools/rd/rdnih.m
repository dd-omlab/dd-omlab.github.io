% rdnih.m: Read in the NIH REXX-format data and % 1. extract the appropriate columns (rh/v, lh/v, st/v)% 2. decimate the data (assuming 1000 (coil) or 400 (ober) Hz sample rate)% 3. save the greatly-reduced data to a text or binary file%% Usage: rdnih( dir )  where dir = 'h' loads horizontal data%                      where dir = 'v' loads vertical data%                      where dir = 'b' loads both           (default)% Written by:  Jonathan Jacobs%              September 1999 - March 2002  (last mod: 03/18/02)function null=rdnih(whichDir)if nargin == 0   whichDir = 'b';endwhichDir = lower(whichDir);[fn, pn]=uigetfile('', 'Select a file to load');if fn   [shortname exten] = strtok(fn,'.');   if isdigit(shortname(1))      shortname = ['X' shortname];   end   eval(['cd ' '''' pn ''''])   eval(['load ' fn]) else   disp('Cancelling')   returnendeval(['nihdata = ' shortname ';'])eval(['clear ' shortname])[datalen, numcols] = size(nihdata);if numcols == 14   % coil data   disp('14-column coil data detected')   st_col = 7; rh_col = 3; lh_col = 10;   sv_col = 8; rv_col = 4; lv_col = 11;   has_stim = 1;   assumed_sampfreq = 1000; elseif numcols == 9   % coil data   disp('9-column ober data detected')   st_col = 0; rh_col = 2; lh_col = 6;    sv_col = 0; rv_col = 3; lv_col = 7;   has_stim = 0;   assumed_sampfreq = 300; elseif numcols == 7   % coil data   disp('7-column ober data detected')   st_col = 0; rh_col = 4; lh_col = 2;    sv_col = 0; lv_col = 3; rv_col = 5;   has_stim = 0;   assumed_sampfreq = 300; elseif numcols == 6   % ober data   disp('6-column ober data detected')   st_col = 0; rh_col = 4; lh_col = 3;   sv_col = 0; rv_col = 6; lv_col = 5;   has_stim = 0;   assumed_sampfreq = 400; elseif numcols == 5   % older(?) ober data   disp('5-column ober data detected')   st_col = 0; rh_col = 2; lh_col = 4;   sv_col = 0; rv_col = 3; lv_col = 5;   has_stim = 0;   assumed_sampfreq = 300; elseif numcols == 3   % vertical ober data   disp('3-column ober data detected')   st_col = 0; rh_col = 0; lh_col = 0;   sv_col = 0; rv_col = 3; lv_col = 2;   has_stim = 0;   assumed_sampfreq = 600; else   disp([num2str(numcols) ' columns found -- unknown data format'])   return  enddisp(['Assumed sampling frequency: ' num2str(assumed_sampfreq)])tempnewfreq = input(['Resample at what frequency? ']);decstep = fix(assumed_sampfreq/tempnewfreq);newfreq = assumed_sampfreq/decstep;if newfreq ~= tempnewfreq   disp(['Resampling at ' num2str(newfreq) ' (the closest integer decimation)'])endif whichDir == 'h' | whichDir == 'b'   if st_col		tempst = nihdata(:,st_col);		st = tempst(1:decstep:datalen);		assignin('base','st',st);		disp(['  Decimated ''st'' created.'])		clear tempst	 else	    disp('  no st data')	    end	temprh = nihdata(:,rh_col);	rh = temprh(1:decstep:datalen);	assignin('base','rh',rh);	disp(['  Decimated ''rh'' created.'])	clear temprh	templh = nihdata(:,lh_col);	lh = templh(1:decstep:datalen);	assignin('base','lh',lh);	disp(['  Decimated ''lh'' created.'])	clear templhendif whichDir == 'v' | whichDir == 'b'   if sv_col		tempsv = nihdata(:,sv_col);		sv = tempsv(1:decstep:datalen);		assignin('base','sv',sv);		disp(['  Decimated ''sv'' created.'])		clear tempsv	 else	    disp('  no sv data')	    end    	temprv = nihdata(:,rv_col);	rv = temprv(1:decstep:datalen);	assignin('base','rv',rv);	disp(['  Decimated ''rv'' created.'])	clear temprv	templv = nihdata(:,lv_col);	lv = templv(1:decstep:datalen);	assignin('base','lv',lv);	disp(['  Decimated ''lv'' created.'])	clear templvenddisp(' ')yn = lower(input('Do you want to save the decimated data? ','s'));if yn(1) == 'y'   saveformat = lower(input('Save as (A)scii or (B)inary? ','s'));   if saveformat == 'a'      exten = '.txt';      ftype = 'TEXT';      creator = 'R*ch';    else      exten = '.bin';      ftype = '    ';      creator = '    ';   end      % name the file for the data   savename = [shortname '_' num2str(assumed_sampfreq/decstep) exten];   savename(1) = whichDir;   [fn, pn]=uiputfile(savename, 'Save the file as:');   eval(['cd ' '''' pn ''''])   % arrange the data   if has_stim == 1	   if whichDir == 'h'	      savedata = [st rh lh];	     elseif whichDir == 'v'	      savedata = [sv rv lv];	     elseif whichDir == 'b'	      savedata = [st rh lh sv  rv lv];	   end	 elseif has_stim == 0	   if whichDir == 'h'	      savedata = [rh lh];	     elseif whichDir == 'v'	      savedata = [rv lv];	     elseif whichDir == 'b'	      savedata = [rh lh rv lv];	   end	end   % write the data   if saveformat == 'a'      eval(['save ' fn ' savedata -ASCII'])    else   	   fid = fopen(fn, 'w', 'l');	   fwrite(fid, savedata, 'float');	   fclose(fid);   endend% set the file type (Mac only)comp=computer;if strcmp(comp,'MAC2') & exist('filetype.m') == 2 & exist('filetype.mex') == 3   [oldtype,oldcreator]=filetype(fn, ftype, creator);end