% rd_labv.m:  Read in 'labview' format files.  Multiple files can% be read in and their data will be stored in their own columns.      % written by:  Jonathan Jacobs (some parts based on code by Vallabh Das %                                                         & Jeff Somers)%              March 1998 - January 2004  (last mod: 01/26/04)% 01/30/03: added line "clear newdata" to restore ability to load%           multiple datasets% 01/26/04: moved the reading and applying of bias file to 'applybias'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% open the file and read the header information[comp, maxsize] = computer;%% Here's an interesting tidbit: LabVIEW writes data in %% 'big-endian' format for BOTH Mac and DOS systems.fid = fopen(fullpathname, 'r', 'b');   % big-endianl_files = l_files + 1;total_files = r_files + a_files + b_files...                   + o_files + x_files + l_files;% in old format, 1st 20 chars are filename that contains coil cal vals% but in our format the 1st 40 chars contain the LV scale valsf1 = fread(fid,20,'uchar');f1str = setstr(f1');range = 100; % default valuetemp=strtok(f1str,':\');  %% f1str contains the file name, thereforeif length(temp)==1        %% the file is from the coil system   %disp('their header')   theirlvhdr else   %disp('our header')   ourlvhdrendclear newdata% data arrays% we will jump to the END of the file and rewind back% to the beginning of the data since we know how many points% to expect.  (the '*2' is because 'short' is 16 bits or 2 bytes)chan_count = length(findstr(chnlstr,','))+1;fseek(fid, -chan_count*points*2, 'eof');[in_arr,numbytes] = fread(fid,[chan_count,inf],'short');in_arr = in_arr';fclose(fid);%numbytes% Make the arrays of possible channel names. chanName(ii,:)chanName=[];i=1;chnlstr2 = upper(chnlstr);while ~all(isspace(chnlstr))   [temp,chnlstr]=strtok(chnlstr,',');   temp=deblank(temp);   chanName(i,1:length(temp))=temp;   i=i+1;end%char(chanName)% multiply by calibration factorif vers == 1.1   % do our simple en masse scaling   % the '300' applies IF the LabVIEW Channel Wizard   % is set up with  scaling: x30    scarr = in_arr * (300/65536);     %convert to degs   newdata = scarr; elseif vers >= 1.2   for jj = 1:chan_count      newdata(:,jj) = in_arr(:,jj) * (scaleval(jj)*10)/65536;   end else   % version 1.0, (i.e. taken w/ the coil system)   % do individual calibrations   scarr = in_arr * (range/65536);     %'range' comes from 'theirlvhdr.m'    												% convert to degs      % modify the calibration array   % we are removing entries for channels that were not used   %if isempty(findstr(chnlstr2,'1_H')),calib(1)=NaN;end   %if isempty(findstr(chnlstr2,'2_H')),calib(2)=NaN;end   %if isempty(findstr(chnlstr2,'3_H')),calib(3)=NaN;end   %if isempty(findstr(chnlstr2,'1_V')),calib(4)=NaN;end   %if isempty(findstr(chnlstr2,'2_V')),calib(5)=NaN;end   %if isempty(findstr(chnlstr2,'3_V')),calib(6)=NaN;end   %if isempty(findstr(chnlstr2,'1_T')),calib(7)=NaN;end   %if isempty(findstr(chnlstr2,'2_T')),calib(8)=NaN;end   %calib=calib(find(~isnan(calib)));      % apply the calibration   for k = 1:chan_count      newdata(:,k) = scarr(:,k) .* calib(k);   end    end% creating a time arrayt = 0:1/tempSampFreq:(points-1)/tempSampFreq;t = t';[dat_len, dat_cols] = size( newdata );%disp( ['  Channels found:     ' num2str(dat_cols)] );disp( ['  VPixx stim:         ' vpixx_stim] );disp( ['  vergence stim:      ' verge_stim] );disp( ['  Comments:           ' comments] );disp( ['  Samples found:      ' num2str(dat_len)] );disp( ['  Sampling frequency: ' num2str(tempSampFreq)] );disp( ['  Duration of record: ' num2str(dat_len/tempSampFreq) ' seconds'] );%%% now that we have the data loaded, we will read and apply the adjust bias%%% file, if it exists.  If it doesn't we will prompt the user to enter %%% all the information by hand.getbiasapplybias