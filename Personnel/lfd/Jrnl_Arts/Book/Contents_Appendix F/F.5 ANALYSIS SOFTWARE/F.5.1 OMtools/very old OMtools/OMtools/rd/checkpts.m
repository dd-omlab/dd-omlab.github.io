% checkpts.m  make sure that the onsets and offsets of either saccade% or cycle make sense.  Plots the eye's data (pos or vel)and then% overplots the start/stop points.% written by: Jonathan Jacobs%             November 1996 - November 2000 (last mod: 11/21/00)if ~exist('pos')   disp( ['checkpts: You must run "PICKDATA" before you '...          'can use this routine.'] )   pickdata   returnendif isempty(sacv_on_mat);   disp( 'No saccade points list found.  No reason to do a sanity check.' )   returnend[sanRows, sanCols] = size(pos);doEndPtsOnly = 0;v_or_p = '¥';while (v_or_p ~= 'p') & (v_or_p ~= 'v') & (v_or_p ~= 'b')   v_or_p = input('Show position, velocity or both (p/v/b)? ', 's');   v_or_p = lower(v_or_p);endt_or_s = '¥';while (t_or_s ~= 't') & (t_or_s ~= 's')   t_or_s = input('Plot vs time or sample number (t/s)? ', 's');   t_or_s = lower(t_or_s);endif v_or_p == 'v' | v_or_p == 'b'	vscale = input('Divide velocity by (Default = 20): ');	if isempty(vscale)	   vscale = 20;	end    vel2 = vel/vscale;    	vshift = input('Shift velocity by (Default = -10): ');	if isempty(vshift)	   vshift = -10;	end	vel2 = vel2+vshift;  else    vel2 = vel;endfor i = 1:sanCols   [num_d_pts, dummy] = size(find(pos(:,i) < 100000));   [num_s_pts, dummy] = size(find(cycle_beg_mat(:,i) < 100000));   % add pts at beginning and end so we can work correctly with ZOOMTOOL   sacp_on    = [ 1; sacp_on_mat(1:num_s_pts,i); num_d_pts ];   sacp_off   = [ 1; sacp_off_mat(1:num_s_pts,i); num_d_pts ];   slow_peak  = [ 1; slow_peak_mat(1:num_s_pts,i); num_d_pts ];   prev_fov   = [ 1; prev_fov_mat(1:num_s_pts,i); num_d_pts ];   sacv_on    = [ 1; sacv_on_mat(1:num_s_pts,i); num_d_pts ];   sacv_off   = [ 1; sacv_off_mat(1:num_s_pts,i); num_d_pts ];   max_v_pt   = [ 1; max_v_pt_mat(1:num_s_pts,i); num_d_pts ];   cycle_beg  = [ 1; cycle_beg_mat(1:num_s_pts,i); num_d_pts ];   cycle_end  = [ 1; cycle_end_mat(1:num_s_pts,i); num_d_pts ];   if any(cycle_beg<0), rsrflag = 1; else rsrflag = 0; end   if any(cycle_end<0), rsrflag = 1; else rsrflag = 0; end   cycle_beg = abs(cycle_beg);  % for RSR entries which are NOT actually   cycle_end = abs(cycle_end);  % indices into the arrays.   if (t_or_s == 't')      x_vect = (1/samp_freq(i): 1/samp_freq(i): num_d_pts/samp_freq(i));      xlabl = 'time (seconds)';    else      x_vect = (1:num_d_pts);      xlabl = 'sample number';   end      if (v_or_p == 'v')      w_name = ['sanity: velocity  ' what_f_array(i,:) ];      yStr = [ 'eye velocity (deg/sec)' ];      vscale = 1;   elseif (v_or_p == 'p')      w_name = ['sanity: position  ' what_f_array(i,:) ];      yStr = [ 'eye position (deg)' ];   elseif (v_or_p == 'b')      w_name = ['sanity: position & velocity  ' what_f_array(i,:) ];      yStr = [ 'pos (deg), vel (*' num2str(vscale) ' deg/sec)' ];   end   % if we are looking at velocity, we plot sacv start/stop points over vel   % otherwise we plot sacp start/stop points over pos.   figure('Name', w_name,'NumberTitle','off');   if (v_or_p == 'p') | (v_or_p == 'b')      plot(x_vect(1:num_d_pts), pos(1:num_d_pts,i), 'y');      hold on      if(~doEndPtsOnly)         if ~isempty(stripnan(sacp_on))            plot(x_vect(stripnan(sacp_on)),   pos(stripnan(sacp_on),i),   'co', 'MarkerSize', 4)         end         if ~isempty(stripnan(sacp_off))            plot(x_vect(stripnan(sacp_off)),  pos(stripnan(sacp_off),i),  'go', 'MarkerSize', 4)         end         if ~isempty(stripnan(slow_peak))            plot(x_vect(stripnan(slow_peak)), pos(stripnan(slow_peak),i), 'wo', 'MarkerSize', 4)         end         if ~isempty(stripnan(slow_peak))            plot(x_vect(stripnan(prev_fov)),  pos(stripnan(prev_fov),i),  'wo', 'MarkerSize', 4)         end      end      if ~isnull(stripnan(cycle_beg(2:end-1))) & ~rsrflag         plot(x_vect(stripnan(cycle_beg)), pos(stripnan(cycle_beg),i), 'bo', 'MarkerSize', 4)      end      if ~isnull(stripnan(cycle_end(2:end-1))) & ~rsrflag         plot(x_vect(stripnan(cycle_end)), pos(stripnan(cycle_end),i), 'mo', 'MarkerSize', 4)      end   end   if (v_or_p == 'v') | (v_or_p == 'b')      vH = plot(x_vect(1:num_d_pts), vel2(1:num_d_pts,i));      set(vH, 'Color', [1 .5 0]);  % orange is pretty...      hold on      if ~isempty(stripnan(sacv_on))         plot(x_vect(stripnan(sacv_on)),  vel2(stripnan(sacv_on),i),  'co', 'MarkerSize', 4)      end      if ~isempty(stripnan(sacv_off))         plot(x_vect(stripnan(sacv_off)), vel2(stripnan(sacv_off),i), 'go', 'MarkerSize', 4)      end      if ~isempty(stripnan(max_v_pt))         plot(x_vect(stripnan(max_v_pt)), vel2(stripnan(max_v_pt),i), 'ro', 'MarkerSize', 4)      end   end        hold off     title( what_f_array(i,:) )   ylabel( yStr )   xlabel( xlabl )   zoomtoolend %for i%%  Do some quick numerical checkstemp_p = 1000*(sacp_off-sacp_on)/samp_freq(1);       % in msectemp_v = 1000*(sacv_off-sacv_on)/samp_freq(1);       % in msectemp_c = 1000*(cycle_end-cycle_beg)/samp_freq(1);    % in msectemp_s = (max_v_pt-sacv_on)./(sacv_off-sacv_on);    % unitlesstemp_t = 1000*(slow_peak-sacp_off)/samp_freq(1);     % in mseccyc_dur  = temp_c(1:end);ttsp     = temp_t(1:end);p_dur    = temp_p(1:end);v_dur    = temp_v(1:end);skewness = temp_s(1:end);bad_c = find( cyc_dur<100  | cyc_dur>600  &  cyc_dur~=0 );bad_t = find(   ttsp<0     |  ttsp>300   ); bad_p = find(  p_dur<0     | p_dur>150   ); bad_v = find(  v_dur<0     | v_dur>150   ); bad_s = find( skewness<0.2 | skewness>0.7); if ~isempty(bad_c) & ~rsrflag   disp(['cyc_dur: Suspicious entries: '])   disp( num2str([bad_c-1 cycle_end(bad_c) cycle_beg(bad_c) cyc_dur(bad_c)]) );   disp(' ')endif ~isempty(bad_t)   disp(['ttsp: Suspicious entries: '])   disp( num2str([bad_t-1 slow_peak(bad_t) sacp_off(bad_t) ttsp(bad_t)]) );   disp(' ')endif ~isempty(bad_p)   disp(['p_dur: Suspicious entries: '])   disp( num2str([bad_p-1 sacp_off(bad_t) sacp_on(bad_t) p_dur(bad_p)]) );   disp(' ')endif ~isempty(bad_v)   disp(['v_dur: Suspicious entries: '])   disp( num2str([bad_v-1 sacv_off(bad_v) sacv_on(bad_v) v_dur(bad_v)]) );   disp(' ')endif ~isempty(bad_s)   disp(['skewness: Suspicious entries: '])   disp( num2str([bad_s-1 sacv_off(bad_s) max_v_pt(bad_s) sacv_on(bad_s) skewness(bad_s)]) );   disp(' ')end%if ~isempty(bad_t), disp(['bad_t: Found suspicious entries: ' num2str(bad_t')]); end%if ~isempty(bad_p), disp(['bad_p: Found suspicious entries: ' num2str(bad_p')]); end%if ~isempty(bad_v), disp(['bad_v: Found suspicious entries: ' num2str(bad_v')]); end%if ~isempty(bad_c), disp(['bad_c: Found suspicious entries: ' num2str(bad_c')]); end%if ~isempty(bad_s), disp(['bad_s: Found suspicious entries: ' num2str(bad_s')]); endif ~exist('debugme') debugme = 0; endif ~debugme   clear sacv_on sacv_off sacp_on sacp_off cycle_beg   clear cycle_end slow_peak max_v_pt   clear sanRows sanCols num_s_pts num_d_pts v_or_p t_or_s   clear xlabl yStr y_vect y_ind_on y_ind_off   clear  x_vect i w_name vscale vH vel2   clear temp_p temp_v temp_c temp_s temp_t   clear p_dur v_dur cyc_dur skewness ttsp   clear bad_t bad_p bad_v bad_c bad_send