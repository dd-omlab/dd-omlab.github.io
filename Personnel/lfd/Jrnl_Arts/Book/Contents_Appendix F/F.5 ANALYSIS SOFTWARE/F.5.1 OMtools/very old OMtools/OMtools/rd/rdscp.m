% rdscp.m:  read in a text file containing the saccade control points% Written by:  Jonathan Jacobs%              September 1997  (last mod:  09/22/97)function  [sacvon,sacpon,sacpoff,sacvoff,prevfovpt,...           slowpeak,maxvpt,cyc_beg,cyc_end,...           eye,w_form,s_type,sac_loaded] = readscp(fname)global filenamesacpt_gdisp( ['Searching ' fname ' for saved saccade points. '] )%disp( ['Reading ' fname] )maxNumSacs = 100;  %% max possible # of saccades assoc with a given file.% if we can't load the saccade control points file% return and let "fill_scp" fill points with NaNsisFile = eval( ['exist(''' fname ''')'] );if (~isFile)   disp( [sprintf('\b') ' ** None found **' ] )   %disp( ['  <<I can not find the saccade points file: ' fname '>>'] )   %disp( ['  <<It must be in the same directory as ' filename '>>'] )   %disp( ['  <<I will fill the control points with NaNs>>'] )   sac_loaded = 0;   sacvon = []; sacpon = []; sacpoff = []; sacvoff = [];   prevfovpt = []; slowpeak = []; maxvpt = [];   cyc_beg = []; cyc_end = [];   eye =''; w_form = ''; s_type = '';   returnend %(~isFile)fid = fopen(fname);in_text = fread(fid);in_text = setstr(in_text)';fclose(fid);verbose = 1;sac_loaded = 1;count = 0;isEOF = 0;while( ~isEOF )   emptyLine = 1;   while( emptyLine )       [topline, in_text, emptyLine, isEOF] = getnextl(in_text);      if isEOF,return,end    %disp('EOF reached')   end   count = count+1;   [words, numWords] = procline(topline);   [flag1, sacType]  = is_sactyp(words(1,:));   [flag2, waveForm] = is_wform(words(2,:));   channel = words(3,:);    s_type(count,:) = pad(sacType,13);   w_form(count,:) = pad(waveForm,5);   eye(count,:) = pad(channel,5);      numEntries = str2num(words(4,:));   if(verbose)      disp(['  new WF/ST entry!  #' num2str(count)])      disp(['   Waveform: ' w_form(count,:)])      disp(['   Saccade type: ' s_type(count,:)])      disp(['   channel: ' words(3,:)])      disp(['   # entries: ' words(4,:)])      disp(' ')   end   % initialize this entry's SCP arrays   sacvon(1:maxNumSacs,count)    = NaN*ones(maxNumSacs,1);   sacpon(1:maxNumSacs,count)    = NaN*ones(maxNumSacs,1);   sacpoff(1:maxNumSacs,count)   = NaN*ones(maxNumSacs,1);   sacvoff(1:maxNumSacs,count)   = NaN*ones(maxNumSacs,1);   prevfovpt(1:maxNumSacs,count) = NaN*ones(maxNumSacs,1);   slowpeak(1:maxNumSacs,count)  = NaN*ones(maxNumSacs,1);   maxvpt(1:maxNumSacs,count)    = NaN*ones(maxNumSacs,1);   cyc_beg(1:maxNumSacs,count)   = NaN*ones(maxNumSacs,1);   cyc_end(1:maxNumSacs,count)   = NaN*ones(maxNumSacs,1);   % this for loop reads in all the SCP entries.   for j=1:numEntries      emptyLine = 1;      while( emptyLine ) 	      [topline, in_text, emptyLine, isEOF] = getnextl(in_text);	      if isEOF,return,end	   end      [words, numWords] = procline(topline);      sacvon(j,count)   = str2num(words(1,:));      sacpon(j,count)   = str2num(words(2,:));      sacpoff(j,count)  = str2num(words(3,:));      sacvoff(j,count)  = str2num(words(4,:));      slowpeak(j,count) = str2num(words(5,:));      maxvpt(j,count)   = str2num(words(6,:));      cyc_beg(j,count)  = str2num(words(7,:));      cyc_end(j,count)  = str2num(words(8,:));      if (numWords == 9)         prevfovpt(j,count) = str2num(words(9,:));       else         prevfovpt(j,count) = NaN;                  end   endend