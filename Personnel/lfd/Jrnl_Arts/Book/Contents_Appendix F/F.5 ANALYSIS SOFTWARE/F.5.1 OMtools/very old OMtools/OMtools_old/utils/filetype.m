function [oldtype,oldcreator] = filetype(filename,type,creator)% FILETYPE  Get and change file type and creator of a Macintosh file.%%   [OLDTYPE,OLDCREATOR] = FILETYPE(FILENAME,TYPE,CREATOR) gets the Macintosh%         file type and creator of the FILENAME, and changes them to TYPE and%         CREATOR (if supplied and not empty).  FILENAME may be a string or a%         string matrix (in which case each row is DEBLANK'ed and used as a%         filename).%%   The number of rows in TYPE and CREATOR, if supplied and not empty, must%   be one or the same as the number of rows in FILENAME.%%   The MEX version, if it exists, is preferred since it runs under both%   MATLAB 4 and MATLAB 5.  Otherwise, the Applescript version is called%   by the code below under MATLAB 5.% Copyright (c)1995-97, Erik A. Johnson <johnsone@uiuc.edu>, 4/15/97% check versionv=version;if (v(1)<'5'),	error('With MATLAB 4, you must use the MEX version of FILETYPE.');end;% check the argumentsoldtype=[]; oldcreator=[];if (nargin<1),       return; end;if (nargin>3),       error('FILETYPE takes at most 3 input arguments.'); end;if (nargout>2),      error('FILETYPE returns at most two arguments.'); end;% fill in empty argumentsif (nargin<2), type=''; end;if (nargin<3), creator=''; end;% check argument classif ~isstr(filename), error('FILETYPE requires the FILENAME be a string or string matrix.'); end;if ~isstr(type),     error('FILETYPE requires the file TYPE be a string or string matrix.'); end;if ~isstr(creator),  error('FILETYPE requires the file CREATOR be a string or string matrix.'); end;% check argument sizesnfn=size(filename,1); nft=size(type,1); nfc=size(creator,1); n=[nft nfc];if any(n~=0 & n~=1 & n~=nfn),	error('FILETYPE requires the # of file TYPEs and CREATORs be 0, 1 or the # of FILENAMEs');end;if (~isempty(type) & size(type,2)~=4),	error('FILETYPE requires the file TYPE be an Nx4 string matrix.');end;if (~isempty(creator) & size(creator,2)~=4),	error('FILETYPE requires the file CREATOR be an Nx4 string matrix.');end;% handle trivial caseif isempty(filename), return; end;% create the applescript argumentsnames = '{';for k=1:size(filename,1),	fn = deblank(filename(k,:));	if any(find(fn ==':'))		if fn(1) == ':'			fullname = [cd fn];		else			fullname = fn;		end	else		fullname = [cd ':' fn];	end	fullname = strrep(strrep(strrep(fullname,'\','\\\\'),'"','\"'),0,'\\0');	names=[names '"' fullname '",'];end;names(length(names))='}';if isempty(type), ftypes='{}'; else,	for k=1:size(type,1),		cur=strrep(strrep(strrep(type(k,:),'\','\\\\'),'"','\"'),0,'\\0');		type(k,1:length(cur)) = cur;	end;	if (size(type,1)==1), type=type(ones(nfn,1),:); end;	q='",'; q=q(ones(size(type,1),1),:);	type = [q(:,1) type q]';	ftypes = ['{' type(:)'];	ftypes(length(ftypes)) = '}';	ftypes(ftypes==0) = [];end;if isempty(creator), fcreas='{}'; else,	for k=1:size(creator,1),		cur=strrep(strrep(strrep(creator(k,:),'\','\\\\'),'"','\"'),0,'\\0');		creator(k,1:length(cur)) = cur;	end;	if (size(creator,1)==1), creator=creator(ones(nfn,1),:); end;	q='",'; q=q(ones(size(creator,1),1),:);	creator = [q(:,1) creator q]';	fcreas = ['{' creator(:)'];	fcreas(length(fcreas)) = '}';	fcreas(fcreas==0) = [];end;% call applescript and check for errorresultString = feval('applescript','filetype','fnames',names,'ftypes',ftypes,'fcreas',fcreas);errstr = '"ERROR ';if (length(resultString)>=length(errstr)),	if strcmp(resultString(1:length(errstr)),errstr),		error(resultString(8:length(resultString)-1));	end;end;% convert back to null characters if they existresultString = resultString(2:length(resultString)-1);if any(resultString=='\'),	ijunk = [];	wasSlash = 0;	for k=1:length(resultString),		if (wasSlash),			if (resultString(k)=='0'), resultString(k)=setstr(0); end;			wasSlash = 0;		elseif (resultString(k)=='\'),			wasSlash = 1;			ijunk = [ijunk k];		end;	end;	resultString(ijunk) = [];end;% make sure it is the correct sizeif (rem(length(resultString),8)),	c = sprintf('\n');	resultString % so it prints out	error('FILETYPE got invalid data back from the filetype applescript.');end;% convert the result to string matricesoldtype      = reshape(resultString,length(resultString)/2,2);oldcreator   = reshape(oldtype(:,2),4,size(oldtype,1)/4)';oldtype      = reshape(oldtype(:,1),4,size(oldtype,1)/4)';