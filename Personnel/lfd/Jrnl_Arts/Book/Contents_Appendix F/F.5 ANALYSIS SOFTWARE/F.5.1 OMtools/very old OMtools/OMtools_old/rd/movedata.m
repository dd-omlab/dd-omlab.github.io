% movedat.m: move a file and its associated data from ome% location in the matrices to another.  Can also remove the file% and its associated detritus...% written by: Jonathan Jacobs%             May 1996 - February 1997 (last mod: 02/22/97)% list the currently loaded files[numFiles, dummy] = size(namearray);numLHfiles = length(find(has_LH == 1));numRHfiles = length(find(has_RH == 1));numLVfiles = length(find(has_LV == 1));numRVfiles = length(find(has_RV == 1));numLTfiles = length(find(has_LT == 1));numRTfiles = length(find(has_RT == 1));numHHfiles = length(find(has_HH == 1));numHVfiles = length(find(has_HV == 1));numSTfiles = length(find(has_ST == 1));for i = 1:numFiles   if i<10      istr = ['0' num2str(i)];    else      istr = num2str(i);   end   disp([istr '  ' namearray(i,:)])endsource=-1;while( (source<0) | (source>numFiles) )   source = input( 'Move which file (''0'' to cancel)? ' );   if source == 0 return; endenddest=-1;while( (dest<0) | (dest>numFiles+1) )   dest = input( 'Place it before which file (''0'' to delete)? ' );endif( (dest==source) | (dest == source+1) )   disp( 'File is already in place.' )   returnend% moving data will void our PICKDATA results, so we % make the user run it again by killing 'pos' arrayclear pos vel acc%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% OK, now it's time to do the swapping and what-have-you% see if the file has left-eye and/or right-eye dataoldLHpos = 0;if has_LH(source) == 1   lhFlag = 1;   oldLHpos = sum(has_LH(1:source));endoldRHpos = 0;if has_RH(source) == 1   rhFlag = 1;   oldRHpos = sum(has_RH(1:source));endoldLVpos = 0;if has_LV(source) == 1   lvFlag = 1;   oldLVpos = sum(has_LV(1:source));endoldRVpos = 0;if has_RV(source) == 1   rvFlag = 1;   oldRVpos = sum(has_RV(1:source));endoldLTpos = 0;if has_LT(source) == 1   ltFlag = 1;   oldLTpos = sum(has_LT(1:source));endoldRTpos = 0;if has_RT(source) == 1   rtFlag = 1;   oldRTpos = sum(has_RT(1:source));end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% delete the fileif( dest==0 )   disp( ['Deleting ' namearray(source,:)])   has_LH    = zap_em( has_LH, source, numFiles, 'col');   has_RH    = zap_em( has_RH, source, numFiles, 'col');   has_LV    = zap_em( has_LV, source, numFiles, 'col');   has_RV    = zap_em( has_RV, source, numFiles, 'col');   has_LT    = zap_em( has_LT, source, numFiles, 'col');   has_RT    = zap_em( has_RT, source, numFiles, 'col');   namearray = zap_em(namearray, source, numFiles, 'row');   hasSacPts = zap_em(hasSacPts, source, numFiles, 'row');   which_eye = zap_em(which_eye, source, numFiles, 'col');   %adjust    = zap_em(adjust, source, numFiles, 'col');   sampFreq  = zap_em(sampFreq, source, numFiles, 'col');   if lhFlag      sacv_on_lh   = zap_em(sacv_on_lh, oldLHpos, numLHfiles, 'col');      sacv_off_lh  = zap_em(sacv_off_lh, oldLHpos, numLHfiles, 'col');      sacp_on_lh   = zap_em(sacp_on_lh, oldLHpos, numLHfiles, 'col');      sacp_off_lh  = zap_em(sacp_off_lh, oldLHpos, numLHfiles, 'col');      slow_peak_lh = zap_em(slow_peak_lh, oldLHpos, numLHfiles, 'col');      max_v_pt_lh  = zap_em(max_v_pt_lh, oldLHpos, numLHfiles, 'col');      cycle_beg_lh = zap_em(cycle_beg_lh, oldLHpos, numLHfiles, 'col');      cycle_end_lh = zap_em(cycle_end_lh, oldLHpos, numLHfiles, 'col');      lh           = zap_em(lh, oldLHpos, numLHfiles, 'col');   end   if rhFlag      sacv_on_rh   = zap_em(sacv_on_rh, oldRHpos, numRHfiles, 'col');      sacv_off_rh  = zap_em(sacv_off_rh, oldRHpos, numRHfiles, 'col');      sacp_on_rh   = zap_em(sacp_on_rh, oldRHpos, numRHfiles, 'col');      sacp_off_rh  = zap_em(sacp_off_rh, oldRHpos, numRHfiles, 'col');      slow_peak_rh = zap_em(slow_peak_rh, oldRHpos, numRHfiles, 'col');      max_v_pt_rh  = zap_em(max_v_pt_rh, oldRHpos, numRHfiles, 'col');      cycle_beg_rh = zap_em(cycle_beg_rh, oldRHpos, numRHfiles, 'col');      cycle_end_rh = zap_em(cycle_end_rh, oldRHpos, numRHfiles, 'col');      rh           = zap_em(rh, oldRHpos, numRHfiles, 'col');   end   if lvFlag      sacv_on_lv   = zap_em(sacv_on_lv, oldLVpos, numLVfiles, 'col');      sacv_off_lv  = zap_em(sacv_off_lv, oldLVpos, numLVfiles, 'col');      sacp_on_lv   = zap_em(sacp_on_lv, oldLVpos, numLVfiles, 'col');      sacp_off_lv  = zap_em(sacp_off_lv, oldLVpos, numLVfiles, 'col');      slow_peak_lv = zap_em(slow_peak_lv, oldLVpos, numLVfiles, 'col');      max_v_pt_lv  = zap_em(max_v_pt_lv, oldLVpos, numLVfiles, 'col');      cycle_beg_lv = zap_em(cycle_beg_lv, oldLVpos, numLVfiles, 'col');      cycle_end_lv = zap_em(cycle_end_lv, oldLVpos, numLVfiles, 'col');      lv           = zap_em(lv, oldLVpos, numLVfiles, 'col');   end   if rvFlag      sacv_on_rv   = zap_em(sacv_on_rv, oldRVpos, numRVfiles, 'col');      sacv_off_rv  = zap_em(sacv_off_rv, oldRVpos, numRVfiles, 'col');      sacp_on_rv   = zap_em(sacp_on_rv, oldRVpos, numRVfiles, 'col');      sacp_off_rv  = zap_em(sacp_off_rv, oldRVpos, numRVfiles, 'col');      slow_peak_rv = zap_em(slow_peak_rv, oldRVpos, numRVfiles, 'col');      max_v_pt_rv  = zap_em(max_v_pt_rv, oldRVpos, numRVfiles, 'col');      cycle_beg_rv = zap_em(cycle_beg_rv, oldRVpos, numRVfiles, 'col');      cycle_end_rv = zap_em(cycle_end_rv, oldRVpos, numRVfiles, 'col');      rv           = zap_em(rv, oldRVpos, numRVfiles, 'col');   end   returnend%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% rearrange all the stuff that is in arrays composed of combined% L/R info.  (i.e. has L + R entries)% rearrange the has_LH/RH arrayshas_LH = swap_em( has_LH, source, dest, numFiles, 'col');has_RH = swap_em( has_RH, source, dest, numFiles, 'col');has_LV = swap_em( has_LV, source, dest, numFiles, 'col');has_RV = swap_em( has_RV, source, dest, numFiles, 'col');has_LT = swap_em( has_LV, source, dest, numFiles, 'col');has_RT = swap_em( has_RV, source, dest, numFiles, 'col');[has_LH' has_RH' has_LV' has_RV' has_LT' has_RT'];namearray = swap_em(namearray, source, dest, numFiles, 'row');hasSacPts = swap_em(hasSacPts, source, dest, numFiles, 'row');%adjust    = swap_em(adjust, source, dest, numFiles, 'col');sampFreq  = swap_em(sampFreq, source, dest, numFiles, 'col');which_eye = swap_em(which_eye, source, dest, numFiles, 'col');% find the new location's index.%if source<dest   newLoc = dest-1;% else%   newLoc = dest;%end% now we can move the stuff that is in separate L/R columnsnewLHpos = 0;if lhFlag   newLHpos = sum(has_LH(1:newLoc))+1; % newLpos: put the column in front   if newLHpos == 0                     % of this location; it's like 'dest'      disp( 'ERROR!: newLHpos == 0' )      return   end   lh           = swap_em(lh, oldLHpos, newLHpos, numLHfiles, 'col');   sacv_on_lh   = swap_em(sacv_on_lh,   oldLHpos, newLHpos, numLHfiles, 'col');   sacv_off_lh  = swap_em(sacv_off_lh,  oldLHpos, newLHpos, numLHfiles, 'col');   sacp_on_lh   = swap_em(sacp_on_lh,   oldLHpos, newLHpos, numLHfiles, 'col');   sacp_off_lh  = swap_em(sacp_off_lh,  oldLHpos, newLHpos, numLHfiles, 'col');   slow_peak_lh = swap_em(slow_peak_lh, oldLHpos, newLHpos, numLHfiles, 'col');   max_v_pt_lh  = swap_em(max_v_pt_lh,  oldLHpos, newLHpos, numLHfiles, 'col');   cycle_beg_lh = swap_em(cycle_beg_lh, oldLHpos, newLHpos, numLHfiles, 'col');   cycle_end_lh = swap_em(cycle_end_lh, oldLHpos, newLHpos, numLHfiles, 'col');endnewRHpos = 0;if rhFlag   newRHpos = sum(has_RH(1:newLoc))+1;   if newRHpos == 0      disp( 'ERROR!: newRHpos == 0' )      return   end   rh           = swap_em(rh, oldRHpos, newRHpos, numRHfiles, 'col');   sacv_on_rh   = swap_em(sacv_on_rh,   oldRHpos, newRHpos, numRHfiles, 'col');   sacv_off_rh  = swap_em(sacv_off_rh,  oldRHpos, newRHpos, numRHfiles, 'col');   sacp_on_rh   = swap_em(sacp_on_rh,   oldRHpos, newRHpos, numRHfiles, 'col');   sacp_off_rh  = swap_em(sacp_off_rh,  oldRHpos, newRHpos, numRHfiles, 'col');   slow_peak_rh = swap_em(slow_peak_rh, oldRHpos, newRHpos, numRHfiles, 'col');   max_v_pt_rh  = swap_em(max_v_pt_rh,  oldRHpos, newRHpos, numRHfiles, 'col');   cycle_beg_rh = swap_em(cycle_beg_rh, oldRHpos, newRHpos, numRHfiles, 'col');   cycle_end_rh = swap_em(cycle_end_rh, oldRHpos, newRHpos, numRHfiles, 'col');endnewLVpos = 0;if lvFlag   newLVpos = sum(has_LV(1:newLoc))+1; % newLpos: put the column in front   if newLVpos == 0                     % of this location; it's like 'dest'      disp( 'ERROR!: newLVpos == 0' )      return   end   lv           = swap_em(lv, oldLVpos, newLVpos, numLVfiles, 'col');   sacv_on_lv   = swap_em(sacv_on_lv,   oldLVpos, newLVpos, numLVfiles, 'col');   sacv_off_lv  = swap_em(sacv_off_lv,  oldLVpos, newLVpos, numLVfiles, 'col');   sacp_on_lv   = swap_em(sacp_on_lv,   oldLVpos, newLVpos, numLVfiles, 'col');   sacp_off_lv  = swap_em(sacp_off_lv,  oldLVpos, newLVpos, numLVfiles, 'col');   slow_peak_lv = swap_em(slow_peak_lv, oldLVpos, newLVpos, numLVfiles, 'col');   max_v_pt_lv  = swap_em(max_v_pt_lv,  oldLVpos, newLVpos, numLVfiles, 'col');   cycle_beg_lv = swap_em(cycle_beg_lv, oldLVpos, newLVpos, numLVfiles, 'col');   cycle_end_lv = swap_em(cycle_end_lv, oldLVpos, newLVpos, numLVfiles, 'col');endnewRVpos = 0;if rvFlag   newRVpos = sum(has_RV(1:newLoc))+1;   if newRVpos == 0      disp( 'ERROR!: newRVpos == 0' )      return   end   rv           = swap_em(rv, oldRVpos, newRVpos, numRVfiles, 'col');   sacv_on_rv   = swap_em(sacv_on_rv,   oldRVpos, newRVpos, numRVfiles, 'col');   sacv_off_rv  = swap_em(sacv_off_rv,  oldRVpos, newRVpos, numRVfiles, 'col');   sacp_on_rv   = swap_em(sacp_on_rv,   oldRVpos, newRVpos, numRVfiles, 'col');   sacp_off_rv  = swap_em(sacp_off_rv,  oldRVpos, newRVpos, numRVfiles, 'col');   slow_peak_rv = swap_em(slow_peak_rv, oldRVpos, newRVpos, numRVfiles, 'col');   max_v_pt_rv  = swap_em(max_v_pt_rv,  oldRVpos, newRVpos, numRVfiles, 'col');   cycle_beg_rv = swap_em(cycle_beg_rv, oldRVpos, newRVpos, numRVfiles, 'col');   cycle_end_rv = swap_em(cycle_end_rv, oldRVpos, newRVpos, numRVfiles, 'col');endnewLTpos = 0;if ltFlag   newLTpos = sum(has_LT(1:newLoc))+1; % newLpos: put the column in front   if newLTpos == 0                     % of this location; it's like 'dest'      disp( 'ERROR!: newLTpos == 0' )      return   end   lt           = swap_em(lt, oldLTpos, newLTpos, numLTfiles, 'col');   sacv_on_lt   = swap_em(sacv_on_lt,   oldLTpos, newLTpos, numLTfiles, 'col');   sacv_off_lt  = swap_em(sacv_off_lt,  oldLTpos, newLTpos, numLTfiles, 'col');   sacp_on_lt   = swap_em(sacp_on_lt,   oldLTpos, newLTpos, numLTfiles, 'col');   sacp_off_lt  = swap_em(sacp_off_lt,  oldLTpos, newLTpos, numLTfiles, 'col');   slow_peak_lt = swap_em(slow_peak_lt, oldLTpos, newLTpos, numLTfiles, 'col');   max_v_pt_lt  = swap_em(max_v_pt_lt,  oldLTpos, newLTpos, numLTfiles, 'col');   cycle_beg_lt = swap_em(cycle_beg_lt, oldLTpos, newLTpos, numLTfiles, 'col');   cycle_end_lt = swap_em(cycle_end_lt, oldLTpos, newLTpos, numLTfiles, 'col');endnewRTpos = 0;if rtFlag   newRTpos = sum(has_RT(1:newLoc))+1;   if newRTpos == 0      disp( 'ERROR!: newRTpos == 0' )      return   end   rt           = swap_em(rt, oldRTpos, newRTpos, numRTfiles, 'col');   sacv_on_rt   = swap_em(sacv_on_rt,   oldRTpos, newRTpos, numRTfiles, 'col');   sacv_off_rt  = swap_em(sacv_off_rt,  oldRTpos, newRTpos, numRTfiles, 'col');   sacp_on_rt   = swap_em(sacp_on_rt,   oldRTpos, newRTpos, numRTfiles, 'col');   sacp_off_rt  = swap_em(sacp_off_rt,  oldRTpos, newRTpos, numRTfiles, 'col');   slow_peak_rt = swap_em(slow_peak_rt, oldRTpos, newRTpos, numRTfiles, 'col');   max_v_pt_rt  = swap_em(max_v_pt_rt,  oldRTpos, newRTpos, numRTfiles, 'col');   cycle_beg_rt = swap_em(cycle_beg_rt, oldRTpos, newRTpos, numRTfiles, 'col');   cycle_end_rt = swap_em(cycle_end_rt, oldRTpos, newRTpos, numRTfiles, 'col');end% clearing of the variablesif ~exist('debugme') debugme=0; endif debugme == 0   clear oldRHpos oldLHpos numRHfiles numLHfiles lhFlag rhFlag   clear newLoc source dest i istr numFiles dummyend