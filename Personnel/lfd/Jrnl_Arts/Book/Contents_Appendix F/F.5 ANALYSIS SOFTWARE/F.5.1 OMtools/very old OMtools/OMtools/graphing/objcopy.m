% objcopy.m: copy an object into a new figure.% Both the source and destination axes must exist before% running this function.% Written by:  Jonathan Jacobs%              April 1998  (last mod: 04/08/98)function objcopy(~)if isempty(get(0,'children'))   disp('   You must have a source axis and')   disp('   a destination axis open on the')   disp('   screen to use this function.')   returnenddisp('Click on the object you want to copy.')disp('When you have done so, hit ENTER')pausetemp = get(gco,'type');if strcmp(temp,'line')  || strcmp(temp,'surface') || ...   strcmp(temp,'patch') || strcmp(temp,'text')    || strcmp(temp,'bar')   gSource=gco; else   disp('You must click on a line, surface, patch or text object.')   returnendgSourceAx = get(gSource,'Parent');disp('Now select a set of axes for the new graph')disp('When you have done so, hit ENTER')pausegDestAx = gca;gDestFig = get(gDestAx,'Parent');if gDestAx == gSourceAx   disp('   Destination can not be the same as the source.')   disp('   Make sure that you have more than one set of')   disp('   axes available on the screen and try again.')   returnendhold on% do all the object propertiesif strcmp(get(gSource,'Type'),'line')    figure(gDestFig)    destH = line(0,0);    temp = get(gSource,'XData');    if ~isempty(temp)      set(destH,'Xdata',temp);    end    temp = get(gSource,'YData');    if ~isempty(temp)      set(destH,'Ydata',temp);    end    temp = get(gSource,'ZData');    if ~isempty(temp)      set(destH,'Zdata',temp);    end    temp = get(gSource,'Color');    set(destH,'Color',temp);    %temp = get(gSource,'EraseMode');    %set(destH,'EraseMode',temp);    temp = get(gSource,'LineStyle');    set(destH,'LineStyle',temp);    temp = get(gSource,'LineWidth');    set(destH,'LineWidth',temp);    temp = get(gSource,'MarkerSize');    set(destH,'MarkerSize',temp);       temp = get(gSource,'Marker');       set(destH,'Marker',temp);       temp = get(gSource,'MarkerEdgeColor');       set(destH,'MarkerEdgeColor',temp);       temp = get(gSource,'MarkerFaceColor');       set(destH,'MarkerFaceColor',temp);    elseif strcmp(get(gSource,'Type'),'bar')      figure(gDestFig)      hold on      destH = bar(NaN,NaN);      temp = gSource.BarLayout;      destH.BarLayout = temp;            temp = gSource.BarWidth;      destH.BarWidth = temp;      temp = gSource.BaseValue;      destH.BaseValue = temp;      temp = gSource.BusyAction;      destH.BusyAction = temp;      temp = gSource.ButtonDownFcn;      destH.ButtonDownFcn = temp;      temp = gSource.CData;      destH.CData = temp;      temp = gSource.Children;      destH.Children = temp;      temp = gSource.Clipping;      destH.Clipping = temp;      temp = gSource.CreateFcn;      destH.CreateFcn = temp;      temp = gSource.DeleteFcn;      destH.DeleteFcn = temp;      temp = gSource.DisplayName;      destH.DisplayName = temp;      temp = gSource.EdgeAlpha;      destH.EdgeAlpha = temp;      temp = gSource.EdgeColor;      destH.EdgeColor = temp;      temp = gSource.FaceAlpha;      destH.FaceAlpha = temp;      temp = gSource.FaceColor;      destH.FaceColor = temp;      temp = gSource.HandleVisibility;      destH.HandleVisibility = temp;      temp = gSource.HitTest;      destH.HitTest = temp;      temp = gSource.Horizontal;      destH.Horizontal = temp;      temp = gSource.Interruptible;      destH.Interruptible = temp;      temp = gSource.LineStyle;      destH.LineStyle = temp;      temp = gSource.LineWidth;      destH.LineWidth = temp;      temp = gSource.PickableParts;      destH.PickableParts = temp;      temp = gSource.Selected;      destH.Selected = temp;      temp = gSource.SelectionHighlight;      destH.SelectionHighlight = temp;      temp = gSource.ShowBaseLine;      destH.ShowBaseLine = temp;      temp = gSource.Tag;      destH.Tag = temp;      temp = gSource.UIContextMenu;      destH.UIContextMenu = temp;      temp = gSource.UserData;      destH.UserData = temp;      temp = gSource.Visible;      destH.Visible = temp;      temp = gSource.XData;      destH.XData = temp;      temp = gSource.XDataMode;      destH.XDataMode = temp;      temp = gSource.XDataSource;      destH.XDataSource = temp;      temp = gSource.YData;      destH.YData = temp;      temp = gSource.YDataSource;      destH.YDataSource = temp;elseif strcmp(get(gSource,'Type'),'patch')    figure(gDestFig)    destH = patch(0,0,0);    temp = get(gSource,'XData');    if ~isempty(temp)      set(destH,'Xdata',temp);    end    temp = get(gSource,'YData');    if ~isempty(temp)      set(destH,'Ydata',temp);    end    temp = get(gSource,'ZData');    if ~isempty(temp)      set(destH,'Zdata',temp);    end    temp = get(gSource,'CData');    if ~isempty(temp)      set(destH,'Cdata',temp);    end    temp = get(gSource,'EdgeColor');    set(destH,'EdgeColor',temp);    %temp = get(gSource,'EraseMode');    %set(destH,'EraseMode',temp);    temp = get(gSource,'FaceColor');    set(destH,'FaceColor',temp);    temp = get(gSource,'LineWidth');    set(destH,'LineWidth',temp);       temp = get(gSource,'CDataMapping');       set(destH,'CDataMapping',temp);       temp = get(gSource,'FaceVertexCData');       if ~isempty(temp)         set(destH,'FaceVertexCData',temp);       end       temp = get(gSource,'Faces');       set(destH,'Faces',temp);       temp = get(gSource,'LineStyle');       set(destH,'LineStyle',temp);       temp = get(gSource,'Marker');       set(destH,'Marker',temp);       temp = get(gSource,'MarkerEdgeColor');       set(destH,'MarkerEdgeColor',temp);       temp = get(gSource,'MarkerFaceColor');       set(destH,'MarkerFaceColor',temp);       temp = get(gSource,'MarkerSize');       set(destH,'MarkerSize',temp);       temp = get(gSource,'MarkerSize');       set(destH,'MarkerSize',temp);       temp = get(gSource,'FaceLighting');       set(destH,'FaceLighting',temp);       temp = get(gSource,'EdgeLighting');       set(destH,'EdgeLighting',temp);       temp = get(gSource,'BackFaceLighting');       set(destH,'BackFaceLighting',temp);       temp = get(gSource,'AmbientStrength');       set(destH,'AmbientStrength',temp);       temp = get(gSource,'DiffuseStrength');       set(destH,'DiffuseStrength',temp);       temp = get(gSource,'SpecularStrength');       set(destH,'SpecularStrength',temp);       temp = get(gSource,'SpecularExponent');       set(destH,'SpecularExponent',temp);       temp = get(gSource,'SpecularColorReflectance');       set(destH,'SpecularColorReflectance',temp);       temp = get(gSource,'VertexNormals');       set(destH,'VertexNormals',temp);       temp = get(gSource,'NormalMode');       set(destH,'NormalMode',temp); elseif strcmp(get(gSource,'Type'),'surface')    figure(gDestFig)    destH = surf([0 .01],[0 .01],[0 0;0 0]);    temp = get(gSource,'XData');    if ~isempty(temp)      set(destH,'Xdata',temp);    end    temp = get(gSource,'YData');    if ~isempty(temp)      set(destH,'Ydata',temp);    end    temp = get(gSource,'ZData');    if ~isempty(temp)      set(destH,'Zdata',temp);    end    temp = get(gSource,'CData');    if ~isempty(temp)      set(destH,'Cdata',temp);    end    temp = get(gSource,'EdgeColor');    set(destH,'EdgeColor',temp);    %temp = get(gSource,'EraseMode');    %set(destH,'EraseMode',temp);    temp = get(gSource,'FaceColor');    set(destH,'FaceColor',temp);    temp = get(gSource,'LineWidth');    set(destH,'LineWidth',temp);    temp = get(gSource,'LineStyle');    set(destH,'LineStyle',temp);    temp = get(gSource,'MarkerSize');    set(destH,'MarkerSize',temp);    temp = get(gSource,'MeshStyle');    set(destH,'MeshStyle',temp);       temp = get(gSource,'CDataMapping');       set(destH,'CDataMapping',temp);       temp = get(gSource,'Marker');       set(destH,'Marker',temp);       temp = get(gSource,'MarkerEdgeColor');       set(destH,'MarkerEdgeColor',temp);       temp = get(gSource,'MarkerFaceColor');       set(destH,'MarkerFaceColor',temp);       temp = get(gSource,'FaceLighting');       set(destH,'FaceLighting',temp);       temp = get(gSource,'EdgeLighting');       set(destH,'EdgeLighting',temp);       temp = get(gSource,'BackFaceLighting');       set(destH,'BackFaceLighting',temp);       temp = get(gSource,'AmbientStrength');       set(destH,'AmbientStrength',temp);       temp = get(gSource,'DiffuseStrength');       set(destH,'DiffuseStrength',temp);       temp = get(gSource,'SpecularStrength');       set(destH,'SpecularStrength',temp);       temp = get(gSource,'SpecularExponent');       set(destH,'SpecularExponent',temp);       temp = get(gSource,'SpecularColorReflectance');       set(destH,'SpecularColorReflectance',temp);       temp = get(gSource,'VertexNormals');       set(destH,'VertexNormals',temp);       temp = get(gSource,'NormalMode');       set(destH,'NormalMode',temp); elseif strcmp(get(gSource,'Type'),'text')    figure(gDestFig)    destH=text(0,0,'');       oldHandVis = get(destH,'HandleVisibility');       set(destH,'HandleVisibility','off');    temp = get(gSource,'Color');    set(destH,'Color',temp);    %temp = get(gSource,'EraseMode');    %set(destH,'EraseMode',temp);    temp = get(gSource,'FontAngle');    set(destH,'FontAngle',temp);    temp = get(gSource,'FontName');    set(destH,'FontName',temp);    temp = get(gSource,'FontSize');    set(destH,'FontSize',temp);    temp = get(gSource,'FontWeight');    set(destH,'FontWeight',temp);    temp = get(gSource,'HorizontalAlignment');    set(destH,'HorizontalAlignment',temp);    if (1)       temp = get(gSource,'Units');       set(destH,'Units',temp);       temp = get(gSource,'Position');       set(destH,'Position',temp);    end    temp = get(gSource,'Rotation');    set(destH,'Rotation',temp);    temp = get(gSource,'String');    set(destH,'String',temp);    temp = get(gSource,'VerticalAlignment');    set(destH,'VerticalAlignment',temp);       temp = get(gSource,'FontUnits');       set(destH,'FontUnits',temp);       temp = get(gSource,'Interpreter');       set(destH,'Interpreter',temp);       temp = get(gSource,'Editing');       set(destH,'Editing',temp);       set(destH,'HandleVisibility',oldHandVis);end%keyboarddisp('Done!')