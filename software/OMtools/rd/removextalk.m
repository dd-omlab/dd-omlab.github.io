% crosstalk.m: Scaling routine to remove hor to vrt and vrt to hor crosstalk.% For use in Eyelink and Ober data.% Use AFTER applying bias calibration on all channels%	If there is significant crosstalk (e.g., Ober data) and/or large%	nystagmus, crosstalk should be removed. It should also be removed for evaluating%	fixation: @ 0¡ in one plane while the eyes are displaced in the other plane; or%	if the eyes are diagonally displaced. Evaluation of fixation at a displaced gaze%	angle while the eyes are at 0¡ in the other plane does not require crosstalk%	removal if the data are from EyeLink.% To REMOVE CROSSTALK from EyeLink or Ober data:%	Use RE data from OD cal file (usually record #1) to determine the + & - vert%		(for rh) and + & - hor (for rv) scale factors%	Use LE data from OS cal file (usually record #2) to determine the + & - vert%		 (for lh) and + & - hor (for lv) scale factors%		NOTE: scale factors are AVERAGE values during STEADY fixation%			They are, (av. shift during off-zero fix)/(off-zero ampl.)%				(e.g., +v = ±horshift/+vfixpt; -v = ±horshift/-vfixpt)% written by:  Jonathan Jacobs%              January 2004 - March 2004 (last mod: 03/02/04)function newdata = removextalk(newdata, xtfactors, chNameArray)%global lh rh lv rv lt rtrh_rvpos = xtfactors(1); rh_rvneg = xtfactors(2);lh_lvpos = xtfactors(3); lh_lvneg = xtfactors(4);rv_rhpos = xtfactors(5); rv_rhneg = xtfactors(6);lv_lhpos = xtfactors(7); lv_lhneg = xtfactors(8);% First, figure out which channel is which from chNameArray...for i = 1:length(chNameArray)    chName = lower(char(chNameArray(i,:)));    switch chName        case {'rh'}            rhOrig = newdata(:,i); rhIndex = i;        case {'lh'}            lhOrig = newdata(:,i); lhIndex = i;        case {'rv'}            rvOrig = newdata(:,i); rvIndex = i;        case {'lv'}            lvOrig = newdata(:,i); lvIndex = i;        otherwise            %disp(['Could not match: ' chName])    end % switchend% ...then do the actual crosstalk removal...for i = 1:length(chNameArray)    chName = lower(char(chNameArray(i,:)));    switch chName        case {'rh'}            %disp('data src: rhOrig, xtalc src: rvOrig')            data_src = rhOrig; xtalk_src = rvOrig;            pos_xt = rh_rvpos; neg_xt = rh_rvneg;        case {'lh'}            %disp('data src: lhOrig, xtalk src: lvOrig')            data_src = lhOrig; xtalk_src = lvOrig;            pos_xt = lh_lvpos; neg_xt = lh_lvneg;        case {'rv'}            %disp('data src: rvOrig, xtalk src: rhOrig')            data_src = rvOrig; xtalk_src = rhOrig;            pos_xt = rv_rhpos; neg_xt = rv_rhneg;        case {'lv'}            %disp('data src: lvOrig, xtalk src: lhOrig')            data_src = lvOrig; xtalk_src = lhOrig;            pos_xt = lv_lhpos; neg_xt = lv_lhneg;    end % switch        % Make the scaling matrix: multiply all val's>0 in 'xtalk_src' by the pos XT factor;    % multiply all pts<0 in 'xtalk_src' by the negative scale factor;    % combine those vals into 'scaled_xtalk' data.  subtract it from 'data_src'.    temp = xtalk_src;    temp_pos = find(xtalk_src>0);  	               % find indices of pos points    temp_neg = find(xtalk_src<0);	                  % find indices of neg points    temp(temp_pos) = pos_xt * xtalk_src(temp_pos);	% creates pos part of xt correction    temp(temp_neg) = neg_xt * xtalk_src(temp_neg);	% creates neg part of xt correction    scaled_xtalk = temp;    data_src = data_src - scaled_xtalk;        % ...and finally reassemble the cleaned data back into 'newdata'.    switch chName        case {'rh'}            newdata(:,rhIndex) = data_src;        case {'lh'}            newdata(:,lhIndex) = data_src;        case {'rv'}            newdata(:,rvIndex) = data_src;        case {'lv'}            newdata(:,lvIndex) = data_src;    end % switch    end