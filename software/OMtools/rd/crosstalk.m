% crosstalk.m: Scaling routine to remove hor to vrt and vrt to hor crosstalk.% For use in Eyelink and Ober data.% Use AFTER running 'cal' on all channels%	If there is significant crosstalk (e.g., Ober data) and/or large%	nystagmus, crosstalk should be removed. It should also be removed for evaluating%	fixation: @ 0¡ in one plane while the eyes are displaced in the other plane; or%	if the eyes are diagonally displaced. Evaluation of fixation at a displaced gaze%	angle while the eyes are at 0¡ in the other plane does not require crosstalk%	removal if the data are from EyeLink. % To REMOVE CROSSTALK from EyeLink or Ober data:%	Use RE data from OD cal file (usually record #1) to determine the + & - vert %		(for rh) and + & - hor (for rv) scale factors%	Use LE data from OS cal file (usually record #2) to determine the + & - vert%		 (for lh) and + & - hor (for lv) scale factors%		NOTE: scale factors are AVERAGE values during STEADY fixation%			They are, (av. shift during off-zero fix)/(off-zero ampl.)%				(e.g., +v = ±horshift/+vfixpt; -v = ±horshift/-vfixpt)%	Place scale factors (with appropriate sign) in 'adjbias.txt'%		(e.g.,"% Crosstalk Scale Factors: +rv=_; -rv=_; +rh=_; -rh=_;%			+lv=_; -lv=_; +lh=_; -lh=_")%	Use 'crosstalk' with 2 scale factors for each channel%		(±rv for rh; ±rh for rv; ±lv for lh; and ±lh for lv)% written by:  L.F. Dell'Osso%              August 13, 2003 - August 14, 2003 (last mod: xx/xx/03)global lh rh lv rv lt rt %st svi=0;disp(' 0) --abort--')if ~isempty(rh), disp(' 1) rh'); endif ~isempty(lh), disp(' 2) lh'); endif ~isempty(rv), disp(' 3) rv'); endif ~isempty(lv), disp(' 4) lv'); endif ~isempty(rt), disp(' Torsional data present: not EyeLink or Ober data.'), return; endif ~isempty(lt), disp(' Torsional data present: not EyeLink or Ober data.'), return; endwhich = input('Eliminate crosstalk to which channel? ');switch which  case 0, disp('Aborted.')  case 1, pos = rh;        whatChStr = 'rh';  dir1str = 'rightward';  dir2str = 'leftward';			 xtalk_src = rv;  xtalk_str = 'rv';  dir3str = 'upward';     dir4str = 'downward';  case 2, pos = lh;        whatChStr = 'lh';  dir1str = 'rightward';  dir2str = 'leftward';			 xtalk_src = lv;  xtalk_str = 'lv';  dir3str = 'upward';     dir4str = 'downward';  case 3, pos = rv;        whatChStr = 'rv';  dir1str = 'upward';     dir2str = 'downward';			 xtalk_src = rh;  xtalk_str = 'rh';  dir3str = 'rightward';  dir4str = 'leftward';  case 4, pos = lv;        whatChStr = 'lv';  dir1str = 'upward';     dir2str = 'downward';			 xtalk_src = lh;  xtalk_str = 'lh';  dir3str = 'rightward';  dir4str = 'leftward';  otherwise, disp('Invalid selection.  Run ''crosstalk'' again.'), returnendif isempty(pos)   disp('You have selected an empty data channel.  Please run "crosstalk" again. ')   returnendif isempty(xtalk_src)   disp('You have selected an empty channel as the source of crosstalk.')	disp('If this is EyeLink or Ober data, please run "crosstalk" again. ')   returnend% What are the directional scale factors? Include their signs.disp('Include the signs (+ or -, default is +) when entering the scale factors. ')disp(' ')pos_xt = input(['Enter the scale factor for ' whatChStr ' during ' ...                 dir3str ' values of ' xtalk_str ': ']);neg_xt = input(['Enter the scale factor for ' whatChStr ' during ' ...                  dir4str ' values of ' xtalk_str ': ']);% Make the scaling matrix.% What needs to be done is: multiply all val's>0 in 'xtalk_src' by the pos XT factor;% multiply all pts<0 in 'xtalk_src' by the negative scale factor;% combine those vals into a scale factor matrix; subtract 'scaled_xtalk' from data.% Create scaled xtalk array.temp = xtalk_src;temp_pos = find(xtalk_src>0);  	               % find indices of pos pointstemp_neg = find(xtalk_src<0);	                  % find indices of neg pointstemp(temp_pos) = pos_xt * xtalk_src(temp_pos);	% creates pos part of xt correctiontemp(temp_neg) = neg_xt * xtalk_src(temp_neg);	% creates neg part of xt correctionscaled_xtalk = temp;pos = pos - scaled_xtalk;if which == 1, rh = pos; endif which == 2, lh = pos; endif which == 3, rv = pos; endif which == 4; lv = pos; enddisp(['Crosstalk has been removed from ' whatChStr '.'])