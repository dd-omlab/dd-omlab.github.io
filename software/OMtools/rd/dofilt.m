% doFilt.m:  use when we need to filter the last data record loaded.% written by: Jonathan Jacobs%             July 1999 (last mod: 07/22/99)% load the filter command file.  it is the name of the selected file, with the% file extension ("dat", "txt", "obr", "lab" or whatever) replaced by a "z"filtFile = [ shortname '.F' ];%disp( ['Reading ' filtFile] )disp( ['Searching ' filtFile ' for pre-filtering commands.'] )isFile = eval( ['exist(''' filtFile ''')'] );  % == exist('xxxx.f')if (~isFile)   disp( [sprintf('\b') ' ** None found **'])   %disp( ['  <<It must be in the same directory as ' filename '>>'] )   clear isFile filtFile   returnend[comp, maxsize] = computer;if strcmp( comp, 'MAC2' )   fid = fopen(filtFile, 'r', 'l');   % little-endian else   fid = fopen(filtFile, 'r');        % big-endianendin_text = fread(fid);in_text = char(in_text');fclose(fid);%disp(in_text)% A filt file has channel name, filter type, and the filter's arguments% (except for the sample freq, which is already known)count = 1;isEOF = 0;while( ~isEOF )   % these five lines will read in the next non-empty line.   % if we are at the end of the file we return.  (Could put   % an error message in the 'if isEOF' structure, if we wanted.   emptyLine = 1;   while( emptyLine )       [topline, in_text, emptyLine, isEOF] = getnextl(in_text);      if isEOF, break, end    %disp('EOF reached')   end   if ~isEOF	   [words, numWords] = procline(topline);	   chan_name(count,1:2) = lower(words(1,1:2));	   filtName = lower(words(2,1:3));	   filtType(count,1:3) = filtName;	   filtOrd(count) = str2num(lower(words(3,:)));	   	   if strcmp(filtName,'lpf') | strcmp(filtName,'hpf') | strcmp(filtName,'not')	      filtCutoff1(count) = str2num(lower(words(4,:)));	    elseif strcmp(filtName,'mvg')	      filtWind(count) = lower(words(4));	   end	   if strcmp(filtName,'not')	      filtCutoff2(count) = str2num(lower(words(5,:)));	   end	   count = count+1;   endend %whilecount = count-1;chan_name=char(chan_name);% Loop through the entries.  Look for LH horiz or RH horiz data% Use last entries in the "has_LH" and "has_RH" arrays to decide which% data is to be modified (last column in array).for k = 1:count       % if the filt file has an lh entry and the just-loaded file has lh data   if ( strcmp(lower(chan_name(k,1:2)),'lh') ) & ( has_LH(length(has_LH)) )       [lhLen lastLH] = size(lh);      if strcmp(filtType(count,1:3),'lpf')         lh(:,lastLH) = lpf( lh(:,lastLH), filtOrd(k), filtCutoff1(k), samp_freq(1) );         disp(['  LH:  Low Pass Filtered, Order ' num2str(filtOrd(k))...                   ' at ' num2str(filtCutoff1(k)) ' Hz' ])        elseif strcmp(filtType(count,1:3),'hpf')         lh(:,lastLH) = hpf( lh(:,lastLH), filtOrd(k), filtCutoff1(k), samp_freq(1) );         disp(['  LH:  High Pass Filtered, Order ' num2str(filtOrd(k))...                   ' at ' num2str(filtCutoff1(k)) ' Hz' ])        elseif strcmp(filtType(count,1:3),'not')         lh(:,lastLH) = notch( lh(:,lastLH), filtOrd(k), filtCutoff1(k),...                               filtCutoff2(k), samp_freq(1) );         disp(['  LH:  Notch Filtered, Order ' num2str(filtOrd(k))...               ' from ' num2str(filtCutoff1(k)) ' to ' num2str(filtCutoff2(k)) ' Hz' ])        elseif strcmp(filtType(count,1:3),'mvg')         lh(:,lastLH) = mvgavg( lh(:,lastLH), filtOrd(k), filtWind(k) );         disp(['  LH:  Moving Average Filtered, Order ' num2str(filtOrd(k)) ])        elseif strcmp(filtType(count,1:3),'med')         lh(:,lastLH) = medfilt( lh(:,lastLH), filtOrd(k) );         disp(['  LH:  Median Filtered, Order ' num2str(filtOrd(k)) ])      end                                              end %if has_LH...   % if the norm file has an rh entry and the just-loaded file has rh data   if ( strcmp(lower(chan_name(k,1:2)),'rh') ) & ( has_RH(length(has_RH)) )      [rhLen lastRH] = size(rh);      if strcmp(filtType(count,1:3),'lpf')         rh(:,lastRH) = lpf( rh(:,lastRH), filtOrd(k), filtCutoff1(k), samp_freq(1) );         disp(['  RH:  Low Pass Filtered, Order ' num2str(filtOrd(k))...                   ' at ' num2str(filtCutoff1(k)) ' Hz' ])        elseif strcmp(filtType(count,1:3),'hpf')         rh(:,lastRH) = hpf( rh(:,lastRH), filtOrd(k), filtCutoff1(k), samp_freq(1) );         disp(['  RH:  High Pass Filtered, Order ' num2str(filtOrd(k))...                   ' at ' num2str(filtCutoff1(k)) ' Hz' ])        elseif strcmp(filtType(count,1:3),'not')         rh(:,lastRH) = notch( rh(:,lastRH), filtOrd(k), filtCutoff1(k),...                               filtCutoff2(k), samp_freq(1) );         disp(['  RH:  Notch Filtered, Order ' num2str(filtOrd(k))...               ' from ' num2str(filtCutoff1(k)) ' to ' num2str(filtCutoff2(k)) ' Hz' ])        elseif strcmp(filtType(count,1:3),'mvg')         rh(:,lastRH) = mvgavg( rh(:,lastRH), filtOrd(k), filtWind(k) );         disp(['  RH:  Moving Average Filtered, Order ' num2str(filtOrd(k)) ])        elseif strcmp(filtType(count,1:3),'med')         rh(:,lastRH) = medfilt( rh(:,lastRH), filtOrd(k) );         disp(['  RH:  Median Filtered, Order ' num2str(filtOrd(k)) ])      end   end %if has_RH...       % if the norm file has an lv entry and the just-loaded file has lv data   if ( strcmp(lower(chan_name(k,1:2)),'lv') ) & ( has_LV(length(has_LV)) )       [lvLen lastLV] = size(lv);   end %if has_LV...   % if the norm file has an rv entry and the just-loaded file has rv data   if ( strcmp(lower(chan_name(k,1:2)),'rv') ) & ( has_RV(length(has_RV)) )      [rvLen lastRV] = size(rv);   end %if has_RV...end %for j...%sttif (~debugme)   clear filtCutoff1 filtCutoff2 filtWind filtType filtName   clear isEOF emptyLine topline in_text words numWords filtFileend