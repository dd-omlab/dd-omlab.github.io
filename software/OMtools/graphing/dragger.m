% dragger.m:   enable dragging in a figure% Written by:  Jonathan Jacobs%              March 1997 - August 2000 (last mod: 08/29/00)function dragger(action,~,~)if isempty(get(0,'Child'))   disp('No windows were open, boss.')   returnend% check if the axis editing window is already open% if it is, bring it to the frontdragEdWin = findme('dragEditingWindow');alreadyOpen = 0;if ishandle(dragEdWin)   figure(dragEdWin)   alreadyOpen = 1;   h=dragEdWin.UserData;else   h=[];enddrawEdWin = findme('drawEditingWindow');if ishandle(drawEdWin)   drawH=drawEdWin.UserData;   h.drawState=drawH.drawState;endif ~isfield(h,'drawState')   h.drawState=0;end%global dragFigif nargin == 0   action='initialize';   h.dragFig=findHotW;endif ishandle(action)   h.dragFig=action;   action='initialize';endfontsize = 12;GREY = [0.66 0.66 0.66];scrsize=get(0,'Screensize');maxHgt=scrsize(4);maxWid=scrsize(3);% make sure we have a valid window and that it's not emptyerrFlag = 0;if ~ishandle(h.dragFig)   h.dragFig=findHotW;elseif ishandle(h.dragFig)   dragFigNum=h.dragFig.Number;%elseif dragFig>=1%   dragFigNum=dragFig;else   %{   if strcmp(action,'dragquit')      close(dragWinH)   else      disp('No graph window found.  Possible reasons:')      disp(' * You don''t have a figure window open.')      disp(' * You are trying to edit a Zoomtool window.')      disp(' * I am having a nervous breakdown.')   end   %}   errFlag=1;end% add editing tools to figure menum=OMmenu(h.dragFig); %#ok<NASGU>%windText =  get(dragFig,'Tag');%if strcmp(lower(windText),'zoomed window')%   disp( 'dragger doesn''t like zoomtool windows.')%   errFlag = 1;%end%if strcmp( windText(5:length(windText)), 'EditingWindow')%   disp( 'dragger sez: Bring a graph window to the front and try again.')%   errFlag = 1;%endif errFlag,return;endtempga = get(h.dragFig,'Children');if isempty(tempga)   disp('Nothing to drag, boss.  Dragging is off.')   returnend% this little bit of fun is needed because not every child in the figure is an axis.ch = get(h.dragFig,'Children');numCh=length(ch);if numCh==0,disp('No axes, Eugene.');return;endcount = 0;axXLM=zeros(numCh,1);axYLM=zeros(numCh,1);axZLM=zeros(numCh,1);ga=gobjects(numCh,1);for i = 1:numCh   if strcmpi(ch(i).Type,'axes')      count = count + 1;      ga(count) = ch(i);      temp = lower(ga(count).XLimMode);      if temp(1) == 'a'         axXLM(i) = 0;      else         axXLM(i) = 1;      end      temp = lower(ga(count).YLimMode);      if temp(1) == 'a'         axYLM(i) = 0;      else         axYLM(i) = 1;      end      temp = lower(ga(count).ZLimMode);      if temp(1) == 'a'         axZLM(i) = 0;      else         axZLM(i) = 1;      end   endendnumAxes = count; %length(ga);if strcmp(action, 'initialize') && ~alreadyOpen   h.dragMsg = 0;   windText = h.dragFig.Tag;   if strcmp(windText(5:length(windText)),'EditingWindow')      disp( 'dragger: Bring a figure window to the front and try again.')      return   end   fig_height = 238;   fig_width  = 130;   dragStartXPos = 50;   %% default value   dragStartYPos = 100;  %% default value      % Set the window position.  Check if the window is already open.   % If not, then we will first try to read its last saved position from   % the pref file.  If not, we will place it at its default position.   % Make sure that it will be drawn completely on the screen.   % If not, move it so that it will.   dErrFlag=0; fErrFlag=0;   curdir=pwd;   cd(pathsafe(matlabroot))   try    cd(findomprefs)   catch, dErrFlag=1;   end   if dErrFlag      mkdir_stat=mkdir('omprefs');      if ~mkdir_stat         disp('** dragger: Unable to create ''omprefs'' dir in MATLAB root dir.')         disp('** You may continue, but prefs will not be saved.')      end   else      try         load dragPref.mat dragStartXPos dragStartYPos      catch         fErrFlag=1;      end      if fErrFlag         dragStartXPos = 50;         dragStartYPos = 100;         save dragPref.mat dragStartXPos dragStartYPos      end            cd(pathsafe(curdir))      % make sure that the window will be on the screen!      if dragStartXPos<1,dragStartXPos=1;end      if dragStartYPos<1,dragStartYPos=1;end      if (dragStartYPos+fig_height)>maxHgt         dragStartYPos=maxHgt-fig_height;      end      if (dragStartXPos+fig_width)>maxWid         dragStartXPos=maxWid-fig_width;      end   end   cd(curdir)      if dErrFlag || fErrFlag      dragStartXPos = 20;      dragStartYPos = (maxHgt-fig_height)/2;   end      if isempty(dragStartXPos) || isempty(dragStartYPos)      dragStartXPos = 50;   %% default value      dragStartYPos = 100;  %% default value   end      h.dragWinH = figure('Numbertitle', 'off', 'Name', 'Drag',...      'Resize','off','MenuBar','none','NextPlot','new', ...      'Tag','dragEditingWindow','Color','k',...      'Position',[dragStartXPos dragStartYPos fig_width fig_height]);      y_pos = fig_height-25;   uicontrol('Style','text','String','Drag Control', ...      'FontSize',fontsize,'Position',[5,y_pos+3,120,20])   y_pos = y_pos-32;      uicontrol('Style','Frame','Position',[4,y_pos-3,100,37])   uicontrol('Style','text','String',['Active' 13 'Window'],...      'FontSize',fontsize,'Position',[5,y_pos-2,60,35])   h.actWinH = uicontrol('Style','text','String',num2str(dragFigNum),...      'BackgroundColor','c','ForegroundColor','k',...      'FontSize',fontsize,'Position',[70,y_pos+2,30,26]);      y_pos = y_pos-25;   h.dragRB=gobjects;   uicontrol('Style','frame','Position',[3 y_pos-28 95 50])   h.dragRB(1) = uicontrol('Style', 'radio','Position',[5, y_pos, 90, 20],...      'String','   Drag on','Value',1,'FontSize',fontsize, ...      'UserData',h.dragRB,'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback',@(hObject,event) dragger('dragon'));   y_pos = y_pos-25;   h.dragRB(2) = uicontrol('Style','radio','Position',[5, y_pos, 90, 20],...      'String','   Drag off','Value',0,'FontSize',fontsize, ...      'UserData',h.dragRB,'BackgroundColor',GREY,'ForegroundColor','k',...      'Callback',@(hObject,event) dragger('dragoff'));      y_pos = y_pos-25;   h.axHoldH = uicontrol('Style','checkbox','Position',[5, y_pos, 90, 20],...      'String','Axis Hold','UserData',h.dragFig,'Value',axXLM(1),...      'FontSize',fontsize,'ForegroundColor',[0 0 0],...      'Callback',@(hObject,event) dragger('axHold'));      uicontrol('Style','frame','Position',[4, y_pos-77, 105,74]);   y_pos = y_pos-25;   h.dataLockX = 1;   h.dataLockXH = uicontrol('Style', 'checkbox',...      'Position',[5, y_pos, 90, 20],'Value',h.dataLockX,...      'String','X-Data Lock','UserData',h.dragFig,'FontSize',fontsize, ...      'Callback',@(hObject,event) dragger('dataLockX'));   y_pos = y_pos-25;   h.dataLockY = 0;   h.dataLockYH = uicontrol('Style','checkbox',...      'Position',[5, y_pos, 90, 20],'Value',h.dataLockY,...      'String','Y-Data Lock','UserData',h.dragFig,'FontSize',fontsize, ...      'Callback',@(hObject,event) dragger('dataLockY'));   y_pos = y_pos-25;   h.dataLockZ = 1;   h.dataLockZH = uicontrol('Style','checkbox',...      'Position',[5, y_pos, 90, 20],'Value',h.dataLockZ,...      'String','Z-Data Lock','UserData', h.dragFig,'FontSize',fontsize, ...      'Callback',@(hObject,event) dragger('dataLockZ'));      y_pos = y_pos-25;   %doneH =    uicontrol('Style','PushButton','Position',[5, y_pos, 50, 20],...      'String','Done','UserData',h.dragFig,'FontSize',fontsize, ...      'Callback',@(hObject,event) dragger('dragquit'));   %updH =    uicontrol('Style','PushButton','Position',[65, y_pos, 50, 20],...      'String','Refresh','UserData',h.dragFig,'FontSize',fontsize, ...      'Callback',@(hObject,event) dragger('refresh'));         figure(h.dragFig)   h.dragWinH.UserData=h;   dragger('dragon')   return      elseif strcmp(action, 'dragon')   h.dragRB(1).Value=1;   h.dragRB(2).Value=0;   % turn off drawing   if h.drawState      %disp('dragger sez: draw off')      draw('off')   end   figure(h.dragFig)   if (h.dragMsg)      disp('Object dragging active.')      disp('Type ''dragger'' again to stop object dragging.')   end   % initialize matrices   h.drag_hList=[]; %lineH = []; textH = [];   %h.hxl=[]; h.hyl=[]; h.htl=[];      % get all the lines, text & patches in the figure   % is column orientation correct?   h.hxl=NaN(numAxes,1);   h.hyl=NaN(numAxes,1);   h.hzl=NaN(numAxes,1);   for j=1:numAxes      lineH = findobj(ga(j),'type','line');      numLines = length(lineH); %#ok<NASGU>      textH = findobj(ga(j),'type','text');      numText = length(textH); %#ok<NASGU>      patchH = findobj(gca,'type','patch');      numPatch = length(patchH); %#ok<NASGU>      h.hxl(j) = ga(j).XLabel;  % handles      h.hyl(j) = ga(j).YLabel;  %  "  "      h.hzl(j) = ga(j).ZLabel;  %  "  "      h.htl(j) = ga(j).Title;   %  "  "      h.drag_hList =...         [h.drag_hList; lineH; textH; patchH];      %[h.drag_hList; lineH; textH; patchH; h.hxl(j); h.hyl(j); h.hzl(j); h.htl(j)];      % set 'XLabel', 'YLabel', 'ZLabel' & Title units to agree with units      % obtained from getting mouse position      %oldxlabunit(j,:) = pad(get(h.hxl(j),'Units'), 10);      %oldylabunit(j,:) = pad(get(h.hyl(j),'Units'), 10);      %oldzlabunit(j,:) = pad(get(h.hzl(j),'Units'), 10);      %oldtlabunit(j,:) = pad(get(h.htl(j),'Units'), 10);            %set( h.hxl(j), 'Units', 'data' );      %set( h.hyl(j), 'Units', 'data' );      %set( h.hzl(j), 'Units', 'data' );      %set( h.htl(j), 'Units', 'data' );      %ylm = get(ga(j), 'YlimMode');      %set(ga(j), 'YlimMode', 'auto');      %ytm = get(ga(j), 'YTickLabelMode');      %set(ga(j), 'YTickLabelMode', 'auto');   end   % set function calls for user actions   for i = 1:length(h.drag_hList)      h.drag_hList(i).ButtonDownFcn='draggy(''tggl'')';      h.drag_hList(i).Tag='';   end   h.drag_hList(1).ButtonDownFcn='draggy(''down'')';   h.drag_hList(1).Tag='dragThis';   h.dragRB(1).Value=1;   h.dragRB(2).Value=0;   h.dragState = 1;   h.dragWinH.UserData=h;   return      elseif strcmp(action, 'dragoff')   h.dragRB(1).Value=0;   h.dragRB(2).Value=1;   if (h.dragMsg)      disp('Object dragging is off.')   end   % if figure was closed, h.drag_hList values are invalid   try h.drag_hList(1).Tag;      h_valid = 1;   catch      h_valid = 0;   end   if h_valid      % clear user action functions      for i = 1:length(h.drag_hList)         h.drag_hList(i).ButtonDownFcn=[];         h.drag_hList(i).Tag='';      end   end %if h_valid      h.dragState = 0;   h.dragWinH.UserData=h;   return      elseif strcmp(action,'refresh')   h.dragFig=findHotW;   if ishandle(h.dragFig)      dragFigNumStr=num2str(h.dragFig.Number);   else      dragFigNumStr=num2str(h.dragFig);   end   h.actWinH.String=dragFigNumStr;   figure(h.dragFig)   h.dragWinH.UserData=h;   dragger('dragon')   return   elseif strcmp(action,'axHold')   figure(h.dragFig)   for k=1:length(ga)      h.dragFig.CurrentAxes=ga(k);      if h.axHoldH.Value         ga(k).XLimMode='manual';         ga(k).YLimMode='manual';         ga(k).ZLimMode='manual';      else         ga(k).XLimMode='auto';         ga(k).YLimMode='auto';         ga(k).ZLimMode='auto';      end   end   elseif strcmp(action,'h.dataLockX')   %figure(dragFig)   if h.dataLockXH.Value      h.dataLockX=1;   else      h.dataLockX=0;   end   elseif strcmp(action,'h.dataLockY')   %figure(dragFig)   if h.dataLockYH.Value      h.dataLockY=1;   else      h.dataLockY=0;   end   elseif strcmp(action,'h.dataLockZ')   %figure(dragFig)   if h.dataLockZH.Value      h.dataLockZ=1;   else      h.dataLockZ=0;   end   elseif strcmp(action, 'dragquit')   curdir=pwd;   dErrFlag = 0;   cd(pathsafe(matlabroot))   try cd(findomprefs)      startXYPos = h.dragWinH.Position;      if exist('startXYPos','var') && ~isempty(startXYPos)         dragStartXPos = startXYPos(1);         dragStartYPos = startXYPos(2);      end   catch      dErrFlag=1;   end   if ~dErrFlag, save dragPref.mat dragStartXPos dragStartYPos, end   cd(pathsafe(curdir))   dragger('dragoff')   close(get(gco,'parent'))   return   end %if strcmp(actionh.dragWinH.UserData=h;