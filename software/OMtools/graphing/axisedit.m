% axisedit.m:  change axis properties in a figure% Written by:  Jonathan Jacobs%              March 1997 - February 2006 (last mod: 02/16/06)% June 2019: cleaned and updated for HG2.%            Now resizeable and scrollable!function axisedit(gf,~,~)%% can we run?if isempty(get(0,'Child'))   disp('Nothing to edit, buddy.')   returnendif nargin==0   gf=findHotW;   if ~ishandle(gf)      disp('No valid plot window found.  Possible reasons:')      disp(' * You don''t have a figure window open.')      disp(' * You are trying to edit a Zoomtool window.')      disp(' * I am having a nervous breakdown.')      return   endend%if strcmp(gf.Tag,'EditingWindow')%   disp( 'Bring a graph window to the front and try again.')%   return%end% add editing tools to figure menum=OMmenu(gf); %#ok<NASGU>% check if the axis editing window is already open% if it is, bring it to the frontwNum = findwind('Axis editor','name');if ishandle(wNum)   figure(wNum)   returnend%% determine figure's content% d=drawable_area;scrsize = get(0,'Screensize');mBarHgt = 22;h.maxHgt = scrsize(4)-mBarHgt;h.maxWid = scrsize(3);% not every child in the figure is an axis.ch=gf.Children;numCh=length(ch);if numCh==0   disp('Nothing to edit, buddy.')   returnendcount = 0;tempga=gobjects(numCh,1);axpos=zeros(numCh,4);for ii=1:numCh   if strcmpi(ch(ii).Type,'axes')      count=count+1;      tempga(count)=ch(ii);      axpos(count,1:4)=tempga(count).Position;   endendif count==0, disp('No axes found. Quitting.'); return; end% howzabout a rudimentary sorting from top to bottom% and from left to right, in case we've got m x n axes?tempXY = axpos(:,1:2);[~,ind] = sort(tempXY(:,1));ind = flipud(ind);tempXY = tempXY(ind,:);tempga = tempga(ind);[~,ind] = sort(tempXY(:,2));ind = flipud(ind);ga = tempga(ind);numAxes = length(ga(ishandle(ga)));ga=ga(1:numAxes);% content tracking arraysh.axObjH=gobjects(20,numAxes+1);prop=zeros(10,numAxes);xticks=cell(numAxes);yticks=cell(numAxes);zticks=cell(numAxes);% is there a 3D plot?for ii=1:numAxes   azel=ga(ii).View;   if azel(1)==0      is3D=0;      numDim=2;   else      is3D=1;      numDim=3;   endendstartAx=1; stopAx=numAxes;numXYZLims = 4;propStr(1,:) = 'X Ticks  ';propStr(2,:) = 'X Grid   ';propStr(3,:) = 'Y Ticks  ';propStr(4,:) = 'Y Grid   ';if is3D   numXYZLims = 6;   propStr(5,:) = 'Z Ticks  ';   propStr(6,:) = 'Z Grid   ';endpropStr(7,:) = 'X Log/Lin';propStr(8,:) = 'Y Log/Lin';propStr(9,:) = 'Z Log/Lin';%% initial UI setupfontsize=11;txtBG='c'; % default FG/BG for editable text fieldstxtFG='k';BG=[0.75 0.75 0.75];g=grapconsts;h.g=g;f_climhi=65; %pixels above p1 topf_climlo=55; %pixels below p1 originf_rsrv=f_climhi+f_climlo;axContHt=110;content_height=axContHt*numAxes + 3;fig_height=content_height+f_rsrv;aeStartYHgt = 400;if is3D, fig_width=485;else,    fig_width=325;  endfig_width=fig_width+25; %for sliderh.fig_width=fig_width;% Set the window position. Check if the window is already open.% If not, try to read its last saved position from the pref file.% If we can't, place it at its default position.% Make sure that it will be drawn completely on the screen, move if needed.dErrFlag=0; fErrFlag=0;if ~exist('aeStartXPos','var'),aeStartXPos=[]; endif isempty(aeStartXPos)   curdir=pwd;   cd(pathsafe(matlabroot))   try    cd(findomprefs)   catch, dErrFlag=1; end   if dErrFlag      mkdir_stat=mkdir('omprefs');      if ~mkdir_stat         disp('** axisedit: Unable to create ''omprefs'' dir.')         disp('** You may continue, but prefs will not be saved.')      end   else      try    load aePrefs.mat aeStartXPos aeStartYPos aeStartYHgt      catch, fErrFlag=1; end      if fErrFlag         aeStartXPos = 50;         aeStartYPos = 100;         aeStartYHgt = 400;         save aePrefs.mat aeStartXPos aeStartYPos aeStartYHgt      end            % make sure that the window will be on the screen!      if aeStartXPos<1,aeStartXPos=1;end      if aeStartYPos<1,aeStartYPos=1;end      if (aeStartYPos+aeStartYHgt)>h.maxHgt         aeStartYPos=h.maxHgt-aeStartYHgt;      end      if (aeStartXPos+fig_width)>h.maxWid         aeStartXPos=h.maxWid-fig_width;      end   end   try    cd(pathsafe(curdir))   catch   endendif dErrFlag || fErrFlag   aeStartYHgt = 400;   aeStartXPos = 20;   aeStartYPos = (h.maxHgt-aeStartYHgt)/2;endfig_height=min(aeStartYHgt,fig_height);p1_height=fig_height-f_rsrv; %nn pix top for labels; nn bottom controlsp2_height=content_height;if ishandle(gf)   fignum=num2str(gf.Number);else   fignum=num2str(gf);end%% draw UI static content (labels,ops buttons)aeFig = figure('Position',[aeStartXPos, aeStartYPos, fig_width, fig_height],...   'Resize','on','Name', ['Axis editor: editing figure ' fignum],...   'NumberTitle','off','NextPlot','new',...   'MenuBar','none','Tag','control');p0=uipanel('Parent',aeFig,'Tag','p0','BackgroundColor',[0.94 0.94 0.94]);set(p0,'Units','pixels','Position',[4 fig_height-62 fig_width-6 60]);% fixed panel that holds the actual content panel.p1=uipanel('Parent',aeFig,'Tag','p1','BackgroundColor',[1 0 0]);set(p1,'Units','pixels','Position',[4 f_climlo fig_width-6 p1_height]);% put all scrollable content into panel2. scroll its pos within p1 using sp2=uipanel('Parent',p1,'Tag','p2','BackgroundColor',[0.94 0.94 0.94]);s=uicontrol('Style','Slider','Parent',p1,'Units','pixels',...   'Position',[fig_width-32 0 25 p1_height],'Value',0);% set slider for initial drawings.Max=content_height;s.Min=s.Max-p1_height;s.BackgroundColor=[0.66 0.66 0.66];s.Value=s.Min;%s_wid=s.Position(3);%set(p2,'Units','pixels','Position',[0 0 fig_width-s_wid+3 p2_height]);set(p2,'Units','pixels','Position',[0 0 fig_width p2_height]);% fancy callbacks!addlistener(s,'ContinuousValueChange',...   @(hObject,event) s_live(hObject,event,p2));aeFig.SizeChangedFcn      =@(hObject,event) resize(hObject,event,s);aeFig.WindowScrollWheelFcn=@(hObject,event) wheel(hObject,event,s);% create Figure BG color control & labelsfigcolr=gf.Color;color=whatcolor(figcolr);edFigBGcolr=color.bg;edFigFGcolr=color.fg;% create axis-specific controlsy_pos = 2;uicontrol('Parent',p0,'Style','text',...   'Position',[5 y_pos 75 20],'String','X Low');uicontrol('Parent',p0,'Style','text',...   'Position',[85 y_pos 75 20],'String','X High');uicontrol('Parent',p0,'Style','text',...   'Position',[165 y_pos 75 20],'String','Y Low');uicontrol('Parent',p0,'Style','text',...   'Position',[245 y_pos 75 20],'String','Y High');if is3D   uicontrol('Parent',p0,'Style','text',...      'Position',[285 y_pos 65 20],'String','Z Low');   uicontrol('Parent',p0,'Style','text',...      'Position',[355 y_pos 65 20],'String','Z High');endy_pos=30;uicontrol('Parent',p0,'Style','Frame',...   'Position',[4 y_pos-4 fig_width-70 27], ...   'BackgroundColor',[0.75 0.75 0.75]);uicontrol('Parent',p0,'Style','text','Position',[5 y_pos 140 20],...   'String','Figure background color','FontSize',fontsize,...   'BackgroundColor',[0.75 0.75 0.75]);h.aeColrH(numAxes+1)=uicontrol('Parent',p0,'Style','popup','Units','pixels',...   'BackgroundColor',edFigBGcolr,'ForeGroundColor',edFigFGcolr,...   'Position',[160 y_pos 120 20],...   'String',g.geColorStr,'FontSize',fontsize, ...   'HorizontalAlignment','center','Value',color.index,...   'UserData',ga(1),'Tag',mat2str([0 numAxes+1]),...   'Callback',@(src,eventdata) aEditAct(src,'colr'));figColr=gf.Color;if strcmp(figColr,'none') || all(figColr==[0 0 0]) || all(figColr==[.2 .2 .2])   invert=1;else   invert=0;endtemp=gf.InvertHardcopy;if strcmp(temp,'on')   invertPrint=1;else   invertPrint=0;end% invert checkboxesy_pos=5;%doneH =uicontrol('Parent',aeFig,'Style','push','Units','pixels',...   'Position',[10 y_pos 50 20],'String','Done',...   'UserData',aeFig, 'Tag', '[0 0]',...   'Callback',@(src,eventdata) aEditAct(src,'done'));   %'Callback','aEditAct(get(gco,''UserData''),get(gco,''Tag''),''done'')');h.invertAxPropH = uicontrol('Parent',aeFig,'Style','checkbox','Units','pixels',...   'BackgroundColor',[.66 .66 .66],'ForeGroundColor',[0 0 0],...   'Position',[140 y_pos 150 20],'Value',invert,...   'String','Invert background now','FontSize',fontsize, ...   'UserData',ga,'Tag', mat2str([11 numAxes+1]),...   'Callback',@(src,eventdata) aEditAct(src,'cbox'));   %'Callback','aEditAct(get(gco,''UserData''),get(gco,''Tag''),''cbox'')');h.dumpH = uicontrol('Parent',aeFig,'Style','push',...   'Units','pixels','Position',[70 y_pos 50 20],...   'String','h-dump','UserData',aeFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) hdump(src,eventdata));h.r_debugH = uicontrol('Parent',aeFig,'Style','checkbox',...   'Units','pixels','Position',[305 y_pos 40 20],...   'String','R','UserData',aeFig,'Tag','[0 0]');y_pos=y_pos+25;%updateH =uicontrol('Parent',aeFig,'Style','push','Units','pixels',...   'Position',[10 y_pos 50 20],'String','Refresh',...   'UserData',aeFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) aEditAct(src,'update'));   %'Callback','aEditAct(get(gco,''UserData''),get(gco,''Tag''),''update'')');h.maximizeH = uicontrol('Parent',aeFig,'Style','push',...   'Units','pixels','Position',[70 y_pos 50 20],...   'String','Maximize','UserData',aeFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) maximize(src,eventdata));h.invertHCH = uicontrol('Parent',aeFig,'Style','checkbox','Units','pixels',...   'BackgroundColor',[.66 .66 .66],'ForeGroundColor',[0 0 0],...   'Position',[140 y_pos 150 20],'Value', invertPrint,...   'String','White BG for print/export','FontSize',fontsize, ...   'UserData', ga, 'Tag', mat2str([12 numAxes+1]),...   'Callback',@(src,eventdata) aEditAct(src,'cbox'));h.s_debugH = uicontrol('Parent',aeFig,'Style','checkbox',...   'Units','pixels','Position',[305 y_pos 40 20],...   'String','S','UserData',aeFig,'Tag','[0 0]');%% draw UI dynamic content (per-axis edit controls)% axis propertiesfor jj=1:numAxes   chilH=ga(jj).Children;   xlabH=ga(jj).XLabel;   ylabH=ga(jj).YLabel;   zlabH=ga(jj).ZLabel;   h.axObjH(1:length(chilH)+3,jj)=[chilH; xlabH; ylabH; zlabH];      xtl=ga(jj).XTickLabel;   if isempty(xtl), prop(1,jj)=0;   else,            prop(1,jj)=1; end   xticks{jj}=ga(jj).XTick;      xgProp=ga(jj).XGrid;   if strcmpi(xgProp,'off'), prop(2,jj)=0;   else,                     prop(2,jj)=1; end      ytl=ga(jj).YTickLabel;   if isempty(ytl), prop(3,jj)=0;   else,            prop(3,jj)=1; end   yticks{jj}=ga(jj).YTick;      ygProp=ga(jj).YGrid;   if strcmp(ygProp,'off'), prop(4,jj)=0;   else,                    prop(4,jj)=1; end      xllProp=ga(jj).XScale;   if strcmpi(xllProp,'linear'), prop(7,jj)=0;   else,                         prop(7,jj)=1; end      yllProp=ga(jj).YScale;   if strcmpi(yllProp,'linear'), prop(8,jj)=0;   else,                         prop(8,jj)=1; end      if is3D      ztl=ga(jj).ZTickLabel;      if isempty(ztl), prop(5,jj)=0;      else,            prop(5,jj)=1; end      zticks{jj}=ga(jj).ZTick;            zgProp=ga(jj).ZGrid;      if strcmpi(zgProp,'off'), prop(6,jj)=0;      else,                     prop(6,jj)=1; end            zllProp=ga(jj).ZScale;      if strcmp(zllProp,'linear'), prop(9,jj)=0;      else,                        prop(9,jj)=1;      end   endendnax=1+stopAx-startAx;xyLims=zeros(nax,6);h.xyLimH=gobjects(nax,6);h.axPropH=gobjects(nax,6);h.aeBoxH=gobjects(nax);% Create line editing controls in the CONTENT PANEL (p2)y_pos=0; kk=0;y_pos=y_pos+3;for jj=stopAx:-1:startAx   % set up the uicontrols   kk=kk+1;   uicontrol('Parent',p2,'Style','Frame','BackgroundColor',[0.75 0.75 0.75],...      'Position',[2 y_pos 321+(is3D*160) 107]);         % set up the popup menu   axcolr=ga(jj).Color;   color=whatcolor(axcolr);   edAxBGcolr=color.bg;   edAxFGcolr=color.fg;      y_pos=y_pos+4;   uicontrol('Parent',p2,'Style','text','Position', [5 y_pos 100 20],...      'String','Background color:','FontSize',fontsize,...      'BackgroundColor',[0.75 0.75 0.75]);   h.aeColrH(jj) = uicontrol('Parent',p2,'Style','popup','Units','pixels',...      'BackgroundColor',edAxBGcolr,'ForeGroundColor',edAxFGcolr,...      'Position',[105 y_pos 120 20],...      'String',g.geColorStr,'FontSize',fontsize, ...      'HorizontalAlignment','center','Value',color.index,...      'UserData', ga(jj),'Tag', mat2str([1 jj]),...      'Callback',@(src,eventdata) aEditAct(src,'colr'));      isBox = strcmpi(ga(jj).Box,'on');   h.aeBoxH(jj) = uicontrol('Parent',p2,'Style','checkbox','Units','pixels',...      'BackgroundColor',BG,'ForeGroundColor','black',...      'Position',[225 y_pos 80 20],'Value',isBox,...      'String','Axis Box','FontSize',fontsize, ...      'UserData',ga(jj),'Tag', mat2str([10 jj]),...      'Callback',@(src,eventdata) aEditAct(src,'cbox'));    y_pos=y_pos+25;      xyLims(jj,1:2)=ga(jj).XLim;   xyLims(jj,3:4)=ga(jj).YLim;   if is3D, xyLims(jj,5:6)=ga(jj).ZLim; end      for ii=1:numDim      h.axPropH(6+ii,jj) = uicontrol('Parent',p2,'Style','checkbox','Units','pixels',...         'BackgroundColor',BG,'ForeGroundColor','black',...         'Position',[5+(ii-1)*160 y_pos 90 20],...         'Value', prop(6+ii,jj),'String',propStr(6+ii,:),'FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([6+ii jj]),...         'Callback',@(src,eventdata) aEditAct(src,'cbox'));         %'Callback','aEditAct(get(gco,''UserData''),get(gco,''Tag''),''cbox'')');   end      y_pos=y_pos+25;   for ii=1:numXYZLims      h.axPropH(ii,jj) = uicontrol('Parent',p2,'Style','checkbox',...         'Units','pixels','BackgroundColor',BG,'ForeGroundColor','black',...         'Position',[5+(ii-1)*80 y_pos 75 20],'Value', prop(ii,jj),...         'String',propStr(ii,:),'FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii jj]),...         'Callback',@(src,eventdata) aEditAct(src,'cbox'));         %'Callback','aEditAct(get(gco,''UserData''),get(gco,''Tag''),''cbox'')');   end      % axis limits -- editable text   y_pos=y_pos+25;   for ii=1:numXYZLims      h.xyLimH(ii,jj) = uicontrol('Parent',p2,'Style','edit',...         'Units','pixels','BackgroundColor',txtBG,'ForeGroundColor',txtFG,...         'Position',[5+(ii-1)*80 y_pos-1 75 25],...         'String', num2str(xyLims(jj,ii)),'FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii jj]),...         'Callback',@(src,eventdata) aEditAct(src,'lims'));         %'Callback','aEditAct(get(gco,''UserData''),get(gco,''Tag''),''lims'')');   end      y_pos=axContHt*kk;   y_pos=y_pos+3;enddrawnow% place slider at 100%p2pos=p2.Position;p2pos(1)=0;p2.Position=p2pos;s.Value=s.Max;s.UserData=s.Value;h.p2=p2; h.p1=p1; h.p0=p0; h.s=s;h.f_rsrv=f_rsrv;h.prev_ht=fig_height;aeFig.UserData=h;s_live(s,[],p2)%bring graph back to the frontaddfocus(aeFig,@aEditAct)end %function axisedit%% %%%%%%%%%% live scrolling %%%%%%%%%%% %%function s_live(s,~,content_panel)%p2=findobj(src.Children,'Type','uipanel','Tag','p2');p2p=content_panel.Position;p2p_ht=fix(p2p(4));p1_panel=content_panel.Parent;p1p=p1_panel.Position;p1p_ht=fix(p1p(4));aeFig = s.Parent.Parent;h=aeFig.UserData;s_debug=h.s_debugH.Value;p2p1diff = p2p_ht-p1p_ht;p2p1rat  = p2p_ht/p1p_ht;s.Min=p2p_ht-p2p1diff;if p2p1diff==0   s.Visible='off';   s.Value=s.Max;   returnelseif 1/p2p1rat>0.9   s.SliderStep=[0.01 50];elseif 1/p2p1rat>0.6   s.SliderStep=[0.01 10];elseif 1/p2p1rat>0.3   s.SliderStep=[0.01 2.5];elseif 1/p2p1rat>0.05   s.SliderStep=[0.01 1];endsldr_val=s.Value;sldr_val=min(s.Max,sldr_val);sldr_val=max(s.Min,sldr_val);sldr_pct=(sldr_val/(s.Max-s.Min)) * 1/p2p1rat;s.UserData=sldr_val;s.Visible='on';% calc new p2 positioncont_top = fix(sldr_val);cont_bot = fix(sldr_val-p1p_ht);if cont_bot<0   cont_bot=0;end%cont_bot=max(cont_bot,p1p_ht-p2p_ht);p2p_top = fix(sldr_pct*cont_top);p2p_top = min(p2p_top,p2p_ht);p2p_bot = fix(cont_top-p2p_ht);p2p_bot = max(p2p_bot,p2p_ht-p1p_ht);if s_debug   fprintf('s: [lims],val,pct = [%g %g], %g, (%.2g)\r', ...      s.Max,s.Min,sldr_val,sldr_pct)   fprintf('s: Slider step    = [%g %g]\r', s.SliderStep)   fprintf('s: p2p,p1p_ht     = %g, %g\r', p2p_ht, p1p_ht)   fprintf('s: p2-p1, p2/p1   = %g, %.2g  (%.2g)\r', p2p1diff, p2p1rat, 1/p2p1rat)   fprintf('s: p2p_top,bot    = [%d  %d]\r', p2p_top,p2p_bot)   fprintf('s: cont_top,bot   = [%d  %d]\r', cont_top,cont_bot)   fprintf( '\r' )endcontent_panel.Position=[p2p(1) -cont_bot p2p(3) p2p_ht];drawnowend %function s_live%% %%%%%%%%%% scroll wheel %%%%%%%%%% %%function wheel(hObject,event,s)s1=event.VerticalScrollCount;%fprintf('Scroll: %d\r',s1);p2=hObject.UserData.p2;wheelval=s.Value-(2.5*s1); % scroll 'acceleration'. set purely by taste.if wheelval>s.Max   wheelval=s.Max;elseif wheelval<s.Min   wheelval=s.Min;ends.Value=wheelval;s_live(s,[],p2)end %function wheel%% %%%%%%%%%% live resizing %%%%%%%%%% %%function resize(src,~,s)scrsize = get(0,'Screensize');mBarHgt = 22;  % for macOS. any way to tell dock height?maxHgt = scrsize(4)-mBarHgt;% be more clever about how to resize.% check for resize direction (+ or -)% check whether fig was clicked at top or bottom% %%% does not work cleanly: ignores titlebar click pos. %%%c_loc = src.CurrentPoint;if c_loc(2)<25 && c_loc(2)>0   a='bottom'; %#ok<NASGU>else   a='top'; %#ok<NASGU> % or so we assumeend%fprintf('Clicked: %s (%d)\r',a,c_loc(2));src.CurrentPoint=[-1 -1];h=src.UserData;r_debug=h.r_debugH.Value;prev_sval=s.UserData;prev_ht=h.prev_ht;fpos=src.Position;newf_ht=fix(fpos(4));fpos(3)=h.fig_width; % do not allow width changeif newf_ht>prev_ht   growing=1; %#ok<NASGU> %disp('growing')else   growing=0; %#ok<NASGU> %disp('shrinking')endp0=findobj(src.Children,'Type','uipanel','Tag','p0');p1=findobj(src.Children,'Type','uipanel','Tag','p1');p2=findobj(src.Children,'Type','uipanel','Tag','p2');p0p=p0.Position;p1p=p1.Position;p2p=p2.Position;% redraw p0 panel (contains top labels)p0p(2)=newf_ht-p0p(4)-2;p0.Position=p0p;% window can only add content to the top, try to split diff% As we drag, we may reach either top or bottom limit. in that case,% only add to the non-limited end (until it reaches its limit)p2p_bot  = fix(p2p(2));p2p_ht   = fix(p2p(4)); % constant. is calced during GUI initp2p_top  = p2p_bot+p2p_ht;p1p_ht   = min(newf_ht-h.f_rsrv,p2p_ht);  %subtract 30pix bot,35pix topp2p1diff = p2p_ht-p1p_ht;p2p1rat  = p2p_ht/p1p_ht;if p2p1diff<0   disp('!!! p2p1diff < 0 !!!')   keyboardend% resize p1 to fit new fig heightp1p_ht=min(p2p_ht,p1p_ht);p1p_ht=max(p1p_ht,100);p1.Position=[p1p(1) p1p(2) p1p(3) p1p_ht];% keep fig window within size limitsfpos(4)=p1p_ht+h.f_rsrv;fpos(4)=min(fpos(4),maxHgt);src.Position=fpos;h.prev_ht=newf_ht;% calc content's top and bottomcont_bot = max(p2p_top-p1p_ht-p2p1diff,0);cont_top = min(cont_bot+p1p_ht,p2p_ht);% readjust p2 origin to fill p1p2p_bot = p2p_top-p1p_ht;p2.Position=[p2p(1) p2p_bot p2p(3) p2p_ht];% new values to use/store%s.Max=p1p_ht;s.UserData=s.Value; %current slider vals.Position(4)=p1p_ht;% ??? slider value will not change. use it to keep current view ???% centered if possible. See below for limitations.s.Min=s.Max-p1p_ht;sval=fix(s.Value);spct=sval/(s.Max-s.Min)*1/p2p1rat;if r_debug==1   fprintf('r: Old,new fig ht = %d, %d\r',       prev_ht,newf_ht)   fprintf('r: Prev sldr val  = %g\r',           prev_sval)   fprintf('r: New  sldr val  = %g\r',           s.Value)   fprintf('r: [lims],val,pct = [%g %g], %g, (%.2g)\r', ...      fix(s.Max),fix(s.Min),sval,spct)   fprintf('r: p2,p1 hts      = %d, %d\r',           p2p_ht,p1p_ht)   fprintf('r: p2-p1,p2/p1    = %d, %.2g  (%.2g)\r', p2p1diff,p2p1rat, 1/p2p1rat)   fprintf('r: p2p_top,bot    = [%d  %d]\r',         p2p_top,p2p_bot)   fprintf('r: cont_top,bot   = [%d  %d]\r',         cont_top,cont_bot)   fprintf( '\r' )ends_live(s,[],p2)end %function resize%% %%%%%%%%%% handle dump %%%%%%%%%% %%function hdump(src,~)h=src.Parent.UserData;assignin('base','aehands',h)disp('linedit handles saved in base as "aehands"')end %function maximize%% %%%%%%%%%% maximize control window height %%%%%%%%%% %%function maximize(src,~)f=src.Parent;h=src.Parent.UserData;p1=h.p1;p2=h.p2;s=h.s;figp=f.Position;p1p=p1.Position;p2p=p2.Position;if p1p(4)-p2p(4)==0   %disp('already maximized')   returnendf_maxht= p2p(4)+h.f_rsrv; % fig_ht MUST <= content ht + fig's rsrvr spacef_maxht = min( h.maxHgt, f_maxht );new_ftop = h.maxHgt-(h.maxHgt-f_maxht)/2;new_fbot = new_ftop-f_maxht;figp(2)=new_fbot;figp(4)=new_ftop-new_fbot;p1p(4)=figp(4)-h.f_rsrv;p1.Position=p1p;p2p(2)=p2p(4)-p1p(4);p2.Position=p2p;f.Position=figp;s_live(s,[],p2)end %function maximize