MATLAB Graphing Utilities.31 October 2002Jonathan Jacobsjxj24@po.cwru.eduIntroduction:MATLAB has got to be one of the most incredible scientific computing environments of all times.  There is nothing it can't do.  Except easily make presentation-quality graphs.I wrote these utilities to address this shortcoming.  While not an exhaustive set, they fill most of the needs I have had while trying to make graphs for papers, posters and slides.  With them you can click and drag to draw simple objects in a graph, change the position of any graph objects (text, data, surface and patch objects), and change their attributes (text, color, font, font size, line style and thickness, and so on and so forth).As well, you can turn grids and tick marks on and off, adjust axis limits, page size and orientation, and position of a graph on the page.  It is no secret that most of these tasks can be performed by anyone with a passing familiarity with the handle graphics features of MATLAB.  (MATLAB has a "Graphics Properties Editor" that lets you examine and change any handle graphics value, but I find it slow, clumsy and somewhat too non-intuitive for my taste.)  These utilities just make this simpler.  (I highly recommend Patrick Marchand's book "Graphics and GUIs with MATLAB" from CRC press.  It is quite possibly the best way to learn handle graphics, and even comes with a disk of useful stuff, including a GUI maker named, appropriately enough "GUIMaker.")All these functions should work with either MATLAB 5.x and (hopefully) MATLAB 6.x.  I developed and tested these files on both a Mac and on a Windoze box, and therefore they work equally well on both platforms.  Most of the features will also work with UNIX, except for defining custom colors and changing fonts -- UISETCOLOR and UISETFONT are not implemented.  Oh, yeah one other thing: UNIX uses a case-sensitive filesystem.  While I don't think that this is really smart, I tried to be consistent in making function calls in my m-files. I compressed these files with "Stuffit," which is available for both platforms.  Furthermore, I chose to post them in Macintosh text format [CR] rather than DOS text format [CR LF], but any good text editor or translator utility will let you use them under winblows.  If you like these utilities, you might also take a look at "Zoomtool", a fantastic program written by Dennis Brown (browndw@ece.nps.navy.mil), and shamelessly modified by yours truly, now available at the website listed below.  These utilities and Zoomtool coexist peacefully , and give appropriate warnings if you try and make them do something they don't want to do.If you didn't find these files on the Mathworks site, let me make a quick plug for that site.  Point your browser to <http://www.mathworks.com/>, or (if you don't care for such newfangled stuff), you can go to their FTP server at <ftp://www.mathworks.com/>.  Here you will find the motherlode of cool stuff written by MATLAB devotees just like yourself. (Perhaps this will inspire you?)These files (and some others) are be available by at: <http://www.omlab.org/OMLAB_page/software/software.html>Contents:DRAGGER.M:Double-click on an object and it becomes draggable.  Dragger can be turned on and off without having to close and reopen it.  Furthermore, it has been written to interact properly with DRAW.M (the drawing program, if you hadn't guessed).  When one is active, the other is disabled.  DRAGGER, like most of the other utilities, has an "UPDATE" button.  If you leave DRAGGER open while adding objects to a graph you need to click this button so that DRAGGER knows of their existence.  If you don't, nothing catastrophic will happen; you just won't be able to drag these new objects.DRAGGY.M:This is the actual dragging code.  DRAGGER is simply the user interface.  You do not call DRAGGY -- DRAGGER does.  (Most of the utilities I wrote follow this pattern: Graphic front end --> implementation engine.  It just seemed the easiest way to work.)DRAW.M:Draw lines, arrows, rectangles and two sorts of circles (ones that are are "truly" circular, i.e. based on your axis values; and ones that APPEAR circular even if your axes are not of the same scale) by clicking and dragging.  DRAW has been written to interact properly with DRAGGER (the dragging program discussed above) so that if one is made active, the other is disabled.  (If this were not so, the result would be a _disaster_, trust me.)gDRAW.M:The drawing engine called by DRAW.  MYARROW.M:Called by gDRAW, but is also a stand-alone routine that works in either ML4 or ML5.COLRPICK.M:A bare-bones, slider-based GUI to select colors by RGB value.  As you drag the slider (or type a value in the editable-text box), the sample color changes accordingly.  I wrote this for UNIX users, who don't have "UISETCOLOR" available.cPICKACT.M:The back end called by COLRPICK.M.LINEDIT.M:Checks what version of MATLAB is running, and then calls LINEDIT4 or LINEDIT5 accordingly.LINEDIT(4/5).M:Allows you to change the color, line style, line width and marker size of any line or patch object.  You can also delete unwanted lines.  If you add any objects to the graph after invoking linedit, simply click the "Update" button to be able to edit them.lEDITACT(4/5).M:The editing engine called by LINEDIT.TEXTEDIT.M:Allows you to change the font size, color, orientation, and content of any text strings in a graph.  This includes x- and y-labels and the title.  You can also delete any text object.  If you add any objects to the graph after invoking textedit, simply click the "Update" button to be able to edit them.tEDITACT.M:The editing engine called by TEXTEDIT.POSEDIT.M:Allows you to edit the figure size, location and measurement units (inches, centimeters, pixels or normalized) on the page, as well as the page orientation (i.e. "portrait" vs "landscape"), size and measurement units.pEDITACT.MThe editing engine called by POSEDIT.AXISEDIT.M:Allows you to edit the axis properties: X,Y Low; X,Y High; X,Y Grid; X,Y Ticks.  Also lets you invert the screen colors so that black is white and white is black.  (Philosophers have tried to achieve this for _years_!)aEDITACT.M:The editing engine called by AXISEDIT.FINDME.M:findHotW.M:These are called by the editing functions to find figure windows.  FINDME finds windows by their 'Tag' object, and FINDHOTW finds the frontmost window that is _not_ an editing window.KILLOBJ.M:Allows you to delete the current object.  Be careful -- it is possible to delete an entire graph.  For this reason KILLOBJ asks you to confirm the deletion before acting.SAVEFIG.M:LOADFIG.M:These utilities were originally written by Jorg Heckenbach (heckenbach@fgan.de).  They are on the FTP site.  I have modified them slightly (a minor challenge, as his variables names are in German), but the work is almost entirely his.  As their names suggest, they are used to save and then reload MATLAB figures.  An undocumented feature of MATLAB 4.2 is its ability to "print" graphs to m-files.  This is now a fully supported feature of MATLAB 5.  I have added this to Jorg's code.  NOTE: ML5 can (usually) read ML4-format saved figures, but NOT when saved in Jorg's format.  And ML4 CANNOT read ML5-format saved figures.  (Jorg's format does NOT work under ML5.)WSIWYG.M:Resizes the graph to show how it will look when printed, or forces the graph to print as it appears on the screen.  The code comes from Patrick Marchand's book (mentioned above).YANKDATA.M:SETDATA.M:Allow you to extract the data from any graph object, or to replace it with data of the same dimensions.ROTPLOT.M:Short for "rotate plot," ROTPLOT will let you rotate graphs in 3D, and will also let you zoom in or out, and change the axis limits manually.  WARNING: this duplicates functionality in AXISEDIT, so be sure to make copious use of the "UPDATE" buttons if you have both utilities open!ROTBUTT.M:ZOOMIN.M:ZOOMOUT.M:Called by ROTPLOT.  ZOOMIN and ZOOMOUT are also stand-alone functions.GRAPTEST.M:A test graph.  Draws two subplots.  I used it for testing and debugging.GRAPCOPY.M:Copy a graph from one set of axes to another.  Both the source and destination must be available before running this function.  GRAPCOPY recognizes lines, surfaces, patches and text.  Particularly useful when you want to extract one graph from a set of subplots, or create subplots from existing graphs.OBJCOPY.M:GRAPCOPY's little brother.  It will just copy one object (line, surface, patch or text) from a graph, rather than the whole graph.  Limitations:Because of the way MATLAB handles graph windows, it can be difficult to get true WYSIWYG when plotting multiple graphs in one window.  (Scrolling bars would be really helpful, guys.  Hint.)  I find that it is often easier to generate graphs one at a time, and then copy and paste them into a graphics program where you can then arrange them to your heart's delight.  As this solution seems to work very well for me, I do not expect to push the issue.Some objects have their erase mode set to 'normal' while others are 'xor'.  This leads to somewhat jerky redraws during dragging, but unfortunately I can do nothing about it.  This is due to a bug in MATLAB version 4.2 that pops up during refresh of 'xor' objects.  If you like, go into the code and change things around and see what happens.Bugs:I, and a few of my friends and coworkers, have been using these tools for almost eight years now, and we have caught all sorts of "undocumented features."  We have used them to produce figures and slides for many papers and talks, with great ease and success.  However, I am sure that at least one of you will find a way to break at least one of these programs.  If you come across anything strange, you can contact me by e-mail or snail mail at the addresses listed below.-------------------------------------------How to contact me:Jonathan Jacobsjxj24@cwru.eduOcular Motor Neurophysiology LaboratoryVA Medical Center   W(151)10701 East Blvd.Cleveland, OH  44106