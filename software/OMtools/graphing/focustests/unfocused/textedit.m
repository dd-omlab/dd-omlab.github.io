% textedit.m:  change/delete text properties in a figure% Written by:  Jonathan Jacobs%              March 1997 - June 2019  (last mod: 06/03/19)% 2016: big rewrite for HG2% 2019: Now resizeable and scrollable!function textedit(gf,~,~)%% can we run?if nargin==0, gf=findHotW; endif ~ishandle(gf)   disp('No valid plot window found.  Possible reasons:')   disp(' * You don''t have a figure window open.')   disp(' * You are trying to edit a Zoomtool window.')   disp(' * The Figure''s objects were set to be invisible.')   disp(' * I am having a nervous breakdown.')   yorn=input('Is there really an open figure? ','s');   if strcmpi(yorn,'y')      disp('MATLAB may have been set to have invisible components.')      yorn=input('I can try to read it anyway.  Would you like me to try? ','s');      if strcmpi(yorn,'y')         set(0,'ShowHiddenHandles','on')      else         disp('textedit canceled.')         return      end   else      return   endend %if ishandleif strcmp(gf.Tag,'EditingWindow')   disp('Bring a plot window to the front and try again.')   returnend% add editing tools to figure menum=OMmenu(gf); %#ok<NASGU>% check if the text editing window is already open% if it is, bring it to the frontwNum=findme('textEditingWindow');if ishandle(wNum),figure(wNum);return;end%% determine figure's content% d=drawable_area;scrsize = get(0,'Screensize');mBarHgt = 22;h.maxHgt = scrsize(4)-mBarHgt;h.maxWid = scrsize(3);% not every child in the figure is an axis.ch=gf.Children;numCh=length(ch);if numCh==0   disp('Nothing to edit, dude.')   returnendcount=0;tempga=gobjects(numCh,1);axpos=zeros(numCh,1);for ii=1:numCh   if strcmpi(ch(ii).Type,'axes')      count=count+1;      tempga(count)=ch(ii);      axpos(count,1:4)=tempga(count).Position;   endendif ~count, disp('No axes found. Quitting.'); return; end% howzabout a rudimentary sorting from top to bottom% and from left to right, in case we've got m x n axes?tempXY = axpos(:,1:2);[~,ind] = sort(tempXY(:,1));ind = flipud(ind);tempXY = tempXY(ind,:);tempga = tempga(ind);[~,ind] = sort(tempXY(:,2));ind = flipud(ind);ga = tempga(ind);numAxes=count;% content tracking arraysh.textH = gobjects(20,numAxes);numLabels = zeros(numAxes,1);numText = zeros(numAxes,1);numObj = zeros(numAxes,1);startObj = zeros(numAxes,1);stopObj = zeros(numAxes,1);for k = 1:numAxes   if ~ishandle(ga(k)), continue; end   % always exist   h.textH(1,k) = ga(k).Title;   h.textH(2,k) = ga(k).XLabel;   h.textH(3,k) = ga(k).YLabel;   h.textH(4,k) = ga(k).ZLabel;   numLabels(k) = 4;   childList=ga(k).Children;   tempH=findobj(childList,'type','text');   numText(k)=length(tempH);   if numText(k)>0      for xx=1:length(tempH)         h.textH(numLabels(k)+xx,k) = tempH(xx);      end   end   numText(k) = numText(k)+numLabels(k);   numObj(k)  = numText(k);   startObj(k) = 1;   stopObj(k) = numText(k);end%% initial UI setupfontsize=11;txtBG='c'; % default FG/BG for editable text fieldstxtFG='k';g=grapconsts;h.g=g;pop_wid = 115;ctrl_height = 30;fig_width = 570;f.fig_width = fig_width;content_height = ctrl_height*sum(numText) + 10*numAxes;teStartYHgt = 400;% 50pix top labels & controls; 30 bottom 'Done','Update'f_climlo = 30; %pixels below p1 originf_climhi = 50; %pixels above p1 topf_rsrv= f_climlo + f_climhi;% Set the window position. Check if the window is already open.% If not, try to read its last saved position from the pref file.  % If we can't, place it at its default position.% Make sure that it will be drawn completely on the screen, move if needed.dErrFlag=0; fErrFlag=0;if ~exist('teStartXPos','var'),teStartXPos=[]; endif isempty(teStartXPos)   curdir=pwd;   cd(pathsafe(matlabroot))   try    cd(findomprefs)   catch, dErrFlag=1;   end   if dErrFlag      mkdir_stat = mkdir('omprefs');      if ~mkdir_stat         disp('** textedit: Unable to create ''omprefs'' dir.')         disp('** You may continue, but prefs will not be saved.')      end   else      try    load tePrefs.mat teStartXPos teStartYPos teStartYHgt      catch, fErrFlag=1; end      if fErrFlag         teStartXPos = 50;         teStartYPos = 100;         teStartYHgt = 400;         save tePrefs.mat teStartXPos teStartYPos teStartYHgt      end            % make sure that the window will be on the screen!      if teStartXPos<1,teStartXPos=1;end      if teStartYPos<1,teStartYPos=1;end      if (teStartYPos+teStartYHgt)>h.maxHgt         teStartYPos=h.maxHgt-teStartYHgt;      end      if teStartXPos+fig_width>h.maxWid         teStartXPos=h.maxWid-fig_width;      end   end   cd(pathsafe(curdir))endif dErrFlag || fErrFlag   teStartXPos=20;   teStartYPos=(h.maxHgt-teStartYHgt)/2;endfig_height=min(teStartYHgt,content_height+f_rsrv);p1_height=fig_height-f_rsrv; %50 pix top for labels; 30 bottom controlsif ishandle(gf)   fignum=num2str(gf.Number);else   fignum=num2str(gf);end%% draw UI static content (labels,ops buttons)teFig = figure('pos',[teStartXPos, teStartYPos, fig_width, fig_height],...   'Resize','on','Name',['Text editor: editing figure ' fignum],...   'NumberTitle','off','MenuBar','none','Color',[0.94 0.94 0.94],...   'NextPlot','new','Tag','textEditingWindow');p0=uipanel('Parent',teFig,'Tag','p0','BackgroundColor',[0.94 0.94 0.94]);set(p0,'Units','pixels','Position',[202 fig_height-50 350 45]);% fixed panel that holds the actual content panel.p1=uipanel('Parent',teFig,'Tag','p1','BackgroundColor',[1 0 0]);set(p1,'Units','pixels','Position',[5 f_climlo fig_width p1_height]);% put all scrollable content into panel2. scroll its pos within p1 using sp2=uipanel('Parent',p1,'Tag','p2','BackgroundColor',[0.94 0.94 0.94]);set(p2,'Units','pixels','Position',[5 0 fig_width-5 content_height]);s=uicontrol('Style','Slider','Parent',p1,'Units','normalized',...   'Position',[0.94 0 0.05 1],'Value',0);% set slider for initial drawings.Max=content_height;s.Min=s.Max-p1_height;s.BackgroundColor=[0.66 0.66 0.66];s.Value=s.Min;% fancy callbacks!addlistener(s,'ContinuousValueChange',...   @(hObject,event) s_live(hObject,event,p2));teFig.SizeChangedFcn      =@(hObject,event) resize(hObject,event,s);teFig.WindowScrollWheelFcn=@(hObject,event) wheel(hObject,event,s);% set up the labelsuicontrol('Parent',p0,'Style','text','Units','pixels',...   'Position',[165 25 35 20],'String','Size');uicontrol('Parent',p0,'Style','text','Units','pixels',...   'Position',[200 25 38 20],'String','Angle');uicontrol('Parent',p0,'Style','text','Units','pixels',...   'Position',[240 25 80 20],'String','Color');% axis font properties apply to all axes in a figure?uicontrol('Parent',p0,'Style','text','Units','pixels',...   'Position',[5 5 110 20],...   'String','Tick Labels','FontSize',fontsize, ...   'BackgroundColor','g');h.edTaxFontH = uicontrol('Parent',p0,'Style','push','Units','pixels',...   'Position',[124 5 35 25],'HorizontalAlignment','center',...   'String','Font','FontSize',fontsize, ...   'UserData',ga(1),'Tag',mat2str([0,0]),...   'Callback',@(src,eventdata) tEditAct(src,'axFont'));   %'tEditAct(get(gco,''UserData''),get(gco,''Tag''),''axFont'')');h.edTaxFSzH = uicontrol('Parent',p0,'Style','edit','Units','pixels',...   'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...   'Position',[164 5 35 25],'HorizontalAlignment','center',...   'String',num2str(get(ga(1),'FontSize')),'FontSize',fontsize, ...   'UserData',ga(1),'Tag',mat2str([0,0]),...   'Callback',@(src,eventdata) tEditAct(src,'axFontS'));tcolr = ga(1).XColor;color=whatcolor(tcolr);h.edTaxColrH = uicontrol('Parent',p0,'Style','popup','Units','pixels',...   'BackgroundColor',color.bg,'ForeGroundColor',color.fg,...   'Position',[232 2  115 25],'String',color.colorlist,...   'FontSize',fontsize,'HorizontalAlignment','center',...   'Value', color.index,'UserData',ga(1),'Tag',mat2str([0,0]),...   'Callback',@(src,eventdata) tEditAct(src,'axColr'));% Create the DONE, RELOAD & MAXIMIZE controls into the FIGURE windowy_pos=6;h.refreshH = uicontrol('Parent',teFig,'Style','push',...   'Units','pixels','Position',[15 y_pos 50 20],...   'String','Refresh','UserData',teFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) tEditAct(src,'refresh'));h.maximizeH = uicontrol('Parent',teFig,'Style','push',...   'Units','pixels','Position',[75 y_pos 50 20],...   'String','Maximize','UserData',teFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) maximize(src,eventdata));h.doneH = uicontrol('Parent',teFig,'Style','push',...   'Units','pixels','Position',[145 y_pos 50 20],...   'String','Done','UserData',teFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) tEditAct(src,'done'));h.r_debugH = uicontrol('Parent',teFig,'Style','checkbox',...   'Units','pixels','Position',[260 y_pos 40 20],...   'String','R','UserData',teFig,'Tag','[0 0]');h.s_debugH = uicontrol('Parent',teFig,'Style','checkbox',...   'Units','pixels','Position',[302 y_pos 40 20],...   'String','S','UserData',teFig,'Tag','[0 0]');h.dumpH = uicontrol('Parent',teFig,'Style','push',...   'Units','pixels','Position',[360 y_pos 50 20],...   'String','h-dump','UserData',teFig,'Tag','[0 0]',...   'Callback',@(src,eventdata) hdump(src,eventdata));%% draw UI dynamic content (per-axis edit controls)% Create text editing controls in the CONTENT PANEL (p2)y_pos=5;curr_cont_top=p1_height;txyz={'T';'X';'Y';'Z'};for jj = numAxes:-1:1   ax_top=y_pos+ctrl_height+10;   uicontrol('Parent',p2,'Style','Frame','BackgroundColor',[0.75 0.75 0.75], ...      'Position', [7 y_pos-2 535 numText(jj)*ctrl_height])   for ii=stopObj(jj):-1:startObj(jj)      h.edTxtH(ii,jj) = uicontrol('Parent',p2,'Style','edit',...         'Units','pixels','Position',[10 y_pos 305 25],...         'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...         'String',h.textH(ii,jj).String,'FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) tEditAct(src,'str'));      if ii<=4         h.edAxLabelH=uicontrol('Parent',p2,'Style','text',...            'Position',[293 y_pos+2 20 21],'String',txyz(ii),...            'BackGroundColor',[.8 .8 .8]);      end            h.edTFontH(ii,jj) = uicontrol('Parent',p2,'Style','push',...         'Units','pixels','Position',[320 y_pos 35 25],...         'HorizontalAlignment','center','String','Font','FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) tEditAct(src,'font'));            h.edTFSzH(ii,jj) = uicontrol('Parent',p2,'Style','edit',...         'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...         'Units','pixels','Position',[360 y_pos 35 25],...         'HorizontalAlignment','center',...         'String',num2str(h.textH(ii,jj).FontSize),'FontSize',fontsize, ...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) tEditAct(src,'fontS'));            h.edTRotH(ii,jj) = uicontrol('Parent',p2,'Style','edit',...         'BackgroundColor',txtBG,'ForeGroundColor',txtFG,...         'Units','pixels','Position',[400 y_pos 30 25],...         'HorizontalAlignment','center','FontSize',fontsize,...         'String',num2str(get(h.textH(ii,jj),'Rotation')),...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) tEditAct(src,'rot'));      tcolr=h.textH(ii,jj).Color;      color=whatcolor(tcolr);      h.edTColrH(ii,jj) = uicontrol('Parent',p2,'Style','popup',...         'Units','pixels','Position',[430 y_pos+3 pop_wid 20],...         'String',g.geColorStr,'FontSize',fontsize, ...         'BackgroundColor',color.bg,'ForeGroundColor',color.fg,...         'HorizontalAlignment','center','Value', color.index,...         'UserData',ga(jj),'Tag',mat2str([ii,jj]),...         'Callback',@(src,eventdata) tEditAct(src,'colr'));            if ii>numLabels(jj)         h.edTDelH(ii,jj) = uicontrol('Parent',p2,'Style','push',...            'Units','pixels','Position',[288 y_pos+2 25 20],...            'String','Del','FontSize',fontsize, ...            'UserData',ga(jj),'Tag',mat2str([ii,jj]),...            'Callback',@(src,eventdata) tEditAct(src,'delete'));      else         h.edTDelH(ii,jj)=gobjects;      end            y_pos=y_pos+ctrl_height;      if ax_top>=curr_cont_top         curr_cont_top=min(content_height,ax_top);         curr_p2=p2.Position;         curr_p2(2)=max(curr_p2(2)-60,(p1_height-content_height));         curr_p2(4)=curr_p2(4);         p2.Position=curr_p2;      end         end %for ii=stopObj    y_pos=y_pos+10;end %for jj=numaxesp2pos=p2.Position;p2pos(1)=0;p2.Position=p2pos;s.Value=s.Max;s.UserData=s.Value;h.p2=p2; h.p1=p1; h.p0=p0; h.s=s; h.f_rsrv=f_rsrv;h.prev_ht=fig_height;teFig.UserData=h;s_live(s,[],p2)% bring graph back to the frontfigure(gf)end %function textedit%% %%%%%%%%%% live scrolling %%%%%%%%%%% %%function s_live(s,~,content_panel)p2p=content_panel.Position;p2p_ht=fix(p2p(4));p1_panel=content_panel.Parent;p1p=p1_panel.Position;p1p_ht=fix(p1p(4));teFig = s.Parent.Parent;h=teFig.UserData;s_debug=h.s_debugH.Value;p2p1diff = p2p_ht-p1p_ht;p2p1rat  = p2p_ht/p1p_ht;s.Min=p2p_ht-p2p1diff;if p2p1diff==0   s.Value=s.Max;   s.Visible='off';   returnelseif 1/p2p1rat>0.9   s.SliderStep=[0.01 50];elseif 1/p2p1rat>0.6   s.SliderStep=[0.01 10];elseif 1/p2p1rat>0.3   s.SliderStep=[0.01 2.5];elseif 1/p2p1rat>0.05   s.SliderStep=[0.01 1];endsldr_val=s.Value;sldr_val=min(s.Max,sldr_val);sldr_val=max(s.Min,sldr_val);sldr_pct=(sldr_val/(s.Max-s.Min))*1/p2p1rat;s.UserData=sldr_val;s.Visible='on';% calc new p2 positioncont_top = fix(sldr_val);cont_bot = fix(sldr_val-p1p_ht);if cont_bot<0   cont_bot=0;end%cont_bot=max(cont_bot,p1p_ht-p2p_ht);p2p_top = fix(sldr_pct*cont_top);p2p_top = min(p2p_top,p2p_ht);p2p_bot = fix(cont_top-p2p_ht);p2p_bot = max(p2p_bot,p2p_ht-p1p_ht);if s_debug   fprintf('s: [lims],val,pct = [%g %g], %g, (%.2g)\r', ...      s.Max,s.Min,sldr_val,sldr_pct)   fprintf('s: Slider step    = [%g %g]\r', s.SliderStep)   fprintf('s: p2p,p1p_ht     = %g, %g\r', p2p_ht, p1p_ht)   fprintf('s: p2-p1, p2/p1   = %g, %.2g  (%.2g)\r', p2p1diff, p2p1rat, 1/p2p1rat)   fprintf('s: p2p_top,bot    = [%d  %d]\r', p2p_top,p2p_bot)   fprintf('s: cont_top,bot   = [%d  %d]\r', cont_top,cont_bot)   fprintf( '\r' )endcontent_panel.Position=[p2p(1) -cont_bot p2p(3) p2p_ht];drawnowend %function s_live%% %%%%%%%%%% scroll wheel %%%%%%%%%% %%function wheel(hObject,event,s) s1=event.VerticalScrollCount;%fprintf('Scroll: %d\r',s1);p2=hObject.UserData.p2;wheelval=s.Value-(2.5*s1); % scroll 'acceleration'. set purely by taste.if wheelval>s.Max   wheelval=s.Max;elseif wheelval<s.Min   wheelval=s.Min;ends.Value=wheelval;s_live(s,[],p2)end %function wheel%% %%%%%%%%%% live resizing %%%%%%%%%% %%function resize(src,~,s)scrsize = get(0,'Screensize');mBarHgt = 22;  % for macOS. any way to tell dock height?maxHgt = scrsize(4)-mBarHgt;% be more clever about how to resize.% check for resize direction (+ or -)% check whether fig was clicked at top or bottom% %%% does not work cleanly: ignores titlebar click pos. %%%c_loc = src.CurrentPoint;if c_loc(2)<25 && c_loc(2)>0   a='bottom'; %#ok<NASGU>else   a='top'; %#ok<NASGU> % or so we assumeend%fprintf('Clicked: %s (%d)\r',a,c_loc(2));src.CurrentPoint=[-1 -1];h=src.UserData;r_debug=h.r_debugH.Value;prev_sval=s.UserData;prev_ht=h.prev_ht;fpos=src.Position;newf_ht=fix(fpos(4));fpos(3)=h.fig_width; % do not allow width changeif newf_ht>prev_ht   growing=1; %#ok<NASGU> %disp('growing')else   growing=0; %#ok<NASGU> %disp('shrinking')endp0=findobj(src.Children,'Type','uipanel','Tag','p0');p1=findobj(src.Children,'Type','uipanel','Tag','p1');p2=findobj(src.Children,'Type','uipanel','Tag','p2');p0p=p0.Position;p1p=p1.Position;p2p=p2.Position;% redraw p0 panel (contains top labels)p0p(2)=newf_ht-p0p(4)-5;p0.Position=p0p;% window can only add content to the top, try to split diff% As we drag, we may reach either top or bottom limit. in that case,% only add to the non-limited end (until it reaches its limit)p2p_bot  = fix(p2p(2));p2p_ht   = fix(p2p(4)); % constant. is calced during GUI initp2p_top  = p2p_bot+p2p_ht;p1p_ht   = min(newf_ht-h.f_rsrv,p2p_ht);  %subtract 30pix bot,35pix topp2p1diff = p2p_ht-p1p_ht;p2p1rat  = p2p_ht/p1p_ht;if p2p1diff<0   disp('!!! p2p1diff < 0 !!!')   keyboardend% resize p1 to fit new fig heightp1p_ht=min(p2p_ht,p1p_ht);p1p_ht=max(p1p_ht,100);p1.Position=[p1p(1) p1p(2) p1p(3) p1p_ht];% keep fig window within size limitsfpos(4)=p1p_ht+h.f_rsrv;fpos(4)=min(fpos(4),maxHgt);src.Position=fpos;h.prev_ht=newf_ht;% calc content's top and bottomcont_bot = max(p2p_top-p1p_ht-p2p1diff,0);cont_top = min(cont_bot+p1p_ht,p2p_ht);% readjust p2 origin to fill p1p2p_bot = p2p_top-p1p_ht;p2.Position=[p2p(1) p2p_bot p2p(3) p2p_ht];% new values to use/store%s.Max=p1p_ht;s.UserData=s.Value; %current slider vals.Position(4)=p1p_ht;% ??? slider value will not change. use it to keep current view ???% centered if possible. See below for limitations.s.Min=s.Max-p1p_ht;sval=fix(s.Value);spct=sval/(s.Max-s.Min)*1/p2p1rat;if r_debug==1   fprintf('r: Old,new fig ht = %d, %d\r',       prev_ht,newf_ht)   fprintf('r: Prev sldr val  = %g\r',           prev_sval)   fprintf('r: New  sldr val  = %g\r',           s.Value)   fprintf('r: [lims],val,pct = [%g %g], %g, (%.2g)\r', ...      fix(s.Max),fix(s.Min),sval,spct)   fprintf('r: p2,p1 hts      = %d, %d\r',           p2p_ht,p1p_ht)   fprintf('r: p2-p1,p2/p1    = %d, %.2g  (%.2g)\r', p2p1diff,p2p1rat, 1/p2p1rat)   fprintf('r: p2p_top,bot    = [%d  %d]\r',         p2p_top,p2p_bot)   fprintf('r: cont_top,bot   = [%d  %d]\r',         cont_top,cont_bot)   fprintf( '\r' )ends_live(s,[],p2)end %function resize%% %%%%%%%%%% handle dump %%%%%%%%%% %%function hdump(src,~)h=src.Parent.UserData;assignin('base','tehands',h)disp('textedit handles saved in base as "tehands"')end %function hdump%% %%%%%%%%%% maximize control window height %%%%%%%%%% %%function maximize(src,~)f=src.Parent;h=src.Parent.UserData;p1=h.p1;p2=h.p2;s=h.s;figp=f.Position;p1p=p1.Position;p2p=p2.Position;if p1p(4)-p2p(4)==0    %disp('already maximized')      return   endf_maxht= p2p(4)+h.f_rsrv; % fig_ht MUST <= content ht + fig's rsrvr spacef_maxht = min( h.maxHgt, f_maxht );% grow upwards or downwards? %curr_fbot=figp(2);%curr_fht=figp(4);%curr_ftop=curr_fbot+curr_fht;%addpix=f_maxht-curr_fht;%extratop=h.maxHgt-curr_ftop;%extrabot=curr_fbot;%extrapix=extratop+extrabot;%addtop=addpix*(extratop/extrapix);%addbot=addpix-addtop;%new_ftop = min(curr_ftop+addtop, h.maxHgt);%new_fbot = max(curr_fbot-addbot, 0);new_ftop = h.maxHgt-(h.maxHgt-f_maxht)/2;new_fbot = new_ftop-f_maxht;figp(2)=new_fbot;figp(4)=new_ftop-new_fbot;p1p(4)=figp(4)-h.f_rsrv;p1.Position=p1p;p2p(2)=p2p(4)-p1p(4);p2.Position=p2p;f.Position=figp;s_live(s,[],p2)end %function maximize