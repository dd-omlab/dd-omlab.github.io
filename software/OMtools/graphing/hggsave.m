% objcopy.m: copy an object into a new figure.% Both the source and destination axes must exist before% running this function.% Based on objcopy% Written by: Jonathan Jacobs% Created:    10 Jan 2022function hgg2 = hggsave(hgg)% All elements in hg grouphgg2 = for hh = 1:length(hgg)   gSource = hgg(hh);   gType = gSource.Type;   gDest = hgg2(hh);   % If it's a group, break it down.   if strcmpi(gType, 'hggroup')      for jj=1:length(gSource)         try            % try/catch because 'Children' might be empty            gType = gSource.Children(jj).Type;            hggwrite(gSource.Children(jj), gDest, gType)         catch            %         end      end   else      hgg2(hh) = hggwrite(gSource, gType)   endendend %function hggcopy%%function hggwrite(gSource, gDest, gType)switch lower(gType)   case 'line'      destH = line(gDestAx,[-1 1],[-1 1]);         case 'bar'      destH = bar(gDestAx,NaN,NaN);         case 'patch'      destH = patch(gDestAx,0,0,0);         case 'surface'      destH = surf(gDestAx,[0 .01],[0 .01],[0 0;0 0]);         case 'text'      destH=text(gDestAx,0,0,'+');         otherwise      keyboardend %switch gTypeallfields=fields(gSource);for ii=1:length(allfields)   try      if ~strcmpi(allfields{ii},'Parent')         destH.(allfields{ii}) = gSource.(allfields{ii});         %fprintf('%d, %s\n',ii,allfields{ii});         %fprintf('')      end   catch      %fprintf('%s: %d: %s\n', gType,ii,allfields{ii})      %keyboard   endendend %function hggdraw%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%{% do all the line object propertiestry    destH.XData = gSource.XData;catch, endtry    destH.YData = gSource.YData;catch, endtry    destH.ZData = gSource.ZData;catch, endtemp = get(gSource,'Color');set(destH,'Color',temp);%temp = get(gSource,'EraseMode');%set(destH,'EraseMode',temp);temp = get(gSource,'LineStyle');set(destH,'LineStyle',temp);temp = get(gSource,'LineWidth');set(destH,'LineWidth',temp);temp = get(gSource,'MarkerSize');set(destH,'MarkerSize',temp);temp = get(gSource,'Marker');set(destH,'Marker',temp);temp = get(gSource,'MarkerEdgeColor');set(destH,'MarkerEdgeColor',temp);temp = get(gSource,'MarkerFaceColor');set(destH,'MarkerFaceColor',temp);%}%{% bar obj propertiestemp = gSource.BarLayout;destH.BarLayout = temp;temp = gSource.BarWidth;destH.BarWidth = temp;temp = gSource.BaseValue;destH.BaseValue = temp;temp = gSource.BusyAction;destH.BusyAction = temp;temp = gSource.ButtonDownFcn;destH.ButtonDownFcn = temp;temp = gSource.CData;destH.CData = temp;temp = gSource.Children;destH.Children = temp;temp = gSource.Clipping;destH.Clipping = temp;temp = gSource.CreateFcn;destH.CreateFcn = temp;temp = gSource.DeleteFcn;destH.DeleteFcn = temp;temp = gSource.DisplayName;destH.DisplayName = temp;temp = gSource.EdgeAlpha;destH.EdgeAlpha = temp;temp = gSource.EdgeColor;destH.EdgeColor = temp;temp = gSource.FaceAlpha;destH.FaceAlpha = temp;temp = gSource.FaceColor;destH.FaceColor = temp;temp = gSource.HandleVisibility;destH.HandleVisibility = temp;temp = gSource.HitTest;destH.HitTest = temp;temp = gSource.Horizontal;destH.Horizontal = temp;temp = gSource.Interruptible;destH.Interruptible = temp;temp = gSource.LineStyle;destH.LineStyle = temp;temp = gSource.LineWidth;destH.LineWidth = temp;temp = gSource.PickableParts;destH.PickableParts = temp;temp = gSource.Selected;destH.Selected = temp;temp = gSource.SelectionHighlight;destH.SelectionHighlight = temp;temp = gSource.ShowBaseLine;destH.ShowBaseLine = temp;temp = gSource.Tag;destH.Tag = temp;temp = gSource.UIContextMenu;destH.UIContextMenu = temp;temp = gSource.UserData;destH.UserData = temp;temp = gSource.Visible;destH.Visible = temp;temp = gSource.XData;destH.XData = temp;temp = gSource.XDataMode;destH.XDataMode = temp;temp = gSource.XDataSource;destH.XDataSource = temp;temp = gSource.YData;destH.YData = temp;temp = gSource.YDataSource;destH.YDataSource = temp;%}%{% patch propertiestemp = get(gSource,'XData');if ~isempty(temp)   set(destH,'Xdata',temp);endtemp = get(gSource,'YData');if ~isempty(temp)   set(destH,'Ydata',temp);endtemp = get(gSource,'ZData');if ~isempty(temp)   set(destH,'Zdata',temp);endtemp = get(gSource,'CData');if ~isempty(temp)   set(destH,'Cdata',temp);endtemp = get(gSource,'EdgeColor');set(destH,'EdgeColor',temp);%temp = get(gSource,'EraseMode');%set(destH,'EraseMode',temp);temp = get(gSource,'FaceColor');set(destH,'FaceColor',temp);temp = get(gSource,'LineWidth');set(destH,'LineWidth',temp);temp = get(gSource,'CDataMapping');set(destH,'CDataMapping',temp);temp = get(gSource,'FaceVertexCData');if ~isempty(temp)   set(destH,'FaceVertexCData',temp);endtemp = get(gSource,'Faces');set(destH,'Faces',temp);temp = get(gSource,'LineStyle');set(destH,'LineStyle',temp);temp = get(gSource,'Marker');set(destH,'Marker',temp);temp = get(gSource,'MarkerEdgeColor');set(destH,'MarkerEdgeColor',temp);temp = get(gSource,'MarkerFaceColor');set(destH,'MarkerFaceColor',temp);temp = get(gSource,'MarkerSize');set(destH,'MarkerSize',temp);temp = get(gSource,'MarkerSize');set(destH,'MarkerSize',temp);temp = get(gSource,'FaceLighting');set(destH,'FaceLighting',temp);temp = get(gSource,'EdgeLighting');set(destH,'EdgeLighting',temp);temp = get(gSource,'BackFaceLighting');set(destH,'BackFaceLighting',temp);temp = get(gSource,'AmbientStrength');set(destH,'AmbientStrength',temp);temp = get(gSource,'DiffuseStrength');set(destH,'DiffuseStrength',temp);temp = get(gSource,'SpecularStrength');set(destH,'SpecularStrength',temp);temp = get(gSource,'SpecularExponent');set(destH,'SpecularExponent',temp);temp = get(gSource,'SpecularColorReflectance');set(destH,'SpecularColorReflectance',temp);temp = get(gSource,'VertexNormals');set(destH,'VertexNormals',temp);temp = get(gSource,'NormalMode');set(destH,'NormalMode',temp);%}%{% surface propertiestemp = get(gSource,'XData');if ~isempty(temp)   set(destH,'Xdata',temp);endtemp = get(gSource,'YData');if ~isempty(temp)   set(destH,'Ydata',temp);endtemp = get(gSource,'ZData');if ~isempty(temp)   set(destH,'Zdata',temp);endtemp = get(gSource,'CData');if ~isempty(temp)   set(destH,'Cdata',temp);endtemp = get(gSource,'EdgeColor');set(destH,'EdgeColor',temp);%temp = get(gSource,'EraseMode');%set(destH,'EraseMode',temp);temp = get(gSource,'FaceColor');set(destH,'FaceColor',temp);temp = get(gSource,'LineWidth');set(destH,'LineWidth',temp);temp = get(gSource,'LineStyle');set(destH,'LineStyle',temp);temp = get(gSource,'MarkerSize');set(destH,'MarkerSize',temp);temp = get(gSource,'MeshStyle');set(destH,'MeshStyle',temp);temp = get(gSource,'CDataMapping');set(destH,'CDataMapping',temp);temp = get(gSource,'Marker');set(destH,'Marker',temp);temp = get(gSource,'MarkerEdgeColor');set(destH,'MarkerEdgeColor',temp);temp = get(gSource,'MarkerFaceColor');set(destH,'MarkerFaceColor',temp);temp = get(gSource,'FaceLighting');set(destH,'FaceLighting',temp);temp = get(gSource,'EdgeLighting');set(destH,'EdgeLighting',temp);temp = get(gSource,'BackFaceLighting');set(destH,'BackFaceLighting',temp);temp = get(gSource,'AmbientStrength');set(destH,'AmbientStrength',temp);temp = get(gSource,'DiffuseStrength');set(destH,'DiffuseStrength',temp);temp = get(gSource,'SpecularStrength');set(destH,'SpecularStrength',temp);temp = get(gSource,'SpecularExponent');set(destH,'SpecularExponent',temp);temp = get(gSource,'SpecularColorReflectance');set(destH,'SpecularColorReflectance',temp);temp = get(gSource,'VertexNormals');set(destH,'VertexNormals',temp);temp = get(gSource,'NormalMode');set(destH,'NormalMode',temp);%}%{% text propertiesoldHandVis = get(destH,'HandleVisibility');set(destH,'HandleVisibility','off');temp = get(gSource,'Color');set(destH,'Color',temp);%temp = get(gSource,'EraseMode');%set(destH,'EraseMode',temp);temp = get(gSource,'FontAngle');set(destH,'FontAngle',temp);temp = get(gSource,'FontName');set(destH,'FontName',temp);temp = get(gSource,'FontSize');set(destH,'FontSize',temp);temp = get(gSource,'FontWeight');set(destH,'FontWeight',temp);temp = get(gSource,'HorizontalAlignment');set(destH,'HorizontalAlignment',temp);if (1)   temp = get(gSource,'Units');   set(destH,'Units',temp);   temp = get(gSource,'Position');   set(destH,'Position',temp);endtemp = get(gSource,'Rotation');set(destH,'Rotation',temp);temp = get(gSource,'String');set(destH,'String',temp);temp = get(gSource,'VerticalAlignment');set(destH,'VerticalAlignment',temp);temp = get(gSource,'FontUnits');set(destH,'FontUnits',temp);temp = get(gSource,'Interpreter');set(destH,'Interpreter',temp);temp = get(gSource,'Editing');set(destH,'Editing',temp);set(destH,'HandleVisibility',oldHandVis);%}