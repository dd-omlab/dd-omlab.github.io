%'PRNT' usage:%prnt(array(s), page length, yAxisLims, preview)%   array(s):     names of arrays to be printed.%   page length : how many seconds (or samples) will appear on each page.  %                 (Default: prints to fit 4 pages.)%   yAxisLims:     0  -- all pages use global max/min y-limits.  %                  1  -- each page uses its own max/min y-limit. (Default) %   preview:       0  -- send to printer%                  1  -- send to screen to show what final output will look like%%All arguments after 'array(s)' are optional, however if you specify one,%you must also include all the arguments that come before it.%%Example: prnt('lh rh lv rv', 5, 1) will print four data channels, 5 seconds% per page, with y-limits set to maximize the data printed on each page % written by:  Jonathan Jacobs%              November 1995 - April 1997 (last mod: 04/14/97)function  prnt(inp_str, page_len, y_zoom, preview)global filename samp_freqif nargin == 0  help prnt  returnendif isempty(filename), filename = 'unknown file'; endif isempty(samp_freq)   samp_freq = input('Enter the sampling frequency: ');end% this may work.  the user inputs a string of array names, eg 'lh lv rh rv'% and we then strip the names off, one by one, to get the input array.temp = inp_str;i=0; inp_str=[]; errorFlag = 0;while ~isempty(temp)   i=i+1;   [tempStr, temp] = strtok(temp);   eval(['global ' tempStr]);   eval(['inp(:,i) = ' tempStr ';' ], 'errorFlag = 1;');   if errorFlag      disp('Uh, oh: you''ve specified an array that I can''t yet deal with.')      disp(['If you didn''t make a typo, try typing ''global ' tempStr ''''])      disp('and run ''prnt'' again.')      return     else      inp_str(i,:) = blanks(5);      inp_str(i,1:length(tempStr)) = tempStr;    endend[dat_pts, numChans] = size(inp);if numChans > dat_pts   inp = inp';   [dat_pts, numChans] = size(inp);endif nargin == 1   page_len = dat_pts/4;   y_zoom = 1;   t_or_s = 't';   preview = 0;endif nargin == 2 | nargin == 3   y_zoom = 1;   preview = 0;endlinStyl = ['- ' ; ': ' ; '--' ; '-.' ; '. '];linName = ['solid   '; 'dotted  '; 'dashed  '; 'dash-dot'; 'point   '];% if page_len is in seconds, convert it to samples.if page_len < 100   page_len = page_len*samp_freq;   t_or_s = 't';endnum_pages = fix(dat_pts/page_len);remain = dat_pts - page_len*num_pages;if remain ~= 0                            % not a mult of page_len   if remain > samp_freq/2                % add a page if we have more than       num_pages = num_pages + 1;          % half a second left    endendif t_or_s == 's'   x_vect = 1:(page_len*num_pages);   xlbl = 'Sample Number'; else   x_vect = (1:page_len*num_pages)/samp_freq;   xlbl = 'Time (seconds)';end% get global y-axis limitsy_low  = min(min(inp)); if y_low > 0   y_low = y_low*0.9; else   y_low = y_low*1.1;endy_high = max(max(inp));if y_high > 0   y_high = y_high*1.1; else   y_high = y_high*0.9;endfor x = 1:num_pages   w_name = [ 'pg ' num2str(x) '/' num2str(num_pages) ];   figure('Name', w_name,'NumberTitle','off');   x_low  = (x-1)*page_len + 1;   x_high = min(x*page_len, dat_pts);   if y_zoom      % set local y-axis limits      y_low  = min(min(inp(x_low:x_high, : )));       if y_low > 0         y_low = y_low*0.9;       else         y_low = y_low*1.1;      end      y_high = max(max(inp(x_low:x_high, : )));      if y_high > 0         y_high = y_high*1.1;       else         y_high = y_high*0.9;      end   end   plotH = plot( x_vect(x_low:x_high), inp(x_low:x_high, :) );   legendStr = [];   for z=1:length(plotH)      set( plotH(z), 'LineStyle', linStyl(rem(z,5),:) );      legendStr=[legendStr deblank(inp_str(z,:)) ':',...                 deblank(linName(z,:)) '  '];   end   title([ filename ' (' deblank(legendStr) ')  ' w_name]);   xlabel(xlbl)   ylabel('Eye Position')   drawnow   set(gca,'XLim', [x_vect(x_low), x_vect(x*page_len)]);   %axis([x_vect(x_low), x_vect(x*page_len), y_low, y_high]);   orient landscape;   if ~preview      print -dljet3      close   endend